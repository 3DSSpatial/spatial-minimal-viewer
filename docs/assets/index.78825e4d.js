var HF=Object.defineProperty;var zi=Object.getOwnPropertySymbols;var xF=Object.prototype.hasOwnProperty,wF=Object.prototype.propertyIsEnumerable;var aC=(i,e,g)=>e in i?HF(i,e,{enumerable:!0,configurable:!0,writable:!0,value:g}):i[e]=g,FC=(i,e)=>{for(var g in e||(e={}))xF.call(e,g)&&aC(i,g,e[g]);if(zi)for(var g of zi(e))wF.call(e,g)&&aC(i,g,e[g]);return i};var DF=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports);var tt=(i,e,g)=>(aC(i,typeof e!="symbol"?e+"":e,g),g);var ar=DF((sr,hi)=>{const KF=function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const I of document.querySelectorAll('link[rel="modulepreload"]'))t(I);new MutationObserver(I=>{for(const l of I)if(l.type==="childList")for(const C of l.addedNodes)C.tagName==="LINK"&&C.rel==="modulepreload"&&t(C)}).observe(document,{childList:!0,subtree:!0});function g(I){const l={};return I.integrity&&(l.integrity=I.integrity),I.referrerpolicy&&(l.referrerPolicy=I.referrerpolicy),I.crossorigin==="use-credentials"?l.credentials="include":I.crossorigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function t(I){if(I.ep)return;I.ep=!0;const l=g(I);fetch(I.href,l)}};KF();function oa(i,e,g,t){var I;i.onmousedown=l;function l(n){I={e:n,offsetLeft:i.offsetLeft,offsetTop:i.offsetTop,leftPanelWidth:e.offsetWidth,mainPanelWidth:g.offsetWidth,leftPanelHeight:e.offsetHeight,mainPanelHeight:g.offsetHeight},document.onmousemove=C,document.onmouseup=()=>{document.onmousemove=document.onmouseup=null}}function C(n){var F={x:n.clientX-I.e.clientX,y:n.clientY-I.e.clientY};t==="H"?(F.x=Math.min(Math.max(F.x,-I.leftPanelWidth),I.mainPanelWidth),i.style.left=I.offsetLeft+F.x+"px",e.style.width=I.leftPanelWidth+F.x+"px"):t==="V"&&(g.style.height=I.mainPanelHeight-F.y+"px")}}const LF=document.getElementById("separatorV"),zF=document.getElementById("leftPanel"),_F=document.getElementById("mainPanel");oa(LF,zF,_F,"H");const _i=document.getElementById("separatorH"),Oi=document.getElementById("topPanel"),Pi=document.getElementById("bottomPanel");_i&&Oi&&Pi&&oa(_i,Oi,Pi,"V");var Aa="4.3.0-88bedfc";class OF{constructor(e){this.version=e,this.registry={}}registerLib(e){const g=e.name,t=e.version;this.registry[g]&&console.warn("Library already registered:"+g),this.registry[g]=t,console.log(`Registered lib '${g}' v${t}`)}listLibs(){return this.registry}}function PF(){return(navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i))!=null}function jF(){return(navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Pixel/i)||navigator.userAgent.match(/Windows Phone/i))!=null}function qF(){const i=navigator.userAgent;let e=navigator.appName,g=""+parseFloat(navigator.appVersion),t=parseInt(navigator.appVersion,10),I,l,C;return navigator.brave?(e="Brave",l=i.indexOf("Chrome"),g=i.substring(l+7,i.indexOf(" ",l+7))):(l=i.indexOf("Opera"))!=-1?(e="Opera",g=i.substring(l+6),(l=i.indexOf("Version"))!=-1&&(g=i.substring(l+8))):(l=i.indexOf("MSIE"))!=-1?(e="Microsoft Internet Explorer",g=i.substring(l+5)):(l=i.indexOf("Edge"))!=-1?(e="Edge",g=i.substring(l+4)):(l=i.indexOf("Chrome"))!=-1?(e="Chrome",g=i.substring(l+7,i.indexOf(" ",l+7))):(l=i.indexOf("Safari"))!=-1?(e="Safari",g=i.substring(l+7),(l=i.indexOf("Version"))!=-1&&(g=i.substring(l+8))):(l=i.indexOf("Firefox"))!=-1?(e="Firefox",g=i.substring(l+8)):(I=i.lastIndexOf(" ")+1)<(l=i.lastIndexOf("/"))&&(e=i.substring(I,l),g=i.substring(l+1),e.toLowerCase()==e.toUpperCase()&&(e=navigator.appName)),(C=g.indexOf(";"))!=-1&&(g=g.substring(0,C)),(C=g.indexOf(" "))!=-1&&(g=g.substring(0,C)),t=parseInt(""+g,10),isNaN(t)&&(g=""+parseFloat(navigator.appVersion),t=parseInt(navigator.appVersion,10)),{browserName:e,fullVersion:g,majorVersion:t,appName:navigator.appName,userAgent:navigator.userAgent}}function $F(){let i;try{i=document.createElement("canvas").getContext("webgl")}catch{}if(!i)return{vendor:"Unknown",renderer:"Unknown",gpuVendor:"Unknown",maxTextureSize:0,supportsWebGL:!1,supportsWebGL2:!1};let e;try{e=document.createElement("canvas").getContext("webgl2")}catch{}const g=i.getExtension("WEBGL_debug_renderer_info");if(!g)return console.warn("Unable to determine GPU Info:"),{vendor:"Unknown",renderer:"Unknown",gpuVendor:"Unknown",maxTextureSize:0,supportsWebGL:i!=null,supportsWebGL2:e!=null};const t=i.getParameter(g.UNMASKED_VENDOR_WEBGL),I=i.getParameter(g.UNMASKED_RENDERER_WEBGL),l=i.getParameter(i.MAX_TEXTURE_SIZE);let C;return I.match(/NVIDIA/i)?C="NVidia":I.match(/AMD/i)||I.match(/Radeon/i)?C="AMD":I.match(/Intel/i)?C="Intel":I.match(/Mali/i)?C="ARM":I.match(/Apple/i)?C="Apple":I.match(/Adreno/i)?C="Adreno":I.match(/Swiftshader/i)?(C="Google",console.warn("Hardware rendering is disabled or not working on your system. Falling back to the Swiftshader. Expect poor performance:",I)):console.warn("Unable to determine GPU vendor:",I),{vendor:t,renderer:I,gpuVendor:C,maxTextureSize:l,supportsWebGL:!0,supportsWebGL2:e!=null}}const _e=function(){if(!globalThis.navigator)return{isMobileDevice:!1,isIOSDevice:!1,browserName:"Node",webGLSupported:!1,deviceCategory:"High",hardwareConcurrency:4};const i=jF(),e=qF(),g=$F();let t="Low";if(g.supportsWebGL)if(i)t="Low";else{const l=g.renderer.replace(/[()]/g,"").split(" ");if(g.gpuVendor=="NVidia"){const C=l.indexOf("GTX");if(C!=-1){const n=l[C+1];n.endsWith("M")?parseInt(n.substring(0,n.length-2))>=900?t="Medium":t="Low":parseInt(n)>=1030?t="High":t="Medium"}else l.includes("RTX")||l.includes("TITAN")||l.includes("Quadro")?t="High":t="Low"}else if(g.gpuVendor=="AMD"){const C=l.indexOf("Radeon");if(C!=-1){const n=l.indexOf("RX");if(n!=-1)if(l[n+1]=="Vega")t="High";else{const F=l[n+1];let a;F.endsWith("X")?(a=parseInt(F.substring(0,F.length-2)),t="High"):a=parseInt(F),a>=480?t="High":t="Medium"}else l[C+1]=="Pro"?parseInt(l[n+1])>=450?t="Medium":t="Low":l[C+1]=="Sky"&&parseInt(l[n+1])>=700?t="Medium":t="Low"}else l.includes("FirePro")||l.includes("Quadro")?t="High":t="Low"}else(g.gpuVendor=="Adreno"||g.gpuVendor=="Intel"||g.gpuVendor=="Google")&&(t="Low")}let I=globalThis.navigator.hardwareConcurrency;return I||(i?I=4:I=6),{isMobileDevice:i,isIOSDevice:PF(),browserName:e.browserName,fullVersion:e.fullVersion,majorVersion:e.majorVersion,appName:e.appName,userAgent:e.userAgent,webGLSupported:g.supportsWebGL,gpuDesc:g,deviceCategory:t,hardwareConcurrency:I}}();globalThis.ZeaSystemDesc||(globalThis.ZeaSystemDesc=_e);let ut={},qI={},St=[];class S{static register(e,g){if(e in ut){console.warn(`There's a class registered with '${e}' name. Second registration failed.`);return}const t=St.length;St.push(g),qI[t]=e,ut[e]=t}static getClassDefinition(e){if(!(e in ut))throw new Error(`${e} class is not registered`);return St[ut[e]]}static getClassName(e){const g=St.indexOf(e);if(g>=0&&qI[g])return qI[g];throw new Error("class is not registered")}static constructClass(e){const g=St[ut[e]];if(!g)throw new Error(`${e} class is not registered`);return new g}static flush(){ut={},qI={},St=[]}}class tg{static replaceAll(e,g,t){return e.replace(new RegExp(g,"g"),t)}static stringifyJSONWithFixedPrecision(e,g=0,t=5){return JSON.stringify(e,(I,l)=>l&&(l.toFixed?Number(l.toFixed(t)):l),g)}static hashStr(e){let g=0,t,I,l;if(e.length===0)return g;for(t=0,l=e.length;t<l;t++)I=e.charCodeAt(t),g=(g<<5)-g+I,g|=0;return Math.abs(g)}}class f{constructor(e=0,g=0){e instanceof Float32Array||e instanceof Uint32Array||e instanceof Int32Array?this.__data=e:typeof e=="number"&&typeof g=="number"?(this.__data=new Float32Array(2),this.__data[0]=e,this.__data[1]=g):typeof e=="object"?(this.__data=new Float32Array(2),this.fromJSON(e)):this.__data=new Float32Array(2)}get x(){return this.__data[0]}set x(e){this.__data[0]=e}get y(){return this.__data[1]}set y(e){this.__data[1]=e}set(e,g){this.__data[0]=e,this.__data[1]=g}setFromOther(e){this.x=e.x,this.y=e.y}isEqual(e){return this.x==e.x&&this.y==e.y}notEqual(e){return this.x!=e.x&&this.y!=e.y}approxEqual(e,g=Number.EPSILON){return Math.abs(this.x-e.x)<g&&Math.abs(this.y-e.y)<g}add(e){return new f(this.x+e.x,this.y+e.y)}addInPlace(e){this.x+=e.x,this.y+=e.y}subtract(e){return new f(this.x-e.x,this.y-e.y)}subtractInPlace(e){return this.x-=e.x,this.y-=e.y,this}scale(e){return new f(this.x*e,this.y*e)}scaleInPlace(e){this.x*=e,this.y*=e}invert(){return new f(1/this.x,1/this.y)}invertInPlace(){return this.x=1/this.x,this.y=1/this.y,this}multiply(e){return new f(this.x*e.x,this.y*e.y)}multiplyInPlace(e){this.x*=e.x,this.y*=e.y}lengthSquared(){const e=this.__data[0],g=this.__data[1];return e*e+g*g}length(){return Math.sqrt(this.lengthSquared())}distanceTo(e){const g=this.__data[0]-e.x,t=this.__data[1]-e.y;return Math.sqrt(g*g+t*t)}normalize(){const e=this.__data[0],g=this.__data[1];let t=e*e+g*g;return t<Number.EPSILON?new f:(t=1/Math.sqrt(t),new f(e*t,g*t))}normalizeInPlace(){const e=this.__data[0],g=this.__data[1];let t=e*e+g*g;t<Number.EPSILON||(t=1/Math.sqrt(t),this.set(e*t,g*t))}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}angleTo(e){const g=this.normalize().dot(e.normalize());return g>1?0:g<-1?Math.PI:Math.acos(g)}signedAngleTo(e){const g=this.angleTo(e);return this.cross(e)<0?-g:g}rotate(e){const g=Math.cos(e),t=Math.sin(e);return new f(this.x*g-this.y*t,this.x*t+this.y*g)}lerp(e,g){const t=this.x,I=this.y;return new f(t+g*(e.x-t),I+g*(e.y-I))}setRandomDir(e=1){const g=Math.random()*2*Math.PI;return this.__data[0]=Math.cos(g)*e,this.__data[1]=Math.sin(g)*e,this}setRandom(e=1){return this.__data[0]=Math.random()*e,this.__data[1]=Math.random()*e,this}clone(){return new f(this.__data[0],this.__data[1])}asArray(){return this.__data}toString(){return tg.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y}}fromJSON(e){this.x=e.x,this.y=e.y}readBinary(e){this.x=e.loadFloat32(),this.y=e.loadFloat32()}static intersectionOfLines(e,g,t,I){const l=(e.x-g.x)*(t.y-I.y),C=(e.y-g.y)*(t.x-I.x),n=l-C;if(n==0)return null;const F=e.x*g.y-e.y*g.x,a=t.x*I.y-t.y*I.x,U=t.x-I.x,d=e.x-g.x,s=t.y-I.y,o=e.y-g.y,A=(F*U-d*a)/n,B=(F*s-o*a)/n;return new f(A,B)}isValid(){for(const e of this.__data)if(e==1/0||isNaN(e))return!1;return!0}}class b{constructor(e=0,g=0,t=0){if(e instanceof Float32Array||e instanceof Uint32Array)this.__data=e;else if(e instanceof ArrayBuffer){console.warn("deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 3))");const I=e,l=g;this.__data=new Float32Array(I,l,3)}else typeof e=="number"&&typeof g=="number"&&typeof t=="number"?(this.__data=new Float32Array(3),this.__data[0]=e,this.__data[1]=g,this.__data[2]=t):e!=null&&typeof e=="object"?(this.__data=new Float32Array(3),this.fromJSON(e)):this.__data=new Float32Array(3)}get x(){return this.__data[0]}set x(e){this.__data[0]=e}get y(){return this.__data[1]}set y(e){this.__data[1]=e}get z(){return this.__data[2]}set z(e){this.__data[2]=e}get xy(){return new f(this.__data[0],this.__data[1])}get yz(){return new f(this.__data[1],this.__data[2])}set(e,g,t){this.x=e,this.y=g!==void 0?g:e,this.z=t!==void 0?t:e}setDataArray(e){this.__data=e}setFromOther(e){this.x=e.x,this.y=e.y,this.z=e.z}isNull(){return Math.abs(this.x)<Number.EPSILON&&Math.abs(this.y)<Number.EPSILON&&Math.abs(this.z)<Number.EPSILON}is111(){return Math.abs(1-this.x)<Number.EPSILON&&Math.abs(1-this.y)<Number.EPSILON&&Math.abs(1-this.z)<Number.EPSILON}isEqual(e){return this.x==e.x&&this.y==e.y&&this.z==e.z}notEqual(e){return this.x!=e.x&&this.y!=e.y&&this.z!=e.z}approxEqual(e,g=Number.EPSILON){return Math.abs(this.x-e.x)<g&&Math.abs(this.y-e.y)<g&&Math.abs(this.z-e.z)<g}add(e){return new b(this.x+e.x,this.y+e.y,this.z+e.z)}addInPlace(e){this.x+=e.x,this.y+=e.y,this.z+=e.z}subtract(e){return new b(this.x-e.x,this.y-e.y,this.z-e.z)}subtractInPlace(e){this.x-=e.x,this.y-=e.y,this.z-=e.z}multiply(e){return new b(this.x*e.x,this.y*e.y,this.z*e.z)}multiplyInPlace(e){this.x*=e.x,this.y*=e.y,this.z*=e.z}divide(e){return new b(this.x/e.x,this.y/e.y,this.z/e.z)}divideInPlace(e){this.x/=e.x,this.y/=e.y,this.z/=e.z}scale(e){return new b(this.x*e,this.y*e,this.z*e)}scaleInPlace(e){this.x*=e,this.y*=e,this.z*=e}negate(){return new b(-this.x,-this.y,-this.z)}inverse(){return new b(1/this.x,1/this.y,1/this.z)}lengthSquared(){const e=this.__data[0],g=this.__data[1],t=this.__data[2];return e*e+g*g+t*t}length(){return Math.sqrt(this.lengthSquared())}distanceTo(e){const g=this.__data[0]-e.x,t=this.__data[1]-e.y,I=this.__data[2]-e.z;return Math.sqrt(g*g+t*t+I*I)}normalize(){let e=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];return e<Number.EPSILON?new b:(e=1/Math.sqrt(e),new b(this.__data[0]*e,this.__data[1]*e,this.__data[2]*e))}normalizeInPlace(){let e=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(e<Number.EPSILON)return;e=Math.sqrt(e);const g=1/e;return this.__data[0]*=g,this.__data[1]*=g,this.__data[2]*=g,e}resize(e){const g=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(g<Number.EPSILON)return;const t=e/Math.sqrt(g);return new b(this.__data[0]*t,this.__data[1]*t,this.__data[2]*t)}resizeInPlace(e){const g=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(g<Number.EPSILON)return;const t=e/Math.sqrt(g);this.__data[0]*=t,this.__data[1]*=t,this.__data[2]*=t}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}cross(e){const g=this.x,t=this.y,I=this.z,l=e.x,C=e.y,n=e.z;return new b(t*n-I*C,I*l-g*n,g*C-t*l)}angleTo(e){const g=this.dot(e);return g>1?0:Math.acos(g)}lerp(e,g){const t=this.x,I=this.y,l=this.z;return new b(t+g*(e.x-t),I+g*(e.y-I),l+g*(e.z-l))}abs(){return new b(Math.abs(this.x),Math.abs(this.y),Math.abs(this.z))}setRandomDir(e=1){const g=Math.random()*2*Math.PI,t=Math.random()*2-1,I=Math.sqrt(1-t*t)*e;return this.__data[0]=Math.cos(g)*I,this.__data[1]=Math.sin(g)*I,this.__data[2]=t*e,this}setRandom(e=1){return this.__data[0]=(Math.random()-.5)*e,this.__data[1]=(Math.random()-.5)*e,this.__data[2]=(Math.random()-.5)*e,this}clone(){return new b(this.__data[0],this.__data[1],this.__data[2])}asArray(){return this.__data}toString(){return tg.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z}}fromJSON(e){this.x=e.x,this.y=e.y,this.z=e.z}readBinary(e){this.x=e.loadFloat32(),this.y=e.loadFloat32(),this.z=e.loadFloat32()}isValid(){for(const e of this.__data)if(e==1/0||isNaN(e))return!1;return!0}}class Be{constructor(e=0,g=0,t=0,I=0){if(e instanceof Float32Array||e instanceof Uint32Array)this.__data=e;else if(e instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const l=e,C=g;this.__data=new Float32Array(l,C,4)}else typeof e=="number"&&typeof g=="number"&&typeof t=="number"&&typeof I=="number"?(this.__data=new Float32Array(4),this.__data[0]=e,this.__data[1]=g,this.__data[2]=t,this.__data[3]=I):e!=null&&typeof e=="object"?(this.__data=new Float32Array(4),this.fromJSON(e)):this.__data=new Float32Array(4)}get x(){return this.__data[0]}set x(e){this.__data[0]=e}get y(){return this.__data[1]}set y(e){this.__data[1]=e}get z(){return this.__data[2]}set z(e){this.__data[2]=e}get t(){return this.__data[3]}set t(e){this.__data[3]=e}get w(){return this.__data[3]}set w(e){this.__data[3]=e}get xyz(){return new b(this.__data[0],this.__data[1],this.__data[2])}set(e,g,t,I){this.x=e,this.y=g,this.z=t,this.t=I}setFromOther(e){this.x=e.x,this.y=e.y,this.z=e.z,this.t=e.t}isEqual(e){return this.x==e.x&&this.y==e.y&&this.z==e.z&&this.t==e.t}notEqual(e){return this.x!=e.x&&this.y!=e.y&&this.z!=e.z&&this.t!=e.t}approxEqual(e,g=Number.EPSILON){return Math.abs(this.x-e.x)<g&&Math.abs(this.y-e.y)<g&&Math.abs(this.z-e.z)<g&&Math.abs(this.t-e.t)<g}add(e){return new Be(this.x+e.x,this.y+e.y,this.z+e.z,this.t+e.t)}addInPlace(e){this.x+=e.x,this.y+=e.y,this.z+=e.z,this.t+=e.t}subtract(e){return new Be(this.x-e.x,this.y-e.y,this.z-e.z,this.t-e.t)}subtractInPlace(e){this.x-=e.x,this.y-=e.y,this.z-=e.z,this.t-=e.t}multiply(e){return new Be(this.x*e.x,this.y*e.y,this.z*e.z,this.t*e.t)}multiplyInPlace(e){this.x*=e.x,this.y*=e.y,this.z*=e.z,this.t*=e.t}divide(e){return new Be(this.x/e.x,this.y/e.y,this.z/e.z,this.t/e.t)}divideInPlace(e){this.x/=e.x,this.y/=e.y,this.z/=e.z,this.t/=e.t}scale(e){return new Be(this.x*e,this.y*e,this.z*e,this.t*e)}scaleInPlace(e){this.set(this.x*e,this.y*e,this.z*e,this.t*e)}length(){const e=this.__data[0],g=this.__data[1],t=this.__data[2],I=this.__data[2];return Math.sqrt(e*e+g*g+t*t+I*I)}lengthSquared(){const e=this.__data[0],g=this.__data[1],t=this.__data[2],I=this.__data[3];return e*e+g*g+t*t+I*I}normalize(){const e=this.__data[0],g=this.__data[1],t=this.__data[2],I=this.__data[3];let l=e*e+g*g+t*t+I*I;return l<Number.EPSILON?new Be:(l=1/Math.sqrt(l),new Be(e*l,g*l,t*l))}normalizeInPlace(){const e=this.__data[0],g=this.__data[1],t=this.__data[2],I=this.__data[3];let l=e*e+g*g+t*t+I*I;l<Number.EPSILON||(l=1/Math.sqrt(l),this.set(e*l,g*l,t*l,I*l))}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.t*e.t}cross(e){const g=this.x,t=this.y,I=this.z,l=this.t,C=e.x,n=e.y,F=e.z,a=e.t;return new Be(t*F-I*n,I*a-l*F,l*C-g*a,g*n-t*C)}angleTo(e){const g=this.normalize(),t=e.normalize(),I=g.dot(t);return I>1?0:Math.acos(I)}lerp(e,g){const t=this.x,I=this.y,l=this.z,C=this.t;return new Be(t+g*(e.x-t),I+g*(e.y-I),l+g*(e.z-l),C+g*(e.t-C))}clone(){return new Be(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}toVec3(){return new b(this.__data[0],this.__data[1],this.__data[2])}asArray(){return this.__data}toString(){return tg.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z,t:this.t}}fromJSON(e){this.x=e.x,this.y=e.y,this.z=e.z,this.t=e.t}readBinary(e){this.x=e.loadFloat32(),this.y=e.loadFloat32(),this.z=e.loadFloat32(),this.t=e.loadFloat32()}isValid(){for(const e of this.__data)if(e==1/0||isNaN(e))return!1;return!0}}class E{constructor(e=0,g=0,t=0,I=1){if(e instanceof Float32Array)this.__data=e;else if(e instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const l=e,C=g;this.__data=new Float32Array(l,C,4)}else this.__data=new Float32Array(4),typeof e=="string"?e.startsWith("#")?this.setFromHex(e):this.setFromCSSColorName(e):(this.__data[0]=e,this.__data[1]=g,this.__data[2]=t,this.__data[3]=I)}get r(){return this.__data[0]}set r(e){this.__data[0]=e}get g(){return this.__data[1]}set g(e){this.__data[1]=e}get b(){return this.__data[2]}set b(e){this.__data[2]=e}get a(){return this.__data[3]}set a(e){this.__data[3]=e}set(e,g,t,I=1){this.r=e,this.g=g,this.b=t,this.a=I}setFromOther(e){this.r=e.r,this.g=e.g,this.b=e.b,this.a=e.a}setFromScalarArray(e){this.r=e[0],this.g=e[1],this.b=e[2],this.a=e.length==4?e[3]:1}getAsRGBArray(){return[this.r*255,this.g*255,this.b*255]}getAsRGBDict(){return{r:this.r*255,g:this.g*255,b:this.b*255}}setFromRGB(e,g,t,I){this.r=e/255,this.g=g/255,this.b=t/255,this.a=I?I/255:1}setFromRGBArray(e){this.r=e[0]/255,this.g=e[1]/255,this.b=e[2]/255,this.a=e.length==4?e[3]/255:1}setFromRGBDict(e){this.r=e.r/255,this.g=e.g/255,this.b=e.b/255,this.a=e.a==4?e.a/255:1}setFromHex(e){function g(I){const l=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(I);return l?{r:parseInt(l[1],16),g:parseInt(l[2],16),b:parseInt(l[3],16)}:null}const t=g(e);if(!t){console.warn("Invalid hex code:"+e);return}this.setFromRGB(t.r,t.g,t.b)}setFromCSSColorName(e){const g=t=>({aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4","indianred ":"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"})[t.toLowerCase()];if(e.startsWith("#"))this.setFromHex(e);else{const t=g(e);t&&this.setFromHex(t)}}toHex(){function e(g){const I=Math.round(g*255).toString(16);return I.length==1?"0"+I:I}return"#"+e(this.r)+e(this.g)+e(this.b)}isEqual(e){return this.r==e.r&&this.g==e.g&&this.b==e.b&&this.a==e.a}notEquals(e){return this.r!=e.r&&this.g!=e.g&&this.b!=e.b&&this.a!=e.a}approxEqual(e,g=Number.EPSILON){return Math.abs(this.r-e.r)<g&&Math.abs(this.g-e.g)<g&&Math.abs(this.b-e.b)<g&&Math.abs(this.a-e.a)<g}add(e){return new E(this.r+e.r,this.g+e.g,this.b+e.b,this.a+e.a)}addInPlace(e){this.r+=e.r,this.g+=e.g,this.b+=e.b,this.a+=e.a}subtract(e){return new E(this.r-e.r,this.g-e.g,this.b-e.b,this.a-e.a)}scale(e){return new E(this.r*e,this.g*e,this.b*e,this.a*e)}scaleInPlace(e){this.r*=e,this.g*=e,this.b*=e,this.a*=e}applyGamma(e){this.set(Math.pow(this.r,e),Math.pow(this.g,e),Math.pow(this.b,e),this.a)}toLinear(e=2.2){return new E(Math.pow(this.r,e),Math.pow(this.g,e),Math.pow(this.b,e),this.a)}toGamma(e=2.2){return new E(Math.pow(this.r,1/e),Math.pow(this.g,1/e),Math.pow(this.b,1/e),this.a)}luminance(){return .2126*this.r+.7152*this.g+.0722*this.b}lerp(e,g){const t=this.r,I=this.g,l=this.b,C=this.a;return new E(t+g*(e.r-t),I+g*(e.g-I),l+g*(e.b-l),C+g*(e.a-C))}static random(e=0,g=!1){return e>0?new E(e+Math.random()*(1-e),e+Math.random()*(1-e),e+Math.random()*(1-e),g?e+Math.random()*(1-e):1):e<0?new E(Math.random()*(1+e),Math.random()*(1+e),Math.random()*(1+e),g?Math.random()*(1+e):1):new E(Math.random(),Math.random(),Math.random(),g?Math.random():1)}clone(){return new E(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}as3ComponentArray(){return[this.__data[0],this.__data[1],this.__data[2]]}toJSON(){return{r:this.r,g:this.g,b:this.b,a:this.a}}fromJSON(e){this.r=e.r,this.g=e.g,this.b=e.b,this.a=e.a}readBinary(e){this.r=e.loadFloat32(),this.g=e.loadFloat32(),this.b=e.loadFloat32(),this.a=e.loadFloat32()}toCSSString(){return"rgba("+Math.round(this.r*255)+", "+Math.round(this.g*255)+", "+Math.round(this.b*255)+", "+this.a+")"}}class lt{constructor(e=0,g=0,t=0,I=0){if(typeof I=="number"&&!isNaN(I))this.order=I;else switch(I){case"XYZ":this.order=0;break;case"YZX":this.order=1;break;case"ZXY":this.order=2;break;case"XZY":this.order=3;break;case"ZYX":this.order=4;break;case"YXZ":this.order=5;break;default:throw new Error("Invalid Euler Angles Order:"+I)}if(e instanceof ArrayBuffer){const l=e,C=g;this.__data=new Float32Array(l,C,4)}else this.__data=new Float32Array(3),this.__data[0]=e,this.__data[1]=g,this.__data[2]=t}get x(){return this.__data[0]}set x(e){this.__data[0]=e}get y(){return this.__data[1]}set y(e){this.__data[1]=e}get z(){return this.__data[2]}set z(e){this.__data[2]=e}set(e,g,t){this.__data[0]=e,this.__data[1]=g,this.__data[2]=t}toString(){return tg.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.__data[0],y:this.__data[1],z:this.__data[2],order:this.order}}fromJSON(e){this.__data[0]=e.x,this.__data[1]=e.y,this.__data[2]=e.z,this.order=e.order}}class ng{constructor(e=1,g=0,t=0,I=0,l=1,C=0,n=0,F=0,a=1){if(e instanceof b&&g instanceof b&&t instanceof b)this.__data=new Float32Array(9),this.set(e.x,e.y,e.z,g.x,g.y,g.z,t.x,t.y,t.z);else if(e instanceof Float32Array)this.__data=e;else if(e instanceof ArrayBuffer){console.warn("Deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 9))");const U=e,d=g;this.__data=new Float32Array(U,d,9)}else this.__data=new Float32Array(9),this.set(e,g,t,I,l,C,n,F,a)}get m00(){return this.__data[0]}set m00(e){this.__data[0]=e}get m01(){return this.__data[1]}set m01(e){this.__data[1]=e}get m02(){return this.__data[2]}set m02(e){this.__data[2]=e}get m10(){return this.__data[3]}set m10(e){this.__data[3]=e}get m11(){return this.__data[4]}set m11(e){this.__data[4]=e}get m12(){return this.__data[5]}set m12(e){this.__data[5]=e}get m20(){return this.__data[6]}set m20(e){this.__data[6]=e}get m21(){return this.__data[7]}set m21(e){this.__data[7]=e}get m22(){return this.__data[8]}set m22(e){this.__data[8]=e}get xAxis(){return new b(new Float32Array(this.__data.buffer,0,3))}set xAxis(e){this.xAxis.set(e.x,e.y,e.z)}get yAxis(){return new b(new Float32Array(this.__data.buffer,3*4,3))}set yAxis(e){this.yAxis.set(e.x,e.y,e.z)}get zAxis(){return new b(new Float32Array(this.__data.buffer,6*4,3))}set zAxis(e){this.zAxis.set(e.x,e.y,e.z)}set(e=1,g=0,t=0,I=0,l=1,C=0,n=0,F=0,a=1){this.__data[0]=e,this.__data[1]=g,this.__data[2]=t,this.__data[3]=I,this.__data[4]=l,this.__data[5]=C,this.__data[6]=n,this.__data[7]=F,this.__data[8]=a}setIdentity(){this.set()}setFromMat(e){this.__data[0]=e.m00,this.__data[1]=e.m01,this.__data[2]=e.m02,this.__data[3]=e.m10,this.__data[4]=e.m11,this.__data[5]=e.m12,this.__data[6]=e.m20,this.__data[7]=e.m21,this.__data[8]=e.m22}setFromDirectionAndUpvector(e,g){const t=e,I=t.length();if(I<Number.EPSILON){this.setIdentity();return}t.scaleInPlace(1/I);const l=g.cross(t),C=l.length();C>Number.EPSILON&&l.scaleInPlace(1/C);const n=t.cross(l),F=n.length();F>Number.EPSILON&&n.scaleInPlace(1/F),this.set(l.x,l.y,l.z,n.x,n.y,n.z,t.x,t.y,t.z)}inverse(){const e=this.__data[0],g=this.__data[1],t=this.__data[2],I=this.__data[3],l=this.__data[4],C=this.__data[5],n=this.__data[6],F=this.__data[7],a=this.__data[8],U=a*l-C*F,d=-a*I+C*n,s=F*I-l*n;let o=e*U+g*d+t*s;return o?(o=1/o,new ng(U*o,(-a*g+t*F)*o,(C*g-t*l)*o,d*o,(a*e-t*n)*o,(-C*e+t*I)*o,s*o,(-F*e+g*n)*o,(l*e-g*I)*o)):(console.warn("Unable to invert Mat3"),new ng)}invertInPlace(){const e=this.__data[0],g=this.__data[1],t=this.__data[2],I=this.__data[3],l=this.__data[4],C=this.__data[5],n=this.__data[6],F=this.__data[7],a=this.__data[8],U=a*l-C*F,d=-a*I+C*n,s=F*I-l*n;let o=e*U+g*d+t*s;return o?(o=1/o,this.set(U*o,(-a*g+t*F)*o,(C*g-t*l)*o,d*o,(a*e-t*n)*o,(-C*e+t*I)*o,s*o,(-F*e+g*n)*o,(l*e-g*I)*o),!0):(console.warn("Unable to invert Mat3"),!1)}transpose(){return new ng(this.__data[0],this.__data[3],this.__data[6],this.__data[1],this.__data[4],this.__data[7],this.__data[2],this.__data[5],this.__data[8])}transposeInPlace(){const e=this.__data[1],g=this.__data[2],t=this.__data[5];this.__data[1]=this.__data[3],this.__data[2]=this.__data[6],this.__data[3]=e,this.__data[5]=this.__data[7],this.__data[6]=g,this.__data[7]=t}transformVec3(e){return new b(this.__data[0]*e.x+this.__data[1]*e.y+this.__data[2]*e.z,this.__data[3]*e.x+this.__data[4]*e.y+this.__data[5]*e.z,this.__data[6]*e.x+this.__data[7]*e.y+this.__data[8]*e.z)}clone(){return new ng(this.__data[0],this.__data[1],this.__data[2],this.__data[3],this.__data[4],this.__data[5],this.__data[6],this.__data[7],this.__data[8])}readBinary(e){this.__data=e.loadFloat32Array(9)}toJSON(){return this.__data}fromJSON(e){this.__data=new Float32Array(e)}toString(){return tg.stringifyJSONWithFixedPrecision(this.toJSON())}asArray(){return this.__data}}class Ee{constructor(e=1,g=0,t=0,I=0,l=0,C=1,n=0,F=0,a=0,U=0,d=1,s=0,o=0,A=0,B=0,Q=1){if(e instanceof Float32Array)this.__data=e;else if(e instanceof ArrayBuffer){const r=e,R=g;this.__data=new Float32Array(r,R,16)}else this.__data=new Float32Array(16),this.set(e,g,t,I,l,C,n,F,a,U,d,s,o,A,B,Q)}get m00(){return this.__data[0]}set m00(e){this.__data[0]=e}get m01(){return this.__data[1]}set m01(e){this.__data[1]=e}get m02(){return this.__data[2]}set m02(e){this.__data[2]=e}get m03(){return this.__data[3]}set m03(e){this.__data[3]=e}get m10(){return this.__data[4]}set m10(e){this.__data[4]=e}get m11(){return this.__data[5]}set m11(e){this.__data[5]=e}get m12(){return this.__data[6]}set m12(e){this.__data[6]=e}get m13(){return this.__data[7]}set m13(e){this.__data[7]=e}get m20(){return this.__data[8]}set m20(e){this.__data[8]=e}get m21(){return this.__data[9]}set m21(e){this.__data[9]=e}get m22(){return this.__data[10]}set m22(e){this.__data[10]=e}get m23(){return this.__data[11]}set m23(e){this.__data[11]=e}get m30(){return this.__data[12]}set m30(e){this.__data[12]=e}get m31(){return this.__data[13]}set m31(e){this.__data[13]=e}get m32(){return this.__data[14]}set m32(e){this.__data[14]=e}get m33(){return this.__data[15]}set m33(e){this.__data[15]=e}get xAxis(){return new b(new Float32Array(this.__data.buffer,0,3))}set xAxis(e){this.xAxis.set(e.x,e.y,e.z)}get yAxis(){return new b(new Float32Array(this.__data.buffer,4*4,3))}set yAxis(e){this.yAxis.set(e.x,e.y,e.z)}get zAxis(){return new b(new Float32Array(this.__data.buffer,8*4,3))}set zAxis(e){this.zAxis.set(e.x,e.y,e.z)}get translation(){return new b(new Float32Array(this.__data.buffer,12*4,3))}set translation(e){this.translation.set(e.x,e.y,e.z)}set(e=1,g=0,t=0,I=0,l=0,C=1,n=0,F=0,a=0,U=0,d=1,s=0,o=0,A=0,B=0,Q=1){this.__data[0]=e,this.__data[1]=g,this.__data[2]=t,this.__data[3]=I,this.__data[4]=l,this.__data[5]=C,this.__data[6]=n,this.__data[7]=F,this.__data[8]=a,this.__data[9]=U,this.__data[10]=d,this.__data[11]=s,this.__data[12]=o,this.__data[13]=A,this.__data[14]=B,this.__data[15]=Q}setIdentity(){this.set()}setDataArray(e){this.__data=e}setFromMat4(e){this.__data[0]=e.m00,this.__data[1]=e.m01,this.__data[2]=e.m02,this.__data[3]=e.m03,this.__data[4]=e.m10,this.__data[5]=e.m11,this.__data[6]=e.m12,this.__data[7]=e.m13,this.__data[8]=e.m20,this.__data[9]=e.m21,this.__data[10]=e.m22,this.__data[11]=e.m23,this.__data[12]=e.m30,this.__data[13]=e.m31,this.__data[14]=e.m32,this.__data[15]=e.m33}toMat3(){return new ng(this.__data[0],this.__data[1],this.__data[2],this.__data[4],this.__data[5],this.__data[6],this.__data[8],this.__data[9],this.__data[10])}transposeInPlace(){const e=this.__data[1],g=this.__data[2],t=this.__data[3],I=this.__data[6],l=this.__data[7],C=this.__data[11];this.__data[1]=this.__data[4],this.__data[2]=this.__data[8],this.__data[3]=this.__data[12],this.__data[4]=e,this.__data[6]=this.__data[9],this.__data[7]=this.__data[13],this.__data[8]=g,this.__data[9]=I,this.__data[11]=this.__data[14],this.__data[12]=t,this.__data[13]=l,this.__data[14]=C}transpose(){return new Ee(this.__data[0],this.__data[4],this.__data[8],this.__data[12],this.__data[1],this.__data[5],this.__data[9],this.__data[13],this.__data[2],this.__data[6],this.__data[10],this.__data[14],this.__data[3],this.__data[7],this.__data[11],this.__data[15])}inverse(){const e=this.__data[0],g=this.__data[1],t=this.__data[2],I=this.__data[3],l=this.__data[4],C=this.__data[5],n=this.__data[6],F=this.__data[7],a=this.__data[8],U=this.__data[9],d=this.__data[10],s=this.__data[11],o=this.__data[12],A=this.__data[13],B=this.__data[14],Q=this.__data[15],r=e*C-g*l,R=e*n-t*l,V=e*F-I*l,h=g*n-t*C,m=g*F-I*C,Z=t*F-I*n,c=a*A-U*o,W=a*B-d*o,u=a*Q-s*o,J=U*B-d*A,N=U*Q-s*A,X=d*Q-s*B;let y=r*X-R*N+V*J+h*u-m*W+Z*c;return y?(y=1/y,new Ee((C*X-n*N+F*J)*y,(t*N-g*X-I*J)*y,(A*Z-B*m+Q*h)*y,(d*m-U*Z-s*h)*y,(n*u-l*X-F*W)*y,(e*X-t*u+I*W)*y,(B*V-o*Z-Q*R)*y,(a*Z-d*V+s*R)*y,(l*N-C*u+F*c)*y,(g*u-e*N-I*c)*y,(o*m-A*V+Q*r)*y,(U*V-a*m-s*r)*y,(C*W-l*J-n*c)*y,(e*J-g*W+t*c)*y,(A*R-o*h-B*r)*y,(a*h-U*R+d*r)*y)):(console.warn("Unable to invert Mat4"),this)}invertInPlace(){const e=this.__data[0],g=this.__data[1],t=this.__data[2],I=this.__data[3],l=this.__data[4],C=this.__data[5],n=this.__data[6],F=this.__data[7],a=this.__data[8],U=this.__data[9],d=this.__data[10],s=this.__data[11],o=this.__data[12],A=this.__data[13],B=this.__data[14],Q=this.__data[15],r=e*C-g*l,R=e*n-t*l,V=e*F-I*l,h=g*n-t*C,m=g*F-I*C,Z=t*F-I*n,c=a*A-U*o,W=a*B-d*o,u=a*Q-s*o,J=U*B-d*A,N=U*Q-s*A,X=d*Q-s*B;let y=r*X-R*N+V*J+h*u-m*W+Z*c;return y?(y=1/y,this.set((C*X-n*N+F*J)*y,(t*N-g*X-I*J)*y,(A*Z-B*m+Q*h)*y,(d*m-U*Z-s*h)*y,(n*u-l*X-F*W)*y,(e*X-t*u+I*W)*y,(B*V-o*Z-Q*R)*y,(a*Z-d*V+s*R)*y,(l*N-C*u+F*c)*y,(g*u-e*N-I*c)*y,(o*m-A*V+Q*r)*y,(U*V-a*m-s*r)*y,(C*W-l*J-n*c)*y,(e*J-g*W+t*c)*y,(A*R-o*h-B*r)*y,(a*h-U*R+d*r)*y),!0):(console.warn("Unable to invert Mat4"),!1)}setInverse(e){const g=e.__data[0],t=e.__data[1],I=e.__data[2],l=e.__data[3],C=e.__data[4],n=e.__data[5],F=e.__data[6],a=e.__data[7],U=e.__data[8],d=e.__data[9],s=e.__data[10],o=e.__data[11],A=e.__data[12],B=e.__data[13],Q=e.__data[14],r=e.__data[15],R=g*n-t*C,V=g*F-I*C,h=g*a-l*C,m=t*F-I*n,Z=t*a-l*n,c=I*a-l*F,W=U*B-d*A,u=U*Q-s*A,J=U*r-o*A,N=d*Q-s*B,X=d*r-o*B,y=s*r-o*Q;let p=R*y-V*X+h*N+m*J-Z*u+c*W;if(!p)throw new Error("Unable to invert Mat4");p=1/p,this.set((n*y-F*X+a*N)*p,(I*X-t*y-l*N)*p,(B*c-Q*Z+r*m)*p,(s*Z-d*c-o*m)*p,(F*J-C*y-a*u)*p,(g*y-I*J+l*u)*p,(Q*h-A*c-r*V)*p,(U*c-s*h+o*V)*p,(C*X-n*J+a*W)*p,(t*J-g*X-l*W)*p,(A*Z-B*h+r*R)*p,(d*h-U*Z-o*R)*p,(n*u-C*N-F*W)*p,(g*N-t*u+I*W)*p,(B*V-A*m-Q*R)*p,(U*m-d*V+s*R)*p)}multiply(e){const g=this.__data[0],t=this.__data[1],I=this.__data[2],l=this.__data[3],C=this.__data[4],n=this.__data[5],F=this.__data[6],a=this.__data[7],U=this.__data[8],d=this.__data[9],s=this.__data[10],o=this.__data[11],A=this.__data[12],B=this.__data[13],Q=this.__data[14],r=this.__data[15],R=e.asArray();let V=R[0],h=R[1],m=R[2],Z=R[3];const c=new Ee;return c.m00=V*g+h*C+m*U+Z*A,c.m01=V*t+h*n+m*d+Z*B,c.m02=V*I+h*F+m*s+Z*Q,c.m03=V*l+h*a+m*o+Z*r,V=R[4],h=R[5],m=R[6],Z=R[7],c.m10=V*g+h*C+m*U+Z*A,c.m11=V*t+h*n+m*d+Z*B,c.m12=V*I+h*F+m*s+Z*Q,c.m13=V*l+h*a+m*o+Z*r,V=R[8],h=R[9],m=R[10],Z=R[11],c.m20=V*g+h*C+m*U+Z*A,c.m21=V*t+h*n+m*d+Z*B,c.m22=V*I+h*F+m*s+Z*Q,c.m23=V*l+h*a+m*o+Z*r,V=R[12],h=R[13],m=R[14],Z=R[15],c.m30=V*g+h*C+m*U+Z*A,c.m31=V*t+h*n+m*d+Z*B,c.m32=V*I+h*F+m*s+Z*Q,c.m33=V*l+h*a+m*o+Z*r,c}multiplyInPlace(e){const g=this.asArray(),t=g[0],I=g[1],l=g[2],C=g[3],n=g[4],F=g[5],a=g[6],U=g[7],d=g[8],s=g[9],o=g[10],A=g[11],B=g[12],Q=g[13],r=g[14],R=g[15],V=e.asArray();let h=V[0],m=V[1],Z=V[2],c=V[3];return this.m00=h*t+m*n+Z*d+c*B,this.m01=h*I+m*F+Z*s+c*Q,this.m02=h*l+m*a+Z*o+c*r,this.m03=h*C+m*U+Z*A+c*R,h=V[4],m=V[5],Z=V[6],c=V[7],this.m10=h*t+m*n+Z*d+c*B,this.m11=h*I+m*F+Z*s+c*Q,this.m12=h*l+m*a+Z*o+c*r,this.m13=h*C+m*U+Z*A+c*R,h=V[8],m=V[9],Z=V[10],c=V[11],this.m20=h*t+m*n+Z*d+c*B,this.m21=h*I+m*F+Z*s+c*Q,this.m22=h*l+m*a+Z*o+c*r,this.m23=h*C+m*U+Z*A+c*R,h=V[12],m=V[13],Z=V[14],c=V[15],this.m30=h*t+m*n+Z*d+c*B,this.m31=h*I+m*F+Z*s+c*Q,this.m32=h*l+m*a+Z*o+c*r,this.m33=h*C+m*U+Z*A+c*R,this}postMultiplyInPlace(e){const g=e.asArray(),t=g[0],I=g[1],l=g[2],C=g[3],n=g[4],F=g[5],a=g[6],U=g[7],d=g[8],s=g[9],o=g[10],A=g[11],B=g[12],Q=g[13],r=g[14],R=g[15],V=this.asArray();let h=V[0],m=V[1],Z=V[2],c=V[3];return this.m00=h*t+m*n+Z*d+c*B,this.m01=h*I+m*F+Z*s+c*Q,this.m02=h*l+m*a+Z*o+c*r,this.m03=h*C+m*U+Z*A+c*R,h=V[4],m=V[5],Z=V[6],c=V[7],this.m10=h*t+m*n+Z*d+c*B,this.m11=h*I+m*F+Z*s+c*Q,this.m12=h*l+m*a+Z*o+c*r,this.m13=h*C+m*U+Z*A+c*R,h=V[8],m=V[9],Z=V[10],c=V[11],this.m20=h*t+m*n+Z*d+c*B,this.m21=h*I+m*F+Z*s+c*Q,this.m22=h*l+m*a+Z*o+c*r,this.m23=h*C+m*U+Z*A+c*R,h=V[12],m=V[13],Z=V[14],c=V[15],this.m30=h*t+m*n+Z*d+c*B,this.m31=h*I+m*F+Z*s+c*Q,this.m32=h*l+m*a+Z*o+c*r,this.m33=h*C+m*U+Z*A+c*R,this}translateInPlace(e){const g=this.__data,t=e.x,I=e.y,l=e.z;return g[12]=g[0]*t+g[4]*I+g[8]*l+g[12],g[13]=g[1]*t+g[5]*I+g[9]*l+g[13],g[14]=g[2]*t+g[6]*I+g[10]*l+g[14],g[15]=g[3]*t+g[7]*I+g[11]*l+g[15],this}setLookAt(e,g,t){const I=e.subtract(g),l=I.length();if(l<Number.EPSILON){this.setIdentity();return}I.scaleInPlace(1/l);const C=t.cross(I),n=C.length();n>Number.EPSILON&&C.scaleInPlace(1/n);const F=I.cross(C),a=F.length();a>Number.EPSILON&&F.scaleInPlace(1/a),this.set(C.x,C.y,C.z,0,F.x,F.y,F.z,0,I.x,I.y,I.z,0,e.x,e.y,e.z,1)}setRotation(e,g){const t=e.length();if(Math.abs(t)<Number.EPSILON)return null;const I=e.x/t,l=e.y/t,C=e.z/t,n=Math.sin(g),F=Math.cos(g),a=1-F,U=this.__data;return U[0]=I*I*a+F,U[1]=l*I*a+C*n,U[2]=C*I*a-l*n,U[3]=0,U[4]=I*l*a-C*n,U[5]=l*l*a+F,U[6]=C*l*a+I*n,U[7]=0,U[8]=I*C*a+l*n,U[9]=l*C*a-I*n,U[10]=C*C*a+F,U[11]=0,U[12]=0,U[13]=0,U[14]=0,U[15]=1,this}setXRotation(e){const g=Math.sin(e),t=Math.cos(e),I=this.__data;return I[0]=1,I[1]=0,I[2]=0,I[3]=0,I[4]=0,I[5]=t,I[6]=g,I[7]=0,I[8]=0,I[9]=-g,I[10]=t,I[11]=0,I[12]=0,I[13]=0,I[14]=0,I[15]=1,this}setYRotation(e){const g=Math.sin(e),t=Math.cos(e),I=this.__data;return I[0]=t,I[1]=0,I[2]=-g,I[3]=0,I[4]=0,I[5]=1,I[6]=0,I[7]=0,I[8]=g,I[9]=0,I[10]=t,I[11]=0,I[12]=0,I[13]=0,I[14]=0,I[15]=1,this}setZRotation(e){const g=Math.sin(e),t=Math.cos(e),I=this.__data;return I[0]=t,I[1]=g,I[2]=0,I[3]=0,I[4]=-g,I[5]=t,I[6]=0,I[7]=0,I[8]=0,I[9]=0,I[10]=1,I[11]=0,I[12]=0,I[13]=0,I[14]=0,I[15]=1,this}transformVec4(e){const g=this.__data,t=e.x,I=e.y,l=e.z,C=e.t;return new Be(g[0]*t+g[4]*I+g[8]*l+g[12]*C,g[1]*t+g[5]*I+g[9]*l+g[13]*C,g[2]*t+g[6]*I+g[10]*l+g[14]*C,g[3]*t+g[7]*I+g[11]*l+g[15]*C)}transformVec3(e){const g=this.__data,t=e.x,I=e.y,l=e.z;return new b(g[0]*t+g[4]*I+g[8]*l+g[12],g[1]*t+g[5]*I+g[9]*l+g[13],g[2]*t+g[6]*I+g[10]*l+g[14])}rotateVec3(e){const g=this.__data,t=e.x,I=e.y,l=e.z;return new b(g[0]*t+g[4]*I+g[8]*l,g[1]*t+g[5]*I+g[9]*l,g[2]*t+g[6]*I+g[10]*l)}setPerspectiveMatrix(e,g,t,I){const l=Math.tan(Math.PI*.5-.5*e),C=1/(t-I);this.set(l/g,0,0,0,0,l,0,0,0,0,(t+I)*C,-1,0,0,t*I*C*2,0)}setOrthographicMatrix(e,g,t,I,l,C){const n=1/(e-g),F=1/(t-I),a=1/(l-C);this.set(-2*n,0,0,0,0,-2*F,0,0,0,0,2*a,0,(e+g)*n,(I+t)*F,(C+l)*a,1)}setScale(e,g,t){e instanceof b?this.set(e.x,0,0,0,0,e.y,0,0,0,0,e.z,0,0,0,0,1):this.set(e,0,0,0,0,g,0,0,0,0,t,0,0,0,0,1)}setFromMat3x4Array(e){this.set(e[0],e[1],e[2],0,e[3],e[4],e[5],0,e[6],e[7],e[8],0,e[9],e[10],e[11],1)}clone(){return new Ee(this.__data[0],this.__data[1],this.__data[2],this.__data[3],this.__data[4],this.__data[5],this.__data[6],this.__data[7],this.__data[8],this.__data[9],this.__data[10],this.__data[11],this.__data[12],this.__data[13],this.__data[14],this.__data[15])}toString(){return tg.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return this.__data}fromJSON(e){this.__data=new Float32Array(e)}readBinary(e){this.__data=e.loadFloat32Array(16)}asArray(){return this.__data}}class de{constructor(e=0,g=0,t=0,I=1){if(e instanceof Float32Array)this.__data=e;else if(e instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const l=e,C=g;this.__data=new Float32Array(l,C,4)}else this.__data=new Float32Array(4),typeof e=="object"?(this.__data[0]=0,this.__data[1]=0,this.__data[2]=0,this.__data[3]=1,this.fromJSON(e)):(this.__data[0]=e,this.__data[1]=g,this.__data[2]=t,this.__data[3]=I)}get x(){return this.__data[0]}set x(e){this.__data[0]=e}get y(){return this.__data[1]}set y(e){this.__data[1]=e}get z(){return this.__data[2]}set z(e){this.__data[2]=e}get w(){return this.__data[3]}set w(e){this.__data[3]=e}set(e,g,t,I){this.__data[0]=e,this.__data[1]=g,this.__data[2]=t,this.__data[3]=I}setDataArray(e){this.__data=e}setFromOther(e){this.__data[0]=e.x,this.__data[1]=e.y,this.__data[2]=e.z,this.__data[3]=e.w}setFromEulerAngles(e){const g=new b;switch(e.order){case 0:g.set(e.x,-e.y,e.z);break;case 1:g.set(e.y,-e.z,e.x);break;case 2:g.set(e.z,-e.x,e.y);break;case 3:g.set(e.x,e.z,e.y);break;case 4:g.set(e.z,e.y,e.x);break;case 5:g.set(e.y,e.x,e.z);break;default:throw new Error(`Invalid EulerAngles order: ${e.order}`)}const t=g.x*.5,I=g.y*.5,l=g.z*.5,C=Math.cos(t),n=Math.cos(I),F=Math.cos(l),a=Math.sin(t),U=Math.sin(I),d=Math.sin(l),s=C*F,o=C*d,A=a*F,B=a*d,Q=n*A-U*o,r=n*B+U*s,R=n*o-U*A;switch(this.w=n*s+U*B,e.order){case 0:this.x=Q,this.y=-r,this.z=R;break;case 1:this.x=R,this.y=Q,this.z=-r;break;case 2:this.x=-r,this.y=R,this.z=Q;break;case 3:this.x=Q,this.y=R,this.z=r;break;case 4:this.x=R,this.y=r,this.z=Q;break;case 5:this.x=r,this.y=Q,this.z=R;break;default:throw new Error(`Invalid EulerAngles order: ${e.order}`)}}toEulerAngles(e){const g=new b;switch(e){case 0:g.set(this.z,this.x,this.y);break;case 1:g.set(this.x,this.y,this.z);break;case 2:g.set(this.y,this.z,this.x);break;case 3:g.set(this.y,-this.x,this.z);break;case 4:g.set(this.x,-this.z,this.y);break;case 5:g.set(this.z,-this.y,this.x);break;default:throw new Error("Invalid rotation order:"+e)}const t=new b,I=g.x*g.y+g.z*this.w;if(I>.49999)t.y=2*Math.atan2(g.x,this.w),t.z=Math.PI*.5,t.x=0;else if(I<-.49999)t.y=-2*Math.atan2(g.x,this.w),t.z=Math.PI*-.5,t.x=0;else{const l=g.x*g.x,C=g.y*g.y,n=g.z*g.z;t.y=Math.atan2(2*g.y*this.w-2*g.x*g.z,1-2*C-2*n),t.z=Math.asin(2*I),t.x=Math.atan2(2*g.x*this.w-2*g.y*g.z,1-2*l-2*n)}switch(e){case 0:return new lt(t.y,t.z,t.x,e);case 1:return new lt(t.x,t.y,t.z,e);case 2:return new lt(t.z,t.x,t.y,e);case 3:return new lt(-t.y,t.x,t.z,e);case 4:return new lt(t.x,t.z,-t.y,e);case 5:return new lt(t.z,-t.y,t.x,e)}}setFromAxisAndAngle(e,g){const t=g/2,I=e.normalize().scale(Math.sin(t));this.set(I.x,I.y,I.z,Math.cos(t))}setFromDirectionAndUpvector(e,g){const t=new ng;t.setFromDirectionAndUpvector(e,g),this.setFromMat3(t)}setFrom2Vectors(e,g){const t=e.cross(g),I=e.dot(g),l=Math.sqrt((1+I)*2);this.set(t.x/l,t.y/l,t.z/l,l/2),this.normalizeInPlace()}setFromMat3(e){const g=e.asArray(),t=g[0]+g[4]+g[8];let I;if(t>0)I=Math.sqrt(t+1),this.__data[3]=.5*I,I=.5/I,this.__data[0]=(g[5]-g[7])*I,this.__data[1]=(g[6]-g[2])*I,this.__data[2]=(g[1]-g[3])*I;else{let l=0;g[4]>g[0]&&(l=1),g[8]>g[l*3+l]&&(l=2);const C=(l+1)%3,n=(l+2)%3;I=Math.sqrt(g[l*3+l]-g[C*3+C]-g[n*3+n]+1),this.__data[l]=.5*I,I=.5/I,this.__data[3]=(g[C*3+n]-g[n*3+C])*I,this.__data[C]=(g[C*3+l]+g[l*3+C])*I,this.__data[n]=(g[n*3+l]+g[l*3+n])*I}this.normalizeInPlace()}setFromMat4(e){const g=e.asArray(),t=g[0]+g[5]+g[10];let I;if(t>0)I=Math.sqrt(t+1),this.__data[3]=.5*I,I=.5/I,this.__data[0]=(g[6]-g[9])*I,this.__data[1]=(g[8]-g[2])*I,this.__data[2]=(g[1]-g[4])*I;else{let l=0;g[5]>g[0]&&(l=1),g[10]>g[l*4+l]&&(l=2);const C=(l+1)%3,n=(l+2)%3;I=Math.sqrt(g[l*4+l]-g[C*4+C]-g[n*4+n]+1),this.__data[l]=.5*I,I=.5/I,this.__data[3]=(g[C*4+n]-g[n*4+C])*I,this.__data[C]=(g[C*4+l]+g[l*4+C])*I,this.__data[n]=(g[n*4+l]+g[l*4+n])*I}this.normalizeInPlace()}isIdentity(){return this.getAngle()<Number.EPSILON}getAngle(){return Math.acos(this.w)*2}isEqual(e){return this.x==e.x&&this.y==e.y&&this.z==e.z&&this.w==e.w}notEquals(e){return this.x!=e.x&&this.y!=e.y&&this.z!=e.z&&this.w!=e.w}approxEqual(e,g=Number.EPSILON){return Math.abs(this.x-e.x)<g&&Math.abs(this.y-e.y)<g&&Math.abs(this.z-e.z)<g&&Math.abs(this.w-e.w)<g}add(e){return new de(this.x+e.x,this.y+e.y,this.z+e.z,this.w+e.w)}addInPlace(e){this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w}subtract(e){return new de(this.x-e.x,this.y-e.y,this.z-e.z,this.w-e.w)}scale(e){return new de(this.x*e,this.y*e,this.z*e,this.w*e)}scaleInPlace(e){this.x*=e,this.y*=e,this.z*=e,this.w*=e}length(){const e=this.__data[0],g=this.__data[1],t=this.__data[2],I=this.__data[3];return Math.sqrt(e*e+g*g+t*t+I*I)}lengthSquared(){const e=this.__data[0],g=this.__data[1],t=this.__data[2],I=this.__data[3];return e*e+g*g+t*t+I*I}normalize(){const e=this.__data[0],g=this.__data[1],t=this.__data[2],I=this.__data[3];let l=e*e+g*g+t*t+I*I;return l<Number.EPSILON?new de:(l=1/Math.sqrt(l),new de(e*l,g*l,t*l,I*l))}normalizeInPlace(){const e=this.__data[0],g=this.__data[1],t=this.__data[2],I=this.__data[3];let l=e*e+g*g+t*t+I*I;l<Number.EPSILON||(l=1/Math.sqrt(l),this.set(e*l,g*l,t*l,I*l))}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}cross(e){const g=this.x,t=this.y,I=this.z,l=this.w,C=e.x,n=e.y,F=e.z,a=e.w;return new de(t*F-I*n,I*a-l*F,l*C-g*a,g*n-t*C)}conjugate(){return new de(-this.x,-this.y,-this.z,this.w)}inverse(){return this.conjugate()}alignWith(e){this.dot(e)<0&&this.set(-this.x,-this.y,-this.z,-this.w)}multiply(e){const g=this.__data[0],t=this.__data[1],I=this.__data[2],l=this.__data[3],C=e.__data[0],n=e.__data[1],F=e.__data[2],a=e.__data[3];return new de(g*a+l*C+t*F-I*n,t*a+l*n+I*C-g*F,I*a+l*F+g*n-t*C,l*a-g*C-t*n-I*F)}multiplyInPlace(e){const g=this.__data[0],t=this.__data[1],I=this.__data[2],l=this.__data[3],C=e.__data[0],n=e.__data[1],F=e.__data[2],a=e.__data[3];this.set(g*a+l*C+t*F-I*n,t*a+l*n+I*C-g*F,I*a+l*F+g*n-t*C,l*a-g*C-t*n-I*F)}rotateVec3(e){const g=new de(e.x,e.y,e.z,0),t=this.multiply(g).multiply(this.conjugate());return new b(t.x,t.y,t.z)}rotateX(e){e*=.5;const g=this.x,t=this.y,I=this.z,l=this.w,C=Math.sin(e),n=Math.cos(e);this.x=g*n+l*C,this.y=t*n+I*C,this.z=I*n-t*C,this.w=l*n-g*C}rotateY(e){e*=.5;const g=this.x,t=this.y,I=this.z,l=this.w,C=Math.sin(e),n=Math.cos(e);this.x=g*n-I*C,this.y=t*n+l*C,this.z=I*n+g*C,this.w=l*n-t*C}rotateZ(e){e*=.5;const g=this.x,t=this.y,I=this.z,l=this.w,C=Math.sin(e),n=Math.cos(e);this.x=g*n+t*C,this.y=t*n-g*C,this.z=I*n+l*C,this.w=l*n-I*C}toMat3(){const e=this.x,g=this.y,t=this.z,I=this.w,l=e+e,C=g+g,n=t+t,F=e*l,a=g*l,U=g*C,d=t*l,s=t*C,o=t*n,A=I*l,B=I*C,Q=I*n,r=new ng;return r.m00=1-U-o,r.m10=a-Q,r.m20=d+B,r.m01=a+Q,r.m11=1-F-o,r.m21=s-A,r.m02=d-B,r.m12=s+A,r.m22=1-F-U,r}getXaxis(){const e=this.x*this.y,g=this.x*this.z,t=this.y*this.y,I=this.y*this.w,l=this.z*this.z,C=this.z*this.w;return new b(1-2*(l+t),2*(e+C),2*(g-I))}getYaxis(){const e=this.x*this.x,g=this.x*this.y,t=this.x*this.w,I=this.y*this.z,l=this.z*this.z,C=this.z*this.w;return new b(2*(g-C),1-2*(l+e),2*(I+t))}getZaxis(){const e=this.x*this.x,g=this.x*this.z,t=this.x*this.w,I=this.y*this.y,l=this.y*this.z,C=this.y*this.w;return new b(2*(C+g),2*(l-t),1-2*(I+e))}mirror(e){switch(e){case 0:return new de(this.z,this.w,this.x,this.y);case 1:return new de(-this.w,this.z,this.y,-this.x);case 2:return new de(this.x,this.y,this.z,-this.w);case 0:default:return new de(this.z,this.w,this.x,this.y)}}toMat4(){const e=this.x,g=this.y,t=this.z,I=this.w,l=e+e,C=g+g,n=t+t,F=e*l,a=g*l,U=g*C,d=t*l,s=t*C,o=t*n,A=I*l,B=I*C,Q=I*n,r=new Ee;return r.m00=1-U-o,r.m10=a-Q,r.m20=d+B,r.m01=a+Q,r.m11=1-F-o,r.m21=s-A,r.m02=d-B,r.m12=s+A,r.m22=1-F-U,r}lerp(e,g){const t=new de(this.x+g*(e.x-this.x),this.y+g*(e.y-this.y),this.z+g*(e.z-this.z),this.w+g*(e.w-this.w));return t.normalizeInPlace(),t}slerp(e,g){const t=this.dot(e);if(t>.999)return this;const I=Math.acos(t),l=Math.sin(I),C=Math.sin(g*I),F=Math.sin((1-g)*I)/l,a=C/l,U=new de(F*this.x+a*e.x,F*this.y+a*e.y,F*this.z+a*e.z,F*this.w+a*e.w);return U.normalizeInPlace(),U}clone(){return new de(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}toString(){return tg.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z,w:this.w}}fromJSON(e){this.__data[0]=e.x,this.__data[1]=e.y,this.__data[2]=e.z,this.__data[3]=e.w,this.normalizeInPlace()}readBinary(e){this.x=e.loadFloat32(),this.y=e.loadFloat32(),this.z=e.loadFloat32(),this.w=e.loadFloat32()}}class q{static radToDeg(e){return e/(Math.PI/180)}static degToRad(e){return e*(Math.PI/180)}static isNumeric(e){return!isNaN(parseFloat(e))&&isFinite(e)}static randomInt(e,g){return e=Math.ceil(e),g=Math.floor(g),Math.floor(Math.random()*(g-e))+e}static lerp(e,g,t){return e+t*(g-e)}static clamp(e,g,t){return Math.min(Math.max(e,g),t)}static nearestPow2(e){return Math.pow(2,Math.round(Math.log(e)/Math.log(2)))}static nearestPow10(e){return Math.pow(10,Math.round(Math.log10(e)/Math.log10(10)))}static nextPow2(e){if(this.fract(Math.log2(e))==0)return e;let g=0;for(;e>0;)g++,e=e>>1;return 1<<g}static fract(e){return e==0?0:e<0?e>-1?-e:-e%Math.floor(-e):e<1?e:e%Math.floor(e)}static remap(e,g,t,I,l){return I+(l-I)*((e-g)/(t-g))}static smoothStep(e,g,t){const I=this.clamp((t-e)/(g-e),0,1);return I*I*(3-2*I)}static linStep(e,g,t){return this.clamp((t-e)/(g-e),0,1)}static decode16BitFloatFrom2xUInt8(e){const g=e[0],t=e[1],I=g&128?1:-1,l=(g&120)>>3,C=g&7;let n=l==0?0:2048;const F=n+(C<<8)+t;n=l==0?1:0;const a=Math.pow(2,l+n-16);return I*F*a}static encode16BitFloatInto2xUInt8(e){const g=new Uint8Array(2),t=e>=0?128:0;e=Math.abs(e);let I=15,l=1024;for(let U=15;U>0;U--)e<l&&(l/=2,I--);let C;I==0?C=e/l/2:C=(e-l)/l;const n=Math.round(C*2048),F=n/256,a=n-F*256;return g[0]=t+I*8+F,g[1]=a,e>=2048&&(g[0]=255),g}static encode16BitFloat(e){const g=new Float32Array(1);g[0]=e;const t=new Int32Array(g.buffer);return(l=>{let C=l>>16&32768,n=l>>12&2047;const F=l>>23&255;return F<103?C:F>142?(C|=31744,C|=(F==255?0:1)&&l&8388607,C):F<113?(n|=2048,C|=(n>>114-F)+(n>>113-F&1),C):(C|=F-112<<10|n>>1,C+=n&1,C)})(t[0])}static decode16BitFloat(e){const g=(e&32768)>>15,t=(e&31744)>>10,I=e&1023;return t==0?(g?-1:1)*Math.pow(2,-14)*(I/Math.pow(2,10)):t==31?I?NaN:(g?-1:1)*(1/0):(g?-1:1)*Math.pow(2,t-15)*(1+I/Math.pow(2,10))}static convertFloat32ArrayToUInt16Array(e){const g=new Uint16Array(e.length),t=new Int32Array(e.buffer),I=l=>{let C=l>>16&32768,n=l>>12&2047;const F=l>>23&255;return F<103?C:F>142?(C|=31744,C|=(F==255?0:1)&&l&8388607,C):F<113?(n|=2048,C|=(n>>114-F)+(n>>113-F&1),C):(C|=F-112<<10|n>>1,C+=n&1,C)};for(let l=0;l<e.length;l++)g[l]=I(t[l]);return g}}class Ag{constructor(e,g){e instanceof b?this.start=e:this.start=new b,g instanceof b?this.dir=g:this.dir=new b}closestPoint(e){const t=e.subtract(this.start).dot(this.dir);if(t<Number.EPSILON)return 0;const I=this.dir.dot(this.dir);return I<Number.EPSILON?0:t/I}closestPointOnLineSegment(e,g){const t=this.dir,I=g.subtract(e),l=I.length();I.normalizeInPlace();const C=this.start.subtract(e),n=t.dot(t),F=t.dot(I),a=I.dot(I),U=t.dot(C),d=I.dot(C);if(n==0&&a==0)return[this.start.distanceTo(e),0];if(n==0)return[0,0];if(a==0)return[this.closestPoint(e),0];const s=n*a-F*F;let o,A;return s<.001?(o=0,F>a?A=U/F:A=d/a):(o=(F*d-a*U)/s,A=(n*d-F*U)/s),[o,q.clamp(A/l,0,1)]}pointAtDist(e){return this.start.add(this.dir.scale(e))}intersectRayVector(e){const g=this.dir,t=e.dir,I=this.start.subtract(e.start),l=g.dot(g),C=g.dot(t),n=t.dot(t),F=g.dot(I),a=t.dot(I);if(l==0&&n==0)return this.start.distanceTo(e.start);if(l==0)return e.closestPoint(this.start);if(n==0)return this.closestPoint(e.start);const U=l*n-C*C;let d,s;return U<.001?(d=0,C>n?s=F/C:s=a/n):(d=(C*a-n*F)/U,s=(l*a-C*F)/U),[d,s]}intersectRayPlane(e){const g=this.start.subtract(e.start),t=e.dir.dot(this.dir),I=-e.dir.dot(g);if(Math.abs(t)<Number.PRECISION)return I==0,-1;const l=I/t;return l<-Number.PRECISION?-1:l}intersectRayBox3(e,g=0){const t=new b(1/this.dir.x,1/this.dir.y,1/this.dir.z),I=[];I[0]=t.x<0?1:0,I[1]=t.y<0?1:0,I[2]=t.z<0?1:0;const l=[];if(g>0){const s=e.diagonal();s.normalizeInPlace(),s.scaleInPlace(g),l[0]=e.p0.subtract(s),l[1]=e.p1.add(s)}else l[0]=e.p0,l[1]=e.p1;let C=(l[I[0]].x-this.start.x)*t.x,n=(l[1-I[0]].x-this.start.x)*t.x;const F=(l[I[1]].y-this.start.y)*t.y,a=(l[1-I[1]].y-this.start.y)*t.y;if(C>a||F>n)return!1;F>C&&(C=F),a<n&&(n=a);const U=(l[I[2]].z-this.start.z)*t.z,d=(l[1-I[2]].z-this.start.z)*t.z;return C>d||U>n?!1:(U>C&&(C=U),d<n&&(n=d),!0)}clone(){return new Ag(this.start.clone(),this.dir.clone())}toJSON(){return{start:this.start.toJSON(),dir:this.dir.toJSON()}}fromJSON(e){this.start.fromJSON(e.start),this.dir.fromJSON(e.dir)}toString(){return tg.stringifyJSONWithFixedPrecision(this.toJSON())}}class v{constructor(e,g,t){if(e instanceof Float32Array){this.setFromFloat32Array(e);return}if(e instanceof b)this.tr=e;else if(e instanceof de&&g==null&&t==null){this.tr=new b,this.ori=e,this.sc=new b(1,1,1);return}else this.tr=new b;g instanceof de?this.ori=g:this.ori=new de,t instanceof b?this.sc=t:this.sc=new b(1,1,1)}set(e,g,t){this.tr=e,this.ori=g,t instanceof b&&(this.sc=t)}setFromOther(e){this.tr=e.tr,this.ori=e.ori,this.sc=e.sc}isIdentity(){return this.tr.isNull()&&this.ori.isIdentity()&&this.sc.is111()}isEqual(e){return this.tr.isEqual(e.tr)&&this.ori.isEqual(e.ori)&&this.sc.isEqual(e.sc)}approxEqual(e,g=Number.EPSILON){return(e.tr?this.tr.approxEqual(e.tr,g):!0)&&(e.ori?this.ori.approxEqual(e.ori,g):!0)&&(e.sc?this.sc.approxEqual(e.sc,g):!0)}setLookAt(e,g,t){const I=e.subtract(g);if(I.length()<Number.EPSILON)throw new Error("Invalid dir");this.ori.setFromDirectionAndUpvector(I,t),this.tr=e}multiply(e){let g=this.sc;if(Math.abs(this.sc.y-this.sc.x)>.001||Math.abs(this.sc.z-this.sc.x)>.001||Math.abs(this.sc.z-this.sc.y)>.001){const I=this.ori.toMat4(),C=new Ee(this.sc.x,0,0,0,0,this.sc.y,0,0,0,0,this.sc.z,0,0,0,0,1).multiply(I);g=new b(C.xAxis.length(),C.yAxis.length(),C.zAxis.length())}return new v(this.tr.add(this.ori.rotateVec3(this.sc.multiply(e.tr))),this.ori.multiply(e.ori),g.multiply(e.sc))}inverse(){const e=new v;if(e.ori=this.ori.inverse(),Math.abs(this.sc.y-this.sc.x)>.001||Math.abs(this.sc.z-this.sc.x)>.001||Math.abs(this.sc.z-this.sc.y)>.001){const g=e.ori.toMat4(),I=new Ee(this.sc.x,0,0,0,0,this.sc.y,0,0,0,0,this.sc.z,0,0,0,0,1).multiply(g);e.sc=new b(1/I.xAxis.length(),1/I.yAxis.length(),1/I.zAxis.length())}else e.sc=this.sc.inverse();return e.tr=e.ori.rotateVec3(this.tr.negate().multiply(e.sc)),e}transformVec3(e){return this.tr.add(this.ori.rotateVec3(this.sc.multiply(e)))}toMat4(){const e=new Ee(this.sc.x,0,0,0,0,this.sc.y,0,0,0,0,this.sc.z,0,0,0,0,1),g=this.ori.toMat4(),t=new Ee;return t.translation=this.tr,t.multiply(g).multiply(e)}setFromMat4(e){this.tr=e.translation,this.ori.setFromMat4(e)}setFromFloat32Array(e){if(e.length==7){this.tr=new b(new Float32Array(e.buffer,e.byteOffset,3)),this.ori=new de(new Float32Array(e.buffer,e.byteOffset+12,4)),this.sc=new b(1,1,1);return}else if(e.length==8){this.tr=new b(new Float32Array(e.buffer,e.byteOffset,3)),this.ori=new de(new Float32Array(e.buffer,e.byteOffset+12,4));const g=e[7];this.sc=new b(g,g,g);return}else if(e.length==10){this.tr=new b(new Float32Array(e.buffer,e.byteOffset,3)),this.ori=new de(new Float32Array(e.buffer,e.byteOffset+12,4)),this.sc=new b(new Float32Array(e.buffer,e.byteOffset+21,3));return}else console.warn("unitialized: float32array.length == ",e.length)}clone(){return new v(this.tr.clone(),this.ori.clone(),this.sc.clone())}toJSON(){return{tr:this.tr.toJSON(),ori:this.ori.toJSON(),sc:this.sc.toJSON()}}fromJSON(e){this.tr.fromJSON(e.tr),this.ori.fromJSON(e.ori),e.sc&&this.sc.fromJSON(e.sc)}readBinary(e){this.tr.readBinary(e),this.ori.readBinary(e),this.sc.readBinary(e)}toString(){return tg.stringifyJSONWithFixedPrecision(this.toJSON())}}class Yt{constructor(e,g){e instanceof f?this.p0=e:this.p0=new f(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),g instanceof f?this.p1=g:this.p1=new f(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY)}set(e,g){this.p0=e,this.p1=g}reset(){this.p0.x=Number.POSITIVE_INFINITY,this.p1.x=Number.NEGATIVE_INFINITY,this.p0.y=Number.POSITIVE_INFINITY,this.p1.y=Number.NEGATIVE_INFINITY}isValid(){return this.p0.x!=Number.POSITIVE_INFINITY&&this.p1.x!=Number.NEGATIVE_INFINITY&&this.p0.y!=Number.POSITIVE_INFINITY&&this.p1.y!=Number.NEGATIVE_INFINITY}addPoint(e){(this.p0.x==Number.POSITIVE_INFINITY||e.x<this.p0.x)&&(this.p0.x=e.x),(this.p0.y==Number.POSITIVE_INFINITY||e.y<this.p0.y)&&(this.p0.y=e.y),(this.p1.y==Number.NEGATIVE_INFINITY||e.x>this.p1.x)&&(this.p1.x=e.x),(this.p1.y==Number.NEGATIVE_INFINITY||e.y>this.p1.y)&&(this.p1.y=e.y)}size(){return this.p1.distanceTo(this.p0)}diagonal(){return this.p1.subtract(this.p0)}center(){const e=this.p1.subtract(this.p0);return e.scaleInPlace(.5),e.addInPlace(this.p0),e}clone(){return new Yt(this.p0.clone(),this.p1.clone())}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON()}}toString(){return tg.stringifyJSONWithFixedPrecision(this.toJSON())}}class KC{constructor(e=new b,g=0){e instanceof b?this.pos=e:this.pos=new b,this.radius=g}clone(){return new KC(this.pos.clone(),this.radius)}intersectsBox(e){return e.intersectsSphere(this)}toJSON(){return{pos:this.pos.toJSON(),radius:this.radius}}toString(){return tg.stringifyJSONWithFixedPrecision(this.toJSON())}}class gg{constructor(e,g){e instanceof Float32Array?(this.p0=new b(new Float32Array(e.buffer,e.byteOffset,3)),this.p1=new b(new Float32Array(e.buffer,e.byteOffset+12,3))):(e instanceof b?this.p0=e:this.p0=new b(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),g instanceof b?this.p1=g:this.p1=new b(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY))}get min(){return this.p0}get max(){return this.p1}set(e,g){this.p0=e,this.p1=g}reset(){this.p0.x=Number.POSITIVE_INFINITY,this.p0.y=Number.POSITIVE_INFINITY,this.p0.z=Number.POSITIVE_INFINITY,this.p1.x=Number.NEGATIVE_INFINITY,this.p1.y=Number.NEGATIVE_INFINITY,this.p1.z=Number.NEGATIVE_INFINITY}isValid(){return this.p0.x!=Number.POSITIVE_INFINITY&&this.p1.x!=Number.NEGATIVE_INFINITY&&this.p0.y!=Number.POSITIVE_INFINITY&&this.p1.y!=Number.NEGATIVE_INFINITY&&this.p0.z!=Number.POSITIVE_INFINITY&&this.p1.z!=Number.NEGATIVE_INFINITY}addPoint(e){e.x!=Number.POSITIVE_INFINITY&&e.x!=Number.NEGATIVE_INFINITY&&(e.x<this.p0.x&&(this.p0.x=e.x),e.x>this.p1.x&&(this.p1.x=e.x)),e.y!=Number.POSITIVE_INFINITY&&e.y!=Number.NEGATIVE_INFINITY&&(e.y<this.p0.y&&(this.p0.y=e.y),e.y>this.p1.y&&(this.p1.y=e.y)),e.z!=Number.POSITIVE_INFINITY&&e.z!=Number.NEGATIVE_INFINITY&&(e.z<this.p0.z&&(this.p0.z=e.z),e.z>this.p1.z&&(this.p1.z=e.z))}addBox3(e,g){g?(this.addPoint(g.transformVec3(e.p0)),this.addPoint(g.transformVec3(new b(e.p0.x,e.p0.y,e.p1.z))),this.addPoint(g.transformVec3(new b(e.p0.x,e.p1.y,e.p0.z))),this.addPoint(g.transformVec3(new b(e.p1.x,e.p0.y,e.p0.z))),this.addPoint(g.transformVec3(new b(e.p0.x,e.p1.y,e.p1.z))),this.addPoint(g.transformVec3(new b(e.p1.x,e.p0.y,e.p1.z))),this.addPoint(g.transformVec3(new b(e.p1.x,e.p1.y,e.p0.z))),this.addPoint(g.transformVec3(e.p1))):(this.addPoint(e.p0),this.addPoint(e.p1))}size(){return this.p1.distanceTo(this.p0)}diagonal(){return this.p1.subtract(this.p0)}center(){const e=this.p1.subtract(this.p0);return e.scaleInPlace(.5),e.addInPlace(this.p0),e}toMat4(){const e=this.p1.x-this.p0.x,g=this.p1.y-this.p0.y,t=this.p1.z-this.p0.z;return new Ee(e,0,0,0,0,g,0,0,0,0,t,0,this.p0.x,this.p0.y,this.p0.z,1)}getBoundingSphere(){return new KC(this.center(),this.diagonal().length()*.5)}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return new b().distanceTo(e.pos)<=e.radius*e.radius}intersectsPlane(e){let g,t;return e.normal.x>0?(g=e.normal.x*this.min.x,t=e.normal.x*this.max.x):(g=e.normal.x*this.max.x,t=e.normal.x*this.min.x),e.normal.y>0?(g+=e.normal.y*this.min.y,t+=e.normal.y*this.max.y):(g+=e.normal.y*this.max.y,t+=e.normal.y*this.min.y),e.normal.z>0?(g+=e.normal.z*this.min.z,t+=e.normal.z*this.max.z):(g+=e.normal.z*this.max.z,t+=e.normal.z*this.min.z),g<=-e.w&&t>=-e.w}clone(){return new gg(this.p0.clone(),this.p1.clone())}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON()}}fromJSON(e){const g={x:q.isNumeric(e.p0.x)?e.p0.x:Number.POSITIVE_INFINITY,y:q.isNumeric(e.p0.y)?e.p0.y:Number.POSITIVE_INFINITY,z:q.isNumeric(e.p0.z)?e.p0.z:Number.POSITIVE_INFINITY},t={x:q.isNumeric(e.p1.x)?e.p1.x:Number.NEGATIVE_INFINITY,y:q.isNumeric(e.p1.y)?e.p1.y:Number.NEGATIVE_INFINITY,z:q.isNumeric(e.p1.z)?e.p1.z:Number.NEGATIVE_INFINITY};this.p0.fromJSON(g),this.p1.fromJSON(t)}setFromFloat32Array(e){this.p0=new b(e.buffer,e.byteOffset),this.p1=new b(e.buffer,e.byteOffset+12)}toString(){return tg.stringifyJSONWithFixedPrecision(this.toJSON())}}let eU=0;class LC{constructor(){this.__id=++eU}getId(){return this.__id}getClassName(){return S.getClassName(Object.getPrototypeOf(this).constructor)}}class Ke{constructor(){}}class Xe extends LC{constructor(){super();this.listeners={}}on(e,g){if(!g)throw new Error("Missing listener.");this.listeners[e]||(this.listeners[e]=[]);const t=this.listeners[e];if(t.includes(g))throw new Error(`Listener "${g.name}" already connected to event "${e}".`);const I=t.length;return t[I]=g,I}once(e,g){const t=I=>{g(I),this.off(e,t)};return this.on(e,t)}off(e,g){if(!g)throw new Error("Missing callback function (listener).");if(typeof g=="number"){console.warn("Deprecated. Un-register using the original listener instead."),this.removeListenerById(e,g);return}const t=this.listeners[e]||[],I=[];if(t.forEach((l,C)=>{l===g&&I.push(C)}),I.length==0)throw new Error(`Listener "${g.name}" is not connected to "${e}" event`);for(const l of I)t[l]=null}removeListenerById(e,g){const t=this.listeners[e];if(!t){console.warn("callback :"+g+" was not connected to this event:"+e);return}if(!t[g])throw new Error("Invalid ID");t[g]=null}emit(e,g=new Ke){(this.listeners[e]||[]).forEach(I=>{I&&I(g)})}}class Hg extends Ke{constructor(e,g){super();this.width=e,this.height=g}}class gU extends Xe{constructor(e=0,g=0){super();this.root={x:0,y:0,w:e,h:g}}fit(e){if(e.length==0)return;let t=!1;if(this.root.w<e[0].w&&(this.root.w=e[0].w,t=!0),this.root.h<e[0].h&&(this.root.h=e[0].h,t=!0),t){const l=new Hg(this.root.w,this.root.h);this.emit("resized",l)}const I=l=>{l.fit=this.__addBlock(l)};e.forEach(I)}__addBlock(e){const g=this.findNode(this.root,e.w,e.h);return g?this.splitNode(g,e.w,e.h):this.growNode(e.w,e.h)}addBlock(e){let g=!1;if(this.root.w<e.w&&(this.root.w=e.w,g=!0),this.root.h<e.h&&(this.root.h=e.h,g=!0),g){const I=new Hg(this.root.w,this.root.h);this.emit("resized",I)}const t=this.findNode(this.root,e.w,e.h);return t?this.splitNode(t,e.w,e.h):this.growNode(e.w,e.h)}findNode(e,g,t){return e.used?this.findNode(e.right,g,t)||this.findNode(e.down,g,t):g<=e.w&&t<=e.h?e:null}splitNode(e,g,t){return e.used=!0,e.down={x:e.x,y:e.y+t,w:e.w,h:e.h-t},e.right={x:e.x+g,y:e.y,w:e.w-g,h:t},e}growNode(e,g){const t=e<=this.root.w,I=g<=this.root.h,l=I&&this.root.h>=this.root.w+e,C=t&&this.root.w>=this.root.h+g;return l?this.growRight(e,g):C?this.growDown(e,g):I?this.growRight(e,g):t?this.growDown(e,g):null}growRight(e,g){this.root={used:!0,x:0,y:0,w:this.root.w+e,h:this.root.h,down:this.root,right:{x:this.root.w,y:0,w:e,h:this.root.h}};const t=this.findNode(this.root,e,g);let I;t&&(I=this.splitNode(t,e,g));const l=new Hg(this.root.w,this.root.h);return this.emit("resized",l),I}growDown(e,g){this.root={used:!0,x:0,y:0,w:this.root.w,h:this.root.h+g,down:{x:0,y:this.root.h,w:this.root.w,h:g},right:this.root};const t=this.findNode(this.root,e,g);let I;t&&(I=this.splitNode(t,e,g));const l=new Hg(this.root.w,this.root.h);return this.emit("resized",l),I}}class UC{constructor(e=0,g=0){this.start=e,this.size=g}}class vt extends Xe{constructor(){super();this.freeList=[],this.allocations=[],this.allocationsMap={},this.allocatedSpace=0,this.reservedSpace=0,this.freeSpace=0}getAllocation(e){return this.allocations[this.allocationsMap[e]]}allocate(e,g){if(this.allocationsMap[e]!=null){const I=this.allocationsMap[e],l=this.allocations[I];if(g==l.size)return l;if(g<l.size){const C=l.size-g;return this.addBlock(I+1,new UC(l.start+g,C)),this.freeBlock(I+1),l.size=g,l}else{const C=I+1;if(this.freeList.includes(C)&&l.size+this.allocations[C].size>=g){const n=this.allocations[C];if(l.size+n.size==g)return l.size+=n.size,this.freeSpace-=n.size,this.freeList.splice(this.freeList.indexOf(C),1),this.removeBlock(C),l;{const F=g-l.size;return l.size+=F,this.freeSpace-=F,n.start+=F,n.size-=F,l}}else delete this.allocationsMap[e],l.start+l.size==this.allocatedSpace?(this.removeBlock(I),this.allocatedSpace-=l.size):this.freeBlock(I)}}let t=-1;for(let I=0;I<this.freeList.length;I++){const l=this.freeList[I],C=this.allocations[l];if(C.size==g){t=l;break}else C.size>g&&(t=l)}if(t!=-1){const I=this.allocations[t];if(this.freeSpace-=I.size,this.freeList.splice(this.freeList.indexOf(t),1),I.size>g){const l=I.size-g;this.addBlock(t+1,new UC(I.start+g,l)),this.freeBlock(t+1),this.freeList.sort((C,n)=>this.allocations[n].size-this.allocations[C].size),this.allocations[t].size=g}this.allocationsMap[e]=t}else{const I=this.allocatedSpace,l=this.allocations.length;this.allocatedSpace+=g;const C=q.nextPow2(this.allocatedSpace);C!=this.reservedSpace&&(this.reservedSpace=C,this.emit("resized",{reservedSpace:this.reservedSpace})),this.allocations.push(new UC(I,g)),this.allocationsMap[e]=l}return this.allocations[this.allocationsMap[e]]}addBlock(e,g){this.allocations.splice(e,0,g);for(const t in this.allocationsMap)this.allocationsMap[t]>=e&&this.allocationsMap[t]++;for(let t=0;t<this.freeList.length;t++)this.freeList[t]>=e&&this.freeList[t]++}removeBlock(e){this.allocations.splice(e,1);for(const g in this.allocationsMap)this.allocationsMap[g]>e&&this.allocationsMap[g]--;for(let g=0;g<this.freeList.length;g++)this.freeList[g]>e&&this.freeList[g]--}freeBlock(e){const g=this.allocations[e];this.freeSpace+=g.size;const t=e-1;if(this.freeList.includes(t)){const l=this.allocations[t];l.size+=g.size,this.removeBlock(e);return}const I=e+1;if(this.freeList.includes(I)){const l=this.allocations[I];l.start-=g.size,l.size+=g.size,this.removeBlock(e);return}this.freeList.push(e)}deallocate(e){const g=this.allocationsMap[e];if(g==null)throw new Error(`allocation ${e} does not exist.`);this.freeBlock(g),delete this.allocationsMap[e]}getFragmentation(){return this.freeSpace/this.allocatedSpace}defragment(){}verifyConsistency(){if(Object.keys(this.allocationsMap).length+this.freeList.length!=this.allocations.length)throw new Error("number of blocks does not match the number of allocations");for(const g in this.allocationsMap){const t=this.allocationsMap[g];if(this.freeList.includes(t))throw new Error("block of used memory is also on the free list")}let e=0;for(let g=0;g<this.allocations.length;g++){const t=this.allocations[g];if(t.start!=e)throw"blocks of memory are not sequential";e+=t.size}if(e!=this.allocatedSpace)throw`allocated size: ${this.allocatedSpace}  does not match allocated blocks: ${e}`;if(this.reservedSpace<this.allocatedSpace)throw`reserved space: ${this.reservedSpace} is less than allocated space: ${this.allocatedSpace}`}}class tU{constructor(e,g,t,I,l){this.screenPos=e,this.pointerRay=g,this.intersectionPos=t,this.geomData=I,this.geomItem=l.geomItem,this.componentId=l.componentId,this.dist=l.dist}}class IU extends Ke{constructor(e){super();this.controller=e}}class It extends Ke{constructor(e,g){super();this.change=e,this.count=g}}class lU extends Ke{constructor(e){super();this.envMap=e}}class ji extends Ke{constructor(e){super();this.index=e}}class Ba extends Ke{constructor(){super();this.propagating=!0}}class qi extends Ba{constructor(e){super();this.propagating=!0,this.sourceEvent=e,this.altKey=e.altKey,this.code=e.code,this.ctrlKey=e.ctrlKey,this.isComposing=e.isComposing,this.key=e.key,this.location=e.location,this.metaKey=e.metaKey,this.repeat=e.repeat,this.shiftKey=e.shiftKey,this.which=e.which}stopPropagation(){this.propagating=!1,this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){this.sourceEvent&&this.sourceEvent.preventDefault()}}class CU extends Ke{constructor(e){super();this.name=e}}class iU extends Ke{constructor(e){super();this.name=e}}class nU extends Ke{constructor(e){super();this.range=e}}class aU extends Ke{constructor(e){super();this.scene=e}}class FU extends Ke{constructor(e){super();this.value=e}}class UU extends Ke{constructor(e){super();this.selected=e}}class dU extends Ke{constructor(e){super();this.shaderName=e}}class YC extends Ke{constructor(e){super();this.state=e}}class $i extends Ke{constructor(e,g){super();this.geomFileID=e,this.geomCount=g}}class sU extends Ke{constructor(e,g){super();this.isTextured=e,this.param=g}}class Qa extends Ke{constructor(e,g){super();this.isOpaque=e,this.isOpaqueStateChanged=g}}class zC extends Ke{constructor(e,g){super();this.interfaceType=e,this.viewXfo=g}}class vC extends Ke{constructor(e){super();this.visible=e}}class oU extends zC{constructor(e){super("VR",e);this.hmd="",this.controllers=[]}}const ve={mouse:"mouse",touch:"touch",xr:"xr"};let dC=null;class yl extends Ba{constructor(e){super();this.pointerType=e}stopPropagation(){this.propagating=!1}setCapture(e){dC=e}getCapture(){return dC}releaseCapture(){dC=null}}class it extends yl{constructor(e,g,t,I){super(ve.xr);this.buttonPressed=0,this.viewport=e,this.controller=g,this.button=t,this.buttonPressed=I}stopPropagation(){this.propagating=!1}setCapture(e){this.controller.capturedItem=e}getCapture(){return this.controller.capturedItem}releaseCapture(){this.controller.capturedItem=null}}class AU extends yl{constructor(e,g,t){super(ve.xr);this.controllers=[],this.viewport=e,this.viewXfo=g,t.forEach(I=>{this.controllers.push(I)})}}class BU extends Ke{constructor(e){super();this.xrViewport=e}}class fg extends yl{constructor(e,g){super(ve.mouse);this.sourceEvent=e,this.button=e.button,this.clientX=e.clientX,this.clientY=e.clientY;const t=1;this.rendererX=(this.clientX-g.left)*t,this.rendererY=(this.clientY-g.top)*t,this.altKey=e.altKey,this.metaKey=e.metaKey,this.ctrlKey=e.ctrlKey,this.shiftKey=e.shiftKey}stopPropagation(){super.stopPropagation(),this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){this.sourceEvent&&this.sourceEvent.preventDefault()}}class sC{constructor(e,g){this.clientX=0,this.clientY=0,this.screenX=0,this.screenY=0,this.pageX=0,this.pageY=0,this.radiusX=0,this.radiusY=0,this.rotationAngle=0,this.force=0,this.altitudeAngle=0,this.azimuthAngle=0,this.touchType="direct",this.identifier=e.identifier,this.clientX=e.clientX,this.clientY=e.clientY,this.screenX=e.screenX,this.screenY=e.screenY,this.pageX=e.pageX,this.pageY=e.pageY,this.radiusX=e.radiusX,this.radiusY=e.radiusY,this.rotationAngle=e.rotationAngle,this.force=e.force;const t=1;this.rendererX=(this.clientX-g.left)*t,this.rendererY=(this.clientY-g.top)*t,this.touchPos=new f,this.touchRay=new Ag}}class nt extends yl{constructor(e,g){super(ve.touch);this.touches=[],this.changedTouches=[],this.targetTouches=[],this.altKey=!1,this.metaKey=!1,this.ctrlKey=!1,this.shiftKey=!1,this.sourceEvent=e,this.sourceEvent.stopPropagation(),this.altKey=e.altKey,this.metaKey=e.metaKey,this.ctrlKey=e.ctrlKey,this.shiftKey=e.shiftKey;for(let t=0;t<e.touches.length;t++)this.touches.push(new sC(e.touches[t],g));if(e.changedTouches)for(let t=0;t<e.changedTouches.length;t++)this.changedTouches.push(new sC(e.changedTouches[t],g));if(e.targetTouches)for(let t=0;t<e.targetTouches.length;t++)this.targetTouches.push(new sC(e.targetTouches[t],g))}stopPropagation(){super.stopPropagation(),this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){}}class QU extends fg{constructor(e,g){super(e,g);this.wheelDelta=e.wheelDelta,this.deltaMode=e.deltaMode,this.deltaX=e.deltaX,this.deltaY=e.deltaY,this.deltaZ=e.deltaZ}}class VU extends Ke{constructor(e,g){super();this.index=e,this.childItem=g}}let rU=0;class Va extends Xe{constructor(){super();if(this.constructor.name=="RefCounted")throw new Error("RefCounted should not be instantiated directly.");this.__id=++rU,this.__refs=[],this.__destroyed=!1}getId(){return this.__id}numRefs(){return this.__refs.length}addRef(e){if(!e)throw new Error("Error in RefCounted.addRef: Must provide a referer");return this.__refs.push(e),!0}removeRef(e){if(!e)throw new Error("Error in RefCounted.removeRef: Must provide a referer");const g=this.__refs.indexOf(e);if(g==-1)throw new Error("Error in RefCounted.removeRef: referer not found in refs list.");this.__refs.splice(g,1),this.__refs.length==0&&this.destroy()}getRefer(e){return this.__refs[e]}getRefIndex(e){return this.__refs.indexOf(e)}isDestroyed(){return this.__destroyed}destroy(){this.__destroyed=!0,this.emit("destructing")}}class xt extends Xe{constructor(){super();this.paramEventListenerIDs={},this.paramMapping={},this.params=[],this.deprecatedParamMapping={}}getNumParameters(){return this.params.length}getParameters(){return this.params}getParameterIndex(e){return this.paramMapping[e]}getParameterByIndex(e){return this.params[e]}hasParameter(e){return e in this.paramMapping}addParameterDeprecationMapping(e,g){this.deprecatedParamMapping[e]=g}getParameter(e){let g=this.paramMapping[e];if(g==null){const t=this.deprecatedParamMapping[e];if(t)console.warn(`Parameter name ${e} is now deprecated. Please use ${t} instead.`),g=this.paramMapping[t];else return null}return this.params[g]}parameterValueChanged(e){this.emit("parameterValueChanged",e)}addParameter(e){return this.insertParameter(e,this.params.length)}insertParameter(e,g){const t=e.getName();this.paramMapping[t]!=null&&(console.warn("Replacing Parameter:"+t),this.removeParameter(t)),e.setOwner(this),this.paramEventListenerIDs[t]=e.on("valueChanged",l=>{const C={param:e};for(const n in l)C[n]=l[n];this.parameterValueChanged(C)}),this.params.splice(g,0,e);for(let l=g;l<this.params.length;l++)this.paramMapping[this.params[l].getName()]=l;const I=new CU(t);return this.emit("parameterAdded",I),e}removeParameter(e){if(this.paramMapping[e]==null)throw new Error("Unable to remove Parameter:"+e);const g=this.paramMapping[e];this.params[this.paramMapping[e]].removeListenerById("valueChanged",this.paramEventListenerIDs[e]),this.params.splice(g,1),delete this.paramMapping[e];for(let l=g;l<this.params.length;l++)this.paramMapping[this.params[l].getName()]=l;const I=new iU(e);this.emit("parameterRemoved",I)}replaceParameter(e){const g=e.getName();if(this.paramMapping[g]==null)throw new Error("Unable to replace Parameter:"+g);const t=this.paramMapping[g];return this.removeParameter(g),this.insertParameter(e,t),e}toJSON(e){const g={type:this.getClassName()},t={};let I=0;for(const l of this.params){const C=l.toJSON(e);C&&(t[l.getName()]=C,I++)}return I>0&&(g.params=t),g}fromJSON(e,g){if(e.params)for(const t in e.params){const I=e.params[t],l=this.getParameter(t);l?I.paramPath?g==null||g.resolvePath(I.paramPath,C=>{this.replaceParameter(C)},()=>{console.warn("Unable to resolve shared parameter:"+I.paramPath)}):l.fromJSON(I,g):console.warn("Param not found:"+t)}}readBinary(e,g){if((g==null?void 0:g.versions["zea-engine"].compare([0,0,3]))>=0){const t=e.loadUInt32();for(let I=0;I<t;I++){const l=e.loadStr(),C=e.loadStr();let n=this.getParameter(C);if(!n){if(n=S.constructClass(l),!n){console.error("Unable to construct prop:"+C+" of type:"+l);continue}n.setName(C),this.addParameter(n)}n.readBinary(e,g)}}}toString(e){return JSON.stringify(this.toJSON(),null,2)}copyFrom(e,g){let t=e.getNumParameters();for(;t--;){const I=e.getParameterByIndex(t),l=this.getParameter(I.getName());l?l.copyFrom(I):this.addParameter(I.clone())}}}let en=0;class RU extends Ke{constructor(e,g){super();this.oldName=e,this.newName=g}}class jg extends xt{constructor(e=""){super();this.__ownerItem=void 0,this.__selectable=!0,this.__selected=!1,this.__metaData={},this.__name=e,this.__path=[this.__name],en++}static getNumBaseItems(){return en}getName(){return this.__name}setName(e){if(this.__name!=e){const g=this.__name;this.__name=e,this.updatePath();const t=new RU(g,e);this.emit("nameChanged",t)}}get name(){return this.getName()}set name(e){this.setName(e)}updatePath(){this.__ownerItem==null?this.__path=[this.__name]:this.__path=[...this.__ownerItem.getPath(),this.__name]}getPath(){return this.__path}resolvePath(e,g=0){if(g==0&&(e[0]=="."||e[0]==this.__name)&&g++,g==e.length)return this;if(e[g]==">"&&g==e.length-1)return this.getParameter(e[g+1]);const t=this.getParameter(e[g]);if(t)return t;throw new Error("Invalid path:"+e+"["+g+"] member not found")}getOwner(){return this.__ownerItem}setOwner(e){this.__ownerItem!==e?(this.__ownerItem=e,this.updatePath()):e||(this.__ownerItem=void 0,this.updatePath())}isSelectable(){return this.__selectable}setSelectable(e){if(this.__selectable!=e){this.__selectable=e;let g=new FU(this.__selectable);return this.emit("selectabilityChanged",g),!0}return!1}isSelected(){return this.__selected}setSelected(e){this.__selected=e;let g=new UU(this.__selected);this.emit("selectedChanged",g)}getMetadata(e){return this.__metaData[e]}hasMetadata(e){return e in this.__metaData}setMetadata(e,g){this.__metaData[e]=g}deleteMetadata(e){delete this.__metaData[e]}toJSON(e){const g=super.toJSON(e);return g.name=this.__name,g}fromJSON(e,g){e.name&&(this.__name=e.name),super.fromJSON(e,g)}readBinary(e,g){e.loadStr(),this.setName(e.loadStr()),super.readBinary(e,g)}clone(e){throw new Error(this.constructor.name+" does not implement its clone method")}copyFrom(e,g){super.copyFrom(e,g),this.setName(e.getName()),this.setSelectable(e.isSelectable())}}const ra=function(i,e,g,t,I=void 0){try{const l=new XMLHttpRequest;l.responseType=e,l.addEventListener("timeout",C=>{throw new Error("The request for "+i+" timed out.")}),l.addEventListener("error",C=>{throw new Error("The request for "+i+": xhr.readyState:"+l.readyState)}),l.addEventListener("abort",C=>{throw new Error("The request for "+i+": xhr.readyState:"+l.readyState)}),l.addEventListener("progress",C=>{I&&I(C.total,C.loaded)}),l.addEventListener("loadend",C=>{l.status==200?g(l):t(l.statusText)}),l.open("GET",i,!0),l.send()}catch(l){t(l)}},MC=function(i,e,g=void 0,t=void 0){ra(i,"text",I=>{e(I.responseText)},I=>{if(g!=null)g(I);else throw new Error("Unable to XHR File:"+i)},t)},Ra=function(i,e,g=void 0,t=void 0){ra(i,"arraybuffer",I=>{e(I.response)},I=>{if(g!=null)g(I);else throw new Error("Unable to XHR File:"+i)},t)};/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function VI(i,e,g,t){function I(l){return l instanceof g?l:new g(function(C){C(l)})}return new(g||(g=Promise))(function(l,C){function n(U){try{a(t.next(U))}catch(d){C(d)}}function F(U){try{a(t.throw(U))}catch(d){C(d)}}function a(U){U.done?l(U.value):I(U.value).then(n,F)}a((t=t.apply(i,e||[])).next())})}let $I=0;class ha{constructor(e){this.workers=[],this.workerTaskCount=[],this.taskPromiseResolves={},this.taskQueue=[],this.availableWorkers=[],this.terminationTimeouts=[],this.terminateWorkersWhenFree=!0,this.terminationLatency=2e3,this.terminateWorkersWhenFree=e}addTask(e,g){return this.addTaskCallback(()=>({taskData:e,transferables:g}))}addTaskCallback(e){$I++;const g=$I;return new Promise(t=>VI(this,void 0,void 0,function*(){this.taskPromiseResolves[g]=t,this.taskQueue.push({taskId:g,dataFactory:e});const I=_e.hardwareConcurrency-1;this.availableWorkers.length>0?this.consumeTask():this.workers.length<I-1&&(yield this.addWorker(),this.consumeTask())}))}consumeTask(){return VI(this,void 0,void 0,function*(){const e=this.availableWorkers.pop();if(this.workerTaskCount[e]>0||(this.terminationTimeouts[e]!=-1?(clearTimeout(this.terminationTimeouts[e]),this.terminationTimeouts[e]=-1):this.workers[e]||(yield this.allocWorker(e)),this.taskQueue.length==0))return;const g=this.taskQueue.pop(),{taskData:t,transferables:I}=g.dataFactory(e);t.taskId=g.taskId,this.workerTaskCount[e]++,this.workers[e].postMessage(t,I)})}addWorker(){const e=this.workers.length;return this.workers.push(null),this.allocWorker(e)}allocWorker(e){return new Promise(g=>{this.constructWorker().then(t=>{t.onmessage=I=>{if(I.data.taskId in this.taskPromiseResolves){const l=I.data.taskId;delete I.data.taskId,this.taskPromiseResolves[l](I.data),delete this.taskPromiseResolves[l]}this.workerTaskCount[e]--,!(this.workerTaskCount[e]>0)&&(this.availableWorkers.indexOf(e)==-1&&this.availableWorkers.push(e),this.taskQueue.length>0?this.consumeTask():this.terminateWorkersWhenFree&&this.scheduleWorkerTermination(e))},this.workers[e]=t,this.terminationTimeouts[e]=-1,this.workerTaskCount[e]=0,this.availableWorkers.push(e),g()})})}scheduleWorkerTermination(e){this.terminationTimeouts[e]=setTimeout(()=>{this.terminateWorker(e),this.terminationTimeouts[e]=-1},this.terminationLatency)}terminateWorker(e){this.workers[e].terminate(),this.workers[e]=null}messageWorker(e,g){$I++;const t=$I;return new Promise(I=>{this.taskPromiseResolves[t]=I,g.taskId=t,this.workers[e].postMessage(g)})}}function hU(i,e){var g=atob(i);if(e){for(var t=new Uint8Array(g.length),I=0,l=g.length;I<l;++I)t[I]=g.charCodeAt(I);return String.fromCharCode.apply(null,new Uint16Array(t.buffer))}return g}function cU(i,e,g){var t=e===void 0?null:e,I=g===void 0?!1:g,l=hU(i,I),C=l.indexOf(`
`,10)+1,n=l.substring(C)+(t?"//# sourceMappingURL="+t:""),F=new Blob([n],{type:"application/javascript"});return URL.createObjectURL(F)}function _C(i,e,g){var t;return function(l){return t=t||cU(i,e,g),new Worker(t,l)}}var ZU=_C("",null,!1);class mU extends ha{constructor(){super(!0)}constructWorker(){return new Promise(e=>{const g=new ZU;g.onmessage=t=>{t.data.type=="WASM_LOADED"&&e(g)},g.postMessage({type:"init"})})}}function WU(i){return i.ok?i:!1}class bU{constructor(){this.threadPool=new mU}init(e){this.resourceLoader=e}getType(){return"archive"}loadFile(e){return this.resourceLoader.incrementWorkload(1),new Promise((t,I)=>{fetch(e).then(l=>(this.resourceLoader.incrementWorkDone(1),WU(l)?l.arrayBuffer():(I(new Error(`loadArchive: ${l.status} - ${l.statusText} : ${e}`)),null))).then(l=>{if(!l){I("Buffer is null");return}const C=e;this.threadPool.addTask({type:"unpack",resourceId:C,buffer:l},[l]).then(n=>{n.type==="FINISHED"?t(n.entries):n.type==="ERROR"&&I(new Error(`Unable to load Resource: ${C}`))})})})}}function JU(i){return i.ok?i:!1}class GU{init(e){this.resourceLoader=e}getType(){return"json"}loadFile(e){return this.resourceLoader.incrementWorkload(1),new Promise((t,I)=>{fetch(e).then(l=>{this.resourceLoader.incrementWorkDone(1),JU(l)?t(l.json()):I(`loadJSON: ${l.status} - ${l.statusText} : ${e}`)})})}}function uU(i){return i.ok?i:!1}class SU{init(e){this.resourceLoader=e}getType(){return"text"}loadFile(e){return this.resourceLoader.incrementWorkload(1),new Promise((t,I)=>{fetch(e).then(l=>{this.resourceLoader.incrementWorkDone(1),uU(l)?t(l.text()):I(`loadText: ${l.status} - ${l.statusText} : ${e}`)})})}}function NU(i){return i.ok?i:!1}class pU{init(e){this.resourceLoader=e}getType(){return"binary"}loadFile(e){return this.resourceLoader.incrementWorkload(1),new Promise((t,I)=>{fetch(e).then(l=>{this.resourceLoader.incrementWorkDone(1),NU(l)?t(l.arrayBuffer()):I(`loadBinary: ${l.status} - ${l.statusText} : ${e}`)})})}}const oC=2e3;class yU extends Xe{constructor(){super();this.baseUrl="",this.loadCount=0,this.queue=[],this.__totalWork=0,this.__doneWork=0,this.plugins={},this.systemUrls={};const e="https://storage.googleapis.com/visualive-tmp/zea-engine-resources";this.systemUrls["ZeaEngine/Vive.vla"]=e+"/Vive.vla",this.systemUrls["ZeaEngine/Oculus.vla"]=e+"/Oculus.vla",this.commonResources={}}registerPlugin(e){e.init(this),this.plugins[e.getType()]=e}loadFile(e,g,t=!0){const I=this.plugins[e];if(!I)throw new Error(`There's no plugin registered for the type of file "${e}". Did you add the plugins script? See: https://docs.zea.live/zea-engine/#/adding-default-plugins`);if(t&&this.incrementWorkload(),this.loadCount<oC){this.loadCount++;const l=I.loadFile(g);return l.then(()=>{for(this.loadCount--,this.incrementWorkDone(),this.emit("loaded",{url:g});this.loadCount<oC&&this.queue.length>0;)this.queue.pop()()},()=>{this.incrementWorkDone()}),l}else return new Promise((C,n)=>{this.queue.push(()=>{this.loadCount++,I.loadFile(g).then(a=>{for(this.loadCount--,this.incrementWorkDone(),this.emit("loaded",{url:g});this.loadCount<oC&&this.queue.length>0;)this.queue.pop()();C(a)},()=>{this.incrementWorkDone()})})})}getCommonResource(e){return this.commonResources[e]}setCommonResource(e,g){this.commonResources[e]=g}incrementWorkload(e=1){this.__totalWork+=e;const g=this.__doneWork/this.__totalWork*100;this.emit("progressIncremented",{percent:g})}incrementWorkDone(e=1){this.__doneWork+=e;const g=this.__doneWork/this.__totalWork*100;if(this.emit("progressIncremented",{percent:g}),this.__doneWork>this.__totalWork)throw new Error("Mismatch between work loaded and work done.")}}const ee=new yU,XU=new bU;ee.registerPlugin(XU);const kU=new GU;ee.registerPlugin(kU);const fU=new SU;ee.registerPlugin(fU);const EU=new pU;ee.registerPlugin(EU);class rI{constructor(e=""){if(this.branch="",e){const g=e.split("-"),t=g[0].split(".");this.major=parseInt(t[0]),this.minor=parseInt(t[1]),this.patch=parseInt(t[2]),g.length==2&&(this.branch=g[1])}else this.major=0,this.minor=0,this.patch=0}compare(e){const g=[this.major,this.minor,this.patch];for(let t=0;t<3;t++)if(g[t]!==e[t])return g[t]-e[t];return 0}toString(){return`v${this.major}.${this.minor}.${this.patch}`+(this.branch!=""?`-${this.branch}`:"")}}class RI{constructor(e,g=0,t=!0){this.__data=e,this.__byteOffset=g,this.__dataView=new DataView(this.__data),this.__isMobileDevice=t,this.utf8decoder=new TextDecoder}get isMobileDevice(){return this.__isMobileDevice}get data(){return this.__data}get byteLength(){return this.__dataView.byteLength}get remainingByteLength(){return this.__dataView.byteLength-this.__byteOffset}pos(){return this.__byteOffset}seek(e){this.__byteOffset=e}advance(e){this.__byteOffset+=e}loadUInt8(){const e=this.__dataView.getUint8(this.__byteOffset);return this.__byteOffset+=1,e}loadUInt16(){const e=this.__dataView.getUint16(this.__byteOffset,!0);return this.__byteOffset+=2,e}loadUInt32(){const e=this.__dataView.getUint32(this.__byteOffset,!0);return this.__byteOffset+=4,e}loadSInt32(){const e=this.__dataView.getInt32(this.__byteOffset,!0);return this.__byteOffset+=4,e}loadFloat16(){const e=this.loadUInt16();return q.decode16BitFloat(e)}loadUFloat16(){const e=this.loadFloat16();return e<0?2048-e:e}loadFloat16From2xUInt8(){throw Error("loadFloat16From2xUInt8 not implemented!")}loadUInt32From2xUFloat16(){const e=this.loadUFloat16(),g=this.loadUFloat16();return e+g*4096}loadSInt32From2xFloat16(){const e=this.loadFloat16(),g=this.loadFloat16();return e+g*2048}loadFloat32(){const e=this.__dataView.getFloat32(this.__byteOffset,!0);return this.__byteOffset+=4,e}loadUInt8Array(e,g=!1){e==null&&(e=this.loadUInt32());let t;return g?(t=new Uint8Array(this.__data.slice(this.__byteOffset,this.__byteOffset+e)),t.length!=e&&console.log("broken")):t=new Uint8Array(this.__data,this.__byteOffset,e),this.__byteOffset+=e,t}loadUInt16Array(e,g=!1){if(e==null&&(e=this.loadUInt32()),e==0)return new Uint16Array;this.readPad(2);let t;if(this.__isMobileDevice){t=new Uint16Array(e);for(let I=0;I<e;I++)t[I]=this.__dataView.getUint16(this.__byteOffset,!0),this.__byteOffset+=2}else g?(t=new Uint16Array(this.__data.slice(this.__byteOffset,this.__byteOffset+e*2)),t.length!=e&&console.log("broken")):t=new Uint16Array(this.__data,this.__byteOffset,e),this.__byteOffset+=e*2;return t}loadUInt32Array(e,g=!1){if(e==null&&(e=this.loadUInt32()),e==0)return new Uint32Array;this.readPad(4);let t;if(this.__isMobileDevice){t=new Uint32Array(e);for(let I=0;I<e;I++)t[I]=this.__dataView.getUint32(this.__byteOffset,!0),this.__byteOffset+=4}else g?(t=new Uint32Array(this.__data.slice(this.__byteOffset,this.__byteOffset+e*4)),t.length!=e&&console.log("broken")):t=new Uint32Array(this.__data,this.__byteOffset,e),this.__byteOffset+=e*4;return t}loadFloat32Array(e,g=!1){if(e==null&&(e=this.loadUInt32()),e==0)return new Float32Array;this.readPad(4);let t;if(this.__isMobileDevice){t=new Float32Array(e);for(let I=0;I<e;I++)t[I]=this.__dataView.getFloat32(this.__byteOffset,!0),this.__byteOffset+=4}else g?t=new Float32Array(this.__data.slice(this.__byteOffset,this.__byteOffset+e*4)):t=new Float32Array(this.__data,this.__byteOffset,e),this.__byteOffset+=e*4;return t}loadStr(){const e=this.loadUInt32(),g=new Uint8Array(this.__data,this.__byteOffset,e);return this.__byteOffset+=e,this.utf8decoder.decode(g)}loadStrArray(){const e=this.loadUInt32(),g=[];for(let t=0;t<e;t++)g[t]=this.loadStr();return g}loadSInt32Vec2(){const e=this.loadSInt32(),g=this.loadSInt32();return new f(e,g)}loadUInt32Vec2(){const e=this.loadUInt32(),g=this.loadUInt32();return new f(e,g)}loadFloat16Vec2(){const e=this.loadFloat16(),g=this.loadFloat16();return new f(e,g)}loadFloat32Vec2(){const e=this.loadFloat32(),g=this.loadFloat32();return new f(e,g)}loadFloat16Vec3(){const e=this.loadFloat16(),g=this.loadFloat16(),t=this.loadFloat16();return new b(e,g,t)}loadFloat32Vec3(){const e=this.loadFloat32(),g=this.loadFloat32(),t=this.loadFloat32();return new b(e,g,t)}loadFloat16Quat(){const e=this.loadFloat16(),g=this.loadFloat16(),t=this.loadFloat16(),I=this.loadFloat16();return new de(e,g,t,I)}loadFloat32Quat(){const e=this.loadFloat32(),g=this.loadFloat32(),t=this.loadFloat32(),I=this.loadFloat32();return new de(e,g,t,I)}loadRGBFloat32Color(){const e=this.loadFloat32(),g=this.loadFloat32(),t=this.loadFloat32();return new E(e,g,t)}loadRGBAFloat32Color(){const e=this.loadFloat32(),g=this.loadFloat32(),t=this.loadFloat32(),I=this.loadFloat32();return new E(e,g,t,I)}loadRGBUInt8Color(){const e=this.loadUInt8(),g=this.loadUInt8(),t=this.loadUInt8();return new E(e/255,g/255,t/255)}loadRGBAUInt8Color(){const e=this.loadUInt8(),g=this.loadUInt8(),t=this.loadUInt8(),I=this.loadUInt8();return new E(e/255,g/255,t/255,I/255)}loadBox2(){return new Yt(this.loadFloat32Vec2(),this.loadFloat32Vec2())}loadBox3(){return new gg(this.loadFloat32Vec3(),this.loadFloat32Vec3())}readPad(e){const g=this.__byteOffset%e;g!=0&&(this.__byteOffset+=e-g)}}var Mt;(function(i){i[i.OP_WRITE=0]="OP_WRITE",i[i.OP_READ_WRITE=1]="OP_READ_WRITE"})(Mt||(Mt={}));class Le extends Xe{constructor(e="",g,t){super();this.dirty=!1,this.boundInputs=[],this.boundOutputs=[],this.cleaning=!1,this.dirtyOpIndex=0,this.firstOP_WRITE=0,this.name=e,this.__value=g,this.dataType=t}getName(){return this.name}setName(e){if(e===this.name)return;const g=this.name;this.name=e,this.emit("nameChanged",{newName:this.name,prevName:g})}getOwner(){return this.ownerItem}setOwner(e){this.ownerItem=e}getPath(){return this.ownerItem&&this.ownerItem instanceof jg?[...this.ownerItem.getPath(),this.name]:[this.name]}getDataType(){return this.dataType}bindOperatorInput(e){this.boundInputs.push(e)}unbindOperatorInput(e){const g=this.boundInputs.indexOf(e);this.boundInputs.splice(g,1)}bindOperatorOutput(e,g=-1){g==-1&&(g=this.boundOutputs.length),this.boundOutputs.splice(g,0,e);for(let t=g;t<this.boundOutputs.length;t++)this.boundOutputs[t].setParamBindIndex(t);return this.__findFirstOP_WRITE(),this.dirtyOpIndex=this.boundOutputs.length,this.setDirty(g),g}unbindOperatorOutput(e){const g=e.getParamBindIndex();this.boundOutputs.splice(g,1);for(let t=g;t<this.boundOutputs.length;t++)this.boundOutputs[t].setParamBindIndex(t);return this.__findFirstOP_WRITE(),this.dirtyOpIndex=this.boundOutputs.length,this.setDirty(Math.max(0,g-1)),g}__findFirstOP_WRITE(){if(this.firstOP_WRITE=this.boundOutputs.length,this.boundOutputs.length>0)for(this.firstOP_WRITE--;this.firstOP_WRITE>0&&this.boundOutputs[this.firstOP_WRITE].getMode()!=Mt.OP_WRITE;this.firstOP_WRITE--);}setDirty(e){if(e<this.dirtyOpIndex){let g=this.firstOP_WRITE;if(g<=e){for(this.dirtyOpIndex=g,g++;g<this.boundOutputs.length;g++)g!=e&&this.boundOutputs[g].getOperator().setDirty();for(let t=0;t<this.boundInputs.length;t++)this.boundInputs[t].setDirty();return this.emit("valueChanged"),!0}}return!1}isDirty(){return this.dirtyOpIndex<this.boundOutputs.length}getDirtyBindingIndex(){return this.dirtyOpIndex}setCleanFromOp(e,g){if(g!=this.dirtyOpIndex){if(g<this.dirtyOpIndex)console.log("Parameter is cleaned when it was already clean to that point in the stack:",this.getPath());else if(this.boundOutputs[g].getMode()!=Mt.OP_WRITE){const t=this.getClassName(),I=this.boundOutputs[g].getOperator(),l=I.getClassName();throw new Error(`Parameter: ${t} with name: ${this.getName()} is not cleaning all outputs during evaluation of op: ${l} with name: ${I.getName()}`)}}this.__value=e,this.dirtyOpIndex=g+1}getValueFromOp(e){return this.dirtyOpIndex<e&&this._clean(e),this.__value}_clean(e){if(this.cleaning)throw new Error(`Cycle detected when cleaning: ${this.getPath()}. Operators need to be rebound to fix errors`);for(this.cleaning=!0;this.dirtyOpIndex<e;){const g=this.dirtyOpIndex;if(this.boundOutputs[this.dirtyOpIndex].getOperator().evaluate(),g==this.dirtyOpIndex){const I=this.boundOutputs[this.dirtyOpIndex].getOperator(),l=I.getClassName();console.warn(`Operator: ${l} with name: ${I.getName()} is not cleaning its outputs during evaluation`),this.dirtyOpIndex++}}this.cleaning=!1}getValue(){return this.dirtyOpIndex<this.boundOutputs.length&&this._clean(this.boundOutputs.length),this.__value}setValue(e){if(e==null)throw"undefined was passed into the set value for param:"+this.getName();if(this.boundOutputs.length>0)for(let g=this.boundOutputs.length-1;g>=0;g--){const t=this.boundOutputs[g];if(e=t.backPropagateValue(e),t.getMode()==0)return}if(!(typeof e!="object"&&this.__value==e)){this.__value=e;for(let g=0;g<this.boundInputs.length;g++)this.boundInputs[g].paramValueChanged();this.emit("valueChanged")}}get value(){return this.getValue()}set value(e){this.setValue(e)}loadValue(e){this.__value=e}copyFrom(e,g){this.loadValue(e.__value)}readBinary(e,g){console.warn(`TODO: Parameter: ${this.constructor.name} with name: ${this.name} does not implement readBinary`)}destroy(){console.warn("nothing destroyed. This method was not overwritten in subclass")}}class k extends Le{constructor(e="",g=0,t,I){super(e,g,"Number");this.range=t,this.step=I}getRange(){return this.range}setRange(e){this.range=e}getStep(){return this.step}setStep(e){this.step=e}toJSON(e){const g={value:this.__value};return this.range&&(g.range=this.range),this.step&&(g.step=this.step),g}fromJSON(e,g){this.__value=e.value,e.range&&(this.range=e.range),e.step&&(this.step=e.step)}readBinary(e,g){this.__value=e.loadFloat32()}clone(){return new k(this.name,this.__value,this.range,this.step)}}class TU extends k{readBinary(e,g){this.__value=e.loadFloat32()}}class YU extends k{readBinary(e,g){this.__value=e.loadSInt32()}}class vU extends k{readBinary(e,g){this.__value=e.loadUInt32()}}S.register("NumberParameter",k);S.register("Property_SInt32",YU);S.register("Property_UInt32",vU);S.register("Property_Float32",TU);class OC extends k{constructor(e,g,t=[]){super(e,g,[0,t.length],1);this.choices=t}getChoices(){return this.choices}setValue(e){typeof e=="string"?super.setValue(this.choices.indexOf(e)):super.setValue(e)}}S.register("MultiChoiceParameter",OC);class Je extends Le{constructor(e="",g){super(e,g!=null?g:!1,"Boolean")}readBinary(e,g){this.__value=e.loadUInt8()!=0}toJSON(e){return{value:this.__value}}fromJSON(e,g){this.__value=e.value,this.emit("valueChanged",{mode:0})}clone(){return new Je(this.name,this.__value)}}S.register("BooleanParameter",Je);S.register("Property_Boolean",Je);class XI extends Le{constructor(e="",g,t){super(e,g||new f,"Vec2");this.range=t}getRange(){return this.range}setRange(e){this.range=e,this.emit("rangeChanged",{range:e})}readBinary(e,g){var t;(t=this.__value)===null||t===void 0||t.readBinary(e)}toJSON(e){var g;return{name:this.name,value:(g=this.__value)===null||g===void 0?void 0:g.toJSON()}}fromJSON(e,g){const t=new f;t.fromJSON(e.value),this.__value=t,e.name&&(this.name=e.name)}clone(){var e;const g=new XI(this.name,(e=this.__value)===null||e===void 0?void 0:e.clone());return this.range&&g.setRange(this.range),g}}S.register("Vec2Parameter",XI);S.register("Property_Vec2_32f",XI);class kI extends Le{constructor(e="",g,t){super(e,g||new b,"Vec3");this.range=t}readBinary(e,g){var t;(t=this.__value)===null||t===void 0||t.readBinary(e)}toJSON(e){var g;return{name:this.name,value:(g=this.__value)===null||g===void 0?void 0:g.toJSON()}}fromJSON(e,g){const t=new b;t.fromJSON(e.value),this.__value=t,e.name&&(this.name=e.name)}clone(){var e;return new kI(this.name,(e=this.__value)===null||e===void 0?void 0:e.clone())}}S.register("Vec3Parameter",kI);S.register("Property_Vec3_32f",kI);class wt extends Le{constructor(e="",g){super(e,g||new Be,"Vec4")}readBinary(e,g){var t;(t=this.__value)===null||t===void 0||t.readBinary(e)}toJSON(e){var g;return{name:this.name,value:(g=this.__value)===null||g===void 0?void 0:g.toJSON()}}fromJSON(e,g){const t=new Be;t.fromJSON(e.value),this.__value=t,e.name&&(this.name=e.name)}clone(){var e;return new wt(this.name,(e=this.__value)===null||e===void 0?void 0:e.clone())}}S.register("Vec4Parameter",wt);S.register("Property_Vec4_32f",wt);class Xl extends Le{constructor(e="",g){super(e,g||new Yt,"Box2")}readBinary(e,g){this.__value.p0.readBinary(e),this.__value.p1.readBinary(e)}toJSON(e){return{value:{p0:this.__value.p0.toJSON(),p1:this.__value.p1.toJSON()}}}fromJSON(e,g){this.__value.p0.fromJSON(e.p0),this.__value.p1.fromJSON(e.p1)}clone(){var e;return new Xl(this.name,(e=this.__value)===null||e===void 0?void 0:e.clone())}}S.register("Box2Parameter",Xl);S.register("Property_Box2_32f",Xl);class fI extends Le{constructor(e="",g){super(e,g||new gg,"Box3")}readBinary(e,g){this.__value.p0.readBinary(e),this.__value.p1.readBinary(e)}toJSON(e){return{value:{p0:this.__value.p0.toJSON(),p1:this.__value.p1.toJSON()}}}fromJSON(e,g){e.value&&(this.__value.p0.fromJSON(e.value.p0),this.__value.p1.fromJSON(e.value.p1))}clone(){var e;return new fI(this.name,(e=this.__value)===null||e===void 0?void 0:e.clone())}}S.register("Box3Parameter",fI);S.register("Property_Box3_32f",fI);class Fg extends Le{constructor(e="",g){super(e,g||new E,"Color")}readBinary(e,g){const t=e.loadRGBAFloat32Color();t.applyGamma(2.2),this.__value=t}toJSON(e){var g;return{value:(g=this.__value)===null||g===void 0?void 0:g.toJSON()}}fromJSON(e,g){var t;(t=this.__value)===null||t===void 0||t.fromJSON(e.value)}clone(){var e;return new Fg(this.name,(e=this.__value)===null||e===void 0?void 0:e.clone())}}S.register("ColorParameter",Fg);S.register("Property_Color_32f",Fg);class kl extends Le{constructor(e="",g){super(e,g||new de,"Quat")}readBinary(e,g){var t;(t=this.__value)===null||t===void 0||t.readBinary(e)}toJSON(e){var g;return{value:(g=this.__value)===null||g===void 0?void 0:g.toJSON()}}fromJSON(e,g){const t=new de;t.fromJSON(e.value),this.__value=t}clone(){var e;return new kl(this.name,(e=this.__value)===null||e===void 0?void 0:e.clone())}}S.register("QuatParameter",kl);S.register("Property_Quat_32f",kl);class fl extends Le{constructor(e="",g){super(e,g||new ng,"Mat3")}readBinary(e,g){var t;(t=this.__value)===null||t===void 0||t.readBinary(e)}toJSON(e){var g;return{value:(g=this.__value)===null||g===void 0?void 0:g.toJSON()}}fromJSON(e,g){const t=new ng;t.fromJSON(e.value),this.__value=t}clone(){var e;return new fl(this.name,(e=this.__value)===null||e===void 0?void 0:e.clone())}}S.register("Mat3Parameter",fl);S.register("Property_Mat3_32f",fl);class EI extends Le{constructor(e="",g){super(e,g||new Ee,"Mat4")}readBinary(e,g){var t;(t=this.__value)===null||t===void 0||t.readBinary(e)}toJSON(e){var g;return{value:(g=this.__value)===null||g===void 0?void 0:g.toJSON()}}fromJSON(e,g){const t=new Ee;t.fromJSON(e.value),this.__value=t}clone(){var e;return new EI(this.name,(e=this.__value)===null||e===void 0?void 0:e.clone())}}S.register("Mat4Parameter",EI);S.register("Property_Mat4_32f",EI);class cg extends Le{constructor(e="",g){super(e,g||new v,"Xfo")}readBinary(e,g){this.__value.readBinary(e)}toJSON(e){return{name:this.name,value:this.__value.toJSON()}}fromJSON(e,g){const t=new v;t.fromJSON(e.value),this.__value=t,e.name&&(this.name=e.name)}clone(){return new cg(this.name,this.__value.clone())}}S.register("XfoParameter",cg);S.register("Property_Xfo_32f",cg);class TI extends Le{constructor(e="",g){super(e,g,"BaseImage")}toJSON(e){const g={name:this.name};return this.__value&&(g.imageType=this.__value.getClassName(),g.value=this.__value.toJSON()),g}fromJSON(e,g){var t;e.imageType&&(this.__value=S.constructClass(e.imageType),e.value&&((t=this.__value)===null||t===void 0||t.fromJSON(e.value,g)))}clone(){return new TI(this.name,this.__value)}}S.register("ImageParameter",TI);class Zg extends Le{constructor(e="",g=""){super(e,g,"String");this.multiLine=!1}setMultiLine(e){this.multiLine=e}getMultiLine(){return this.multiLine}readBinary(e,g){this.__value=e.loadStr()}toJSON(e){return{value:this.__value}}fromJSON(e,g){this.__value=e.value?e.value:"",this.emit("valueChanged",{mode:0})}clone(){return new Zg(this.name,this.__value)}}S.register("StringParameter",Zg);S.register("Property_String",Zg);class El extends Le{constructor(e="",g=[]){super(e,g,"String[]")}readBinary(e,g){this.__value=e.loadStrArray()}toJSON(e){return{value:this.__value}}fromJSON(e,g){this.__value=e.value,this.emit("valueChanged",{mode:0})}clone(){return new El(this.name,this.__value)}}S.register("StringListParameter",El);S.register("Property_StringList",El);class PC extends Le{constructor(e){super(e,{},"Struct");this.members=[]}addMember(e){return this.__value&&(this.__value[e.getName()]=e.value),e.on("valueChanged",()=>{this.__value&&(this.__value[e.getName()]=e.value)}),this.members.push(e),this.emit("valueChanged"),e}getParameter(e){for(const g of this.members)if(g.getName()==e)return g}getMember(e){return this.getParameter(e)}getMemberNames(){const e=[];for(let g=0;g<this.members.length;g++){const t=this.members[g];t!=null&&(e[g]=t.getName())}return e}toJSON(e){const g={},t=[];for(const I of this.members)t.push(I.toJSON(e));return g.members=t,g.name=this.name,g}fromJSON(e,g){if(e.members==null){console.warn("Invalid Parameter JSON");return}for(let t=0;t<e.members.length;t++)e.members[t]&&this.members[t].fromJSON(e.members[t],g);this.name=e.name}clone(){return new PC(this.name)}destroy(){for(const e of this.members)e.destroy()}}S.register("StructParameter",PC);class Tl extends Xe{constructor(e,g=Mt.OP_WRITE){super();this._op=null,this.__name=e,this._mode=g,this._param=void 0,this._paramBindIndex=-1,this.detached=!1}getName(){return this.__name}setOperator(e){this._op=e}getOperator(){return this._op}getMode(){return this._mode}isConnected(){return this._param!=null}getParam(){return this._param}setParam(e,g=-1){this._param&&this._param.unbindOperatorOutput(this),this._param=e,this._param&&(this._paramBindIndex=this._param.bindOperatorOutput(this,g)),this.emit("paramSet",{param:this._param})}getParamBindIndex(){return this._paramBindIndex}setParamBindIndex(e){this._paramBindIndex=e}setDirty(){this._param&&this._param.setDirty(this._paramBindIndex)}getValue(){if(this._param)return this._param.getValueFromOp(this._paramBindIndex);throw new Error("Cannot call getValue on OperatorOutput that is not connected:",this.__name)}backPropagateValue(e){return this._op&&(e=this._op.backPropagateValue(e)),e}setClean(e){this._param&&this._param.setCleanFromOp(e,this._paramBindIndex)}toJSON(e){const g=this._param?this._param.getPath():"";return{name:this.__name,paramPath:e&&e.makeRelative?e.makeRelative(g):g,paramBindIndex:this._paramBindIndex}}fromJSON(e,g){e.paramPath&&(g==null||g.resolvePath(e.paramPath,t=>{this.setParam(t,e.paramBindIndex)},t=>{console.warn("OperatorOutput: '"+this.getName()+"'. Unable to connect to:"+e.paramPath)}))}detach(){this.detached=!0,this._paramBindIndex=this._param?this._param.unbindOperatorOutput(this):-1}reattach(){this.detached=!1,this._param&&(this._paramBindIndex=this._param.bindOperatorOutput(this,this._paramBindIndex))}rebind(){this._param&&(this._param.unbindOperatorOutput(this),this._paramBindIndex=this._param.bindOperatorOutput(this))}}class MU extends Tl{}class Yl extends Tl{}class HU extends Tl{}class ag extends jg{constructor(e=""){super(e);this.__inputs=new Map,this.__outputs=new Map}setDirty(){this.__outputs.forEach(e=>e.setDirty())}parameterValueChanged(e){super.parameterValueChanged(e),this.setDirty()}addInput(e){return e.setOperator(this),this.__inputs.set(e.getName(),e),this.setDirty(),e}removeInput(e){typeof e=="string"&&(e=this.getInput(e)),e.getParam()&&e.setParam(void 0),this.__inputs.delete(e.getName())}getNumInputs(){return this.__inputs.size}getInputByIndex(e){return Array.from(this.__inputs.values())[e]}getInput(e){const g=this.__inputs.get(e);if(!g)throw`Couldn't find an Input with the name of '${e}'`;return g}addOutput(e){return e.setOperator(this),this.__outputs.set(e.getName(),e),this.setDirty(),e}removeOutput(e){if(typeof e=="string"&&(e=this.getOutput(e)),!(e instanceof Tl))throw new Error("removeOutput only accepts string or OperatorInput");e.getParam()&&e.setParam(),this.__outputs.delete(e.getName())}getNumOutputs(){return this.__outputs.size}getOutputByIndex(e){return Array.from(this.__outputs.values())[e]}getOutput(e){const g=this.__outputs.get(e);if(!g)throw new Error(`Couldn't find an Output with the name of '${e}'`);return g}evaluate(){throw new Error("Not yet implemented")}backPropagateValue(e){return e}toJSON(e){const g=super.toJSON(e);g.type=this.getClassName();const t=[];this.__inputs.forEach(l=>{t.push(l.toJSON(e))}),g.inputs=t;const I=[];return this.__outputs.forEach(l=>{I.push(l.toJSON(e))}),g.outputs=I,g}fromJSON(e,g){super.fromJSON(e,g),e.inputs&&e.inputs.forEach((t,I)=>{let l;t.name?(l=this.getInput(t.name),l||(l=this.addInput(t.name))):l=this.getInputByIndex(I),l.fromJSON(t,g)}),e.outputs&&e.outputs.forEach((t,I)=>{let l;t.name?(l=this.getOutput(t.name),l||(l=this.addOutput(t.name))):l=this.getOutputByIndex(I),l.fromJSON(t,g)})}detach(){this.__inputs.forEach(e=>e.detach()),this.__outputs.forEach(e=>e.detach())}reattach(){this.__inputs.forEach(e=>e.reattach()),this.__outputs.forEach(e=>e.reattach())}rebind(){this.__outputs.forEach(e=>e.rebind())}}class ca extends Xe{constructor(e){super();this.detached=!1,this.name=e}getName(){return this.name}setOperator(e){this._op=e}getOperator(){return this._op}isConnected(){return this.param!=null}getParam(){return this.param}paramValueChanged(){this._op&&this._op.setDirty()}setParam(e){this.param&&this.param.unbindOperatorInput(this),this.param=e,this.param&&this.param.bindOperatorInput(this),this.emit("paramSet",{param:this.param})}getValue(){if(this.param)return this.param.value;throw new Error("Unable to getValue")}setValue(e){this.param&&this.param.setValue(e)}setDirty(){this._op&&this._op.setDirty()}toJSON(e){const g=this.param?this.param.getPath():[],t=e&&e.makeRelative?e.makeRelative(g):g;return{name:this.name,paramPath:t}}fromJSON(e,g){e.paramPath&&(g==null||g.resolvePath(e.paramPath,t=>{this.setParam(t)},()=>{console.warn("OperatorInput: '"+this.getName()+"'. Unable to connect to:"+e.paramPath)}))}detach(){this.param&&this.param.unbindOperatorInput(this)}reattach(){this.detached=!1,this.param&&this.param.bindOperatorInput(this)}}class xU extends ca{}class Pg extends ca{}class Za extends ag{constructor(e,g){super("CalcGlobalXfoOperator");this.parentGlobal=new Pg("ParentGlobal"),this.localXfo=new Pg("LocalXfo"),this.globalXfo=new Yl("GlobalXfo"),this.localXfo.setParam(g),this.globalXfo.setParam(e),this.addInput(this.parentGlobal),this.addInput(this.localXfo),this.addOutput(this.globalXfo)}backPropagateValue(e){if(this.parentGlobal.isConnected()){const g=this.parentGlobal.getValue();this.localXfo.setValue(g.inverse().multiply(e))}else this.localXfo.setValue(e)}evaluate(){const e=this.localXfo.getValue();if(this.parentGlobal.isConnected()){const g=this.parentGlobal.getValue();this.globalXfo.setClean(g.multiply(e))}else this.globalXfo.setClean(e)}}S.register("CalcGlobalXfoOperator",Za);class jC extends fI{constructor(e="",g){super(e);this.dirty=!0,this.treeItem=g}setDirty(e){return this.dirty||(this.dirty=!0,this.emit("valueChanged")),!0}getValue(){return this.dirty&&(this.__value=this.treeItem._cleanBoundingBox(),this.dirty=!1),this.__value}clone(){var e;const g=new jC(this.name,this.treeItem);return g.value=(e=this.__value)===null||e===void 0?void 0:e.clone(),g}loadValue(e){this.__value=e.clone()}}class H extends jg{constructor(e){super(e);this.disableBoundingBox=!1,this.__childItems=[],this.__childItemsEventHandlers=[],this.__childItemsMapping={},this.globalXfoParam=new cg("GlobalXfo",new v),this.localXfoParam=new cg("LocalXfo",new v),this.boundingBoxParam=new jC("BoundingBox",this),this.visibleParam=new Je("Visible",!0),this.opacityParam=new k("Opacity",1,[0,1]),this.__highlightMapping={},this.__highlights=[],this.__visible=!0,this.__visibleCounter=1,this.__opacity=1,this.addParameter(this.visibleParam),this.addParameter(this.opacityParam),this.addParameter(this.localXfoParam),this.addParameter(this.globalXfoParam),this.addParameter(this.boundingBoxParam),this.globalXfoOp=new Za(this.globalXfoParam,this.localXfoParam),this.globalXfoParam.on("valueChanged",g=>{this.setBoundingBoxDirty(),this.emit("globalXfoChanged",g)}),this.visibleParam.on("valueChanged",()=>{this.__visibleCounter+=this.visibleParam.value?1:-1,this.updateVisibility()}),this.opacityParam.on("valueChanged",()=>{this.updateOpacity()})}setOwner(e){if(this.__ownerItem){const g=this.__ownerItem;if(g&&g instanceof H){g.isVisible()||this.__visibleCounter++;const t=g.getChildIndex(this);t>=0&&g.unbindChild(t,this)}}if(super.setOwner(e),this.__ownerItem){const g=this.__ownerItem;g&&(g.isVisible()||this.__visibleCounter--,this.globalXfoOp.getInput("ParentGlobal").setParam(g.globalXfoParam))}else this.globalXfoOp.getInput("ParentGlobal").setParam(void 0);this.updateVisibility()}updatePath(){super.updatePath();for(const e of this.__childItems)e&&e.updatePath()}getParentItem(){return this.getOwner()}setParentItem(e){this.setOwner(e)}isVisible(){return this.__visibleCounter>0}setVisible(e){this.visibleParam.value=e}propagateVisibility(e){this.__visibleCounter+=e,this.updateVisibility()}updateVisibility(){const e=this.__visibleCounter>0;if(e!=this.__visible){this.__visible=e;for(const t of this.__childItems)t.propagateVisibility(this.__visible?1:-1);this.emit("visibilityChanged",new vC(e));const g=this.__ownerItem;return g&&g instanceof H&&g.setBoundingBoxDirty(),!0}return!1}get opacity(){return this.__opacity}isOpaque(){return this.__opacity>.999}updateOpacity(){const e=this.__opacity>.999,g=this.getParentItem();g?this.__opacity=this.opacityParam.value*g.__opacity:this.__opacity=this.opacityParam.value;for(const I of this.__childItems)I.updateOpacity();const t=this.__opacity>.999;this.emit("opacityChanged",new Qa(t,e!=t))}addHighlight(e,g,t=!1){if(e in this.__highlightMapping)if(this.__highlights[this.__highlights.length-1]!=e){const I=this.__highlights.indexOf(e);this.__highlights.splice(I,1),this.__highlights.push(e),this.emit("highlightChanged",{name:e,color:g})}else this.__highlightMapping[e].isEqual(g)||(this.__highlightMapping[e]=g,this.emit("highlightChanged",{name:e,color:g}));else this.__highlights.push(e),this.__highlightMapping[e]=g,this.emit("highlightChanged",{name:e,color:g});t&&this.__childItems.forEach(I=>{I.addHighlight(e,g,t)})}removeHighlight(e,g=!1){if(e in this.__highlightMapping){if(this.__highlights[this.__highlights.length-1]==e)if(this.__highlights.pop(),delete this.__highlightMapping[e],this.__highlights.length>0){const t=this.__highlights[this.__highlights.length-1],I=this.__highlightMapping[t];this.emit("highlightChanged",{name:t,color:I})}else this.emit("highlightChanged");else{const t=this.__highlights.indexOf(e);this.__highlights.splice(t,1),delete this.__highlightMapping[e],this.emit("highlightChanged")}g&&this.__childItems.forEach(t=>{t.removeHighlight(e,g)})}}getHighlight(){return this.__highlights.length==0?null:this.__highlightMapping[this.__highlights[this.__highlights.length-1]]}getHighlightName(){return this.__highlights.length==0?null:this.__highlights[this.__highlights.length-1]}isHighlighted(){return this.__highlights.length>0}_cleanBoundingBox(){const e=new gg;return this.__childItems.forEach(g=>{if(g.isVisible()){const t=g.boundingBoxParam.value;t&&e.addBox3(t)}}),e}setBoundingBoxDirty(){this.boundingBoxParam&&this.boundingBoxParam.setDirty(-1);const e=this.__ownerItem;e&&e instanceof H&&e.setBoundingBoxDirty()}getChildren(){return this.__childItems}getNumChildren(){return this.__childItems.length}generateUniqueName(e){if(!(e in this.__childItemsMapping))return e;let g=1;e.length>4&&!Number.isNaN(parseInt(e.substring(e.length-4)))?g=parseInt(e.substr(e.length-4)):e.length>3&&!Number.isNaN(parseInt(e.substring(e.length-3)))?g=parseInt(e.substr(e.length-3)):e.length>2&&!Number.isNaN(parseInt(e.substring(e.length-2)))&&(g=parseInt(e.substr(e.length-2)));const t=[];for(const l of this.__childItems)l&&t.push(l.getName());let I=e;for(;;){let l=""+g;for(;l.length<2;)l="0"+l;if(I=e+l,!t.includes(I))break;g++}return I}updateChildNameMapping(e){for(let g=e;g<this.__childItems.length;g++)this.__childItemsMapping[this.__childItems[g].getName()]=g}childNameChanged(e){const g=this.__childItemsMapping[e.oldName];delete this.__childItemsMapping[e.oldName],this.__childItemsMapping[e.newName]=g}insertChild(e,g,t=!1,I=!0){if(e.getName()in this.__childItemsMapping)if(I)e.setName(this.generateUniqueName(e.getName()));else throw new Error("Item '"+e.getName()+"' is already a child of :"+this.getPath());if(!(e instanceof H))throw new Error("Object is is not a tree item :"+e);const l={};if(l.nameChanged=e.on("nameChanged",C=>{this.childNameChanged(C)}),t){const C=this.globalXfoParam.value,n=e.globalXfoParam.value,F=C.inverse().multiply(n);e.localXfoParam.value=F}return this.setBoundingBoxDirty(),this.__highlights.forEach(C=>{const n=this.__highlightMapping[C];e.addHighlight(C,n,!0)}),this.__childItems.splice(g,0,e),this.__childItemsEventHandlers.splice(g,0,l),this.__childItemsMapping[e.getName()]=g,this.updateChildNameMapping(g),e.setOwner(this),this.emit("childAdded",new VU(g,e)),e}addChild(e,g=!0,t=!0){const I=this.__childItems.length;return this.insertChild(e,I,g,t),e}getChild(e){return this.__childItems[e]}getChildByName(e){const g=this.__childItemsMapping[e];return g!=null?this.__childItems[g]:null}getChildNames(){const e=[];for(let g=0;g<this.__childItems.length;g++){const t=this.__childItems[g];t!=null&&(e[g]=t.getName())}return e}unbindChild(e,g){const t=this.__childItemsEventHandlers[e];for(const I in t)g.removeListenerById(I,t[I]);this.__childItems.splice(e,1),this.__childItemsEventHandlers.splice(e,1),delete this.__childItemsMapping[g.getName()],this.updateChildNameMapping(e),this.setBoundingBoxDirty(),this.emit("childRemoved",{childItem:g,index:e})}removeChild(e){const g=this.__childItems[e];!g||(this.unbindChild(e,g),g.setOwner(void 0))}removeChildByName(e){const g=this.__childItemsMapping[e];if(g!=null)return this.removeChild(g)}removeChildByHandle(e){const g=this.__childItems.indexOf(e);if(g==-1)throw new Error("Error in removeChildByHandle. Child not found:"+e.getName());this.removeChild(g)}removeAllChildren(){let e=this.__childItems.length;for(;e--;)this.removeChild(e);this.setBoundingBoxDirty()}getChildIndex(e){return this.__childItems.indexOf(e)}resolvePath(e,g=0,t=!1){if(typeof e=="string"&&(e=e.split("/")),g==0){if(e[0]=="."||e[0]==this.__name)g++;else if(e[0]==".."){if(this.__ownerItem)return this.__ownerItem.resolvePath(e,g+1);if(t)throw Error("this.__ownerItem is undefined");console.warn("this.__ownerItem is undefined")}}if(g==e.length)return this;const I=e[g],l=this.getChildByName(I);if(l==null){const C=this.getParameter(e[g]);if(C)return C;throw new Error(`Unable to resolve path : [${e.toString()}] after: ${this.getName()} 
No child or parameter called : "${e[g]}"`)}return l.resolvePath(e,g+1)}traverse(e,g=!0){const t=(l,C)=>{const n=l.getChildren();for(const F of n)F&&I(F,C+1)},I=(l,C)=>{e(l,C)!=!1&&t(l,C)};g?I(this,1):t(this,0)}onPointerDown(e){this.emit("pointerDown",e);const g=this.__ownerItem;e.propagating&&g&&g.onPointerDown(e)}onPointerUp(e){this.emit("pointerUp",e);const g=this.__ownerItem;e.propagating&&g&&g.onPointerUp(e)}onPointerMove(e){this.emit("pointerMove",e);const g=this.__ownerItem;e.propagating&&g&&g.onPointerMove(e)}onPointerEnter(e){this.emit("pointerEnter",e);const g=this.__ownerItem;e.propagating&&g&&g.onPointerEnter(e)}onPointerLeave(e){this.emit("pointerLeave",e);const g=this.__ownerItem;e.propagating&&g&&g.onPointerLeave(e)}onWheel(e){this.emit("mouseWheel",e);const g=this.__ownerItem;e.propagating&&g&&g.onWheel(e)}onTouchCancel(e){this.emit("touchCancel",e);const g=this.__ownerItem;e.propagating&&g&&g.onTouchCancel(e)}toJSON(e){let g=super.toJSON(e);const t={};for(const I of this.__childItems)if(I){const l=I.toJSON(e);l&&(t[I.getName()]=l)}return Object.keys(t).length>0&&(g?g.children=t:g={name:this.__name,children:t}),g}fromJSON(e,g,t){if(super.fromJSON(e,g),g&&!Number.isNaN(g.numTreeItems)&&g.numTreeItems++,e.children!=null){const I=e.children;if(Array.isArray(I))for(const l of I){let C=this.getChildByName(l.name);C?C.fromJSON(l,g):l.type&&(C=S.constructClass(l.type),C&&(C.fromJSON(l,g),this.addChild(C,!1,!1)))}else for(const l in I){const C=I[l];let n=this.getChildByName(l);n?n.fromJSON(C,g):C.type&&(n=S.constructClass(C.type),n&&(n.fromJSON(C,g),this.addChild(n,!1,!1)))}}}readBinary(e,g){super.readBinary(e,g),g.numTreeItems++;const t=e.loadUInt8(),I=1<<1;this.setVisible((t&I)!=0);const l=1<<2,C=1<<5;if(t&l){const a=new v;if(a.tr=e.loadFloat32Vec3(),a.ori=e.loadFloat32Quat(),t&C)a.sc=e.loadFloat32Vec3();else{const U=e.loadFloat32();a.sc.set(U,U,U)}this.localXfoParam.value=a}const n=1<<3;t&n&&this.boundingBoxParam.loadValue(new gg(e.loadFloat32Vec3(),e.loadFloat32Vec3()));const F=e.loadUInt32();if(F>0){const a=e.loadUInt32Array(F);for(let U=0;U<F;U++)try{e.seek(a[U]);let d=e.loadStr();const s=S.constructClass(d);if(!s){const o=e.loadStr();console.warn("Unable to construct child:"+o+" of type:"+d);continue}e.seek(a[U]),s.readBinary(e,g),this.addChild(s,!1,!0)}catch(d){console.warn("Error loading tree item: ",d)}}}clone(e){const g=new H("");return g.copyFrom(this,e),g}copyFrom(e,g){super.copyFrom(e,g),e.getChildren().forEach(t=>{t&&this.addChild(t.clone(g),!1,!1)})}}S.register("TreeItem",H);class qC extends Le{constructor(e="",g){super(e,void 0,"TreeItem");this.listenerIDs={},this.owner=new H(""),this.filterFn=g}emitTreeItemGlobalXfoChanged(e){this.emit("treeItemGlobalXfoChanged",e)}setOwner(e){this.owner=e}getOwner(){return this.owner}setFilterFn(e){this.filterFn=e}getFilterFn(){return this.filterFn}setValue(e){this.filterFn&&!this.filterFn(e)||this.__value!==e&&(this.__value&&this.__value.removeListenerById("globalXfoChanged",this.listenerIDs.globalXfoChanged),this.__value=e,this.__value&&(this.listenerIDs.globalXfoChanged=this.__value.on("globalXfoChanged",g=>{this.emitTreeItemGlobalXfoChanged(g)})),this.emit("valueChanged"))}toJSON(e){var g;return{value:e.makeRelative((g=this.__value)===null||g===void 0?void 0:g.getPath())}}fromJSON(e,g){if(e.value==null){console.warn("Invalid Parameter JSON");return}g.resolvePath(e.value,t=>{this.setValue(t)},()=>{console.warn("Unable to resolve tree item parameter value:"+e.paramPath)})}clone(e){const g=new qC(this.name,this.filterFn);return this.__value&&g.setValue(this.__value.clone(e)),g}}S.register("TreeItemParameter",qC);class gn extends Ke{constructor(e,g){super();this.index=g,this.item=e}}class $C extends Le{constructor(e="",g){super(e,new Set,"TreeItem");this.filterFn=g}setFilterFn(e){this.filterFn=e}getFilterFn(){return this.filterFn}getItem(e){return Array.from(this.__value)[e]}addItem(e,g=!0){if(this.filterFn&&!this.filterFn(e)){console.warn("ItemSet __filterFn rejecting item:",e.getPath());return}this.__value.add(e);const t=Array.from(this.__value).indexOf(e);return this.emit("itemAdded",new gn(e,t)),g&&this.emit("valueChanged"),t}addItems(e,g=!0){e.forEach(t=>this.addItem(t,!1)),g&&this.emit("valueChanged")}removeItem(e,g=!0){const t=Array.from(this.__value)[e];return this.__value.delete(t),this.emit("itemRemoved",new gn(t,e)),g&&this.emit("valueChanged"),t}setItems(e,g=!0){const t=Array.from(this.__value);for(let I=t.length-1;I>=0;I--){const l=t[I];e.has(l)||this.removeItem(I,!1)}for(const I of e)this.__value.has(I)||this.addItem(I,!1);g&&this.emit("valueChanged")}clearItems(e=!0){this.__value.clear(),e&&this.emit("valueChanged")}getNumItems(){return this.__value.size}toJSON(e){this.__value||(this.__value=new Set);const g=[];if(e)for(const t of this.__value)g.push(t.getPath());return{value:g}}fromJSON(e,g){if(g)for(const t in e.value){const I=g.resolvePath(t);this.__value.add(I)}}clone(){return new $C(this.name,this.filterFn)}}class vl extends Le{constructor(e="",g){super(e,g,"Geometry");this.listenerIDs={},g&&this.setValue(g)}emitBoundingBoxDirtied(e){this.emit("boundingBoxChanged",e)}setValue(e){this.__value!==e&&(this.__value&&this.__value.removeListenerById("boundingBoxChanged",this.listenerIDs.boundingBoxChanged),this.__value=e,this.__value&&(this.listenerIDs.boundingBoxChanged=this.__value.on("boundingBoxChanged",g=>{this.emitBoundingBoxDirtied(g)})),this.emit("valueChanged"))}loadValue(e){this.__value&&this.__value.removeListenerById("boundingBoxChanged",this.listenerIDs.boundingBoxChanged),this.__value=e,this.__value&&(this.listenerIDs.boundingBoxChanged=this.__value.on("boundingBoxChanged",g=>{this.emitBoundingBoxDirtied(g)}))}toJSON(e){var g;return{name:this.name,value:(g=this.__value)===null||g===void 0?void 0:g.toJSON(e)}}fromJSON(e,g){e.name&&(this.name=e.name);const t=S.constructClass(e.value.type);t.fromJSON(e.value,g),this.__value=t}clone(){return new vl(this.name,this.__value)}}S.register("GeometryParameter",vl);class ei extends Le{constructor(e=""){super(e,"","FilePath")}getFilename(){if(!this.__value)throw"No file value";return this.__value.lastIndexOf("/")>-1?this.__value.substring(this.__value.lastIndexOf("/")+1):""}getExt(){const e=this.getFilename(),g=e.lastIndexOf(".");if(g!=-1)return e.substring(g).toLowerCase()}getStem(){const e=this.getFilename();if(e){const g=e.split(".");return g.length==2?g[0]:e}return null}setValue(e){if(!e)throw new Error("Invalid value for setValue.");e!=this.__value&&(this.__value=e,this.emit("valueChanged"))}toJSON(e){return{value:this.__value}}fromJSON(e,g){e.value&&(this.__value=e.value)}clone(){const e=new ei(this.name);return this.__value&&e.setValue(this.__value),e}}S.register("FilePathParameter",ei);class YI extends Le{constructor(e="",g){super(e,g,"Material");this.listenerIDs={},g&&this.setValue(g)}valueParameterValueChanged(e){this.emit("valueParameterValueChanged",e)}setValue(e){this.__value!==e&&(this.__value&&this.__value.removeListenerById("parameterValueChanged",this.listenerIDs.parameterValueChanged),this.__value=e,this.__value&&(this.listenerIDs.parameterValueChanged=this.__value.on("parameterValueChanged",g=>{this.valueParameterValueChanged(g)})),this.emit("valueChanged"))}loadValue(e){this.__value&&this.__value.removeListenerById("parameterValueChanged",this.listenerIDs.parameterValueChanged),this.__value=e,this.__value&&(this.listenerIDs.parameterValueChanged=this.__value.on("parameterValueChanged",g=>{this.valueParameterValueChanged(g)}))}toJSON(e){let g={};return g.name=this.name,this.__value&&(g={value:!e||!e.onlyPath?this.__value.toJSON(e):this.__value.getPath()}),g}fromJSON(e,g){if(e.value==null){console.warn("Invalid Parameter JSON");return}if(e.value instanceof Array||e.value instanceof String){if(g&&g.assetItem){const I=g.assetItem.getMaterialLibrary().getMaterial(e.value instanceof Array?e.value[1]:e.value);I&&this.loadValue(I)}}else{const t=S.constructClass(e.value.type);e.value&&t.fromJSON(e.value,g),this.loadValue(t)}}clone(){return new YI(this.name,this.__value)}}S.register("MaterialParameter",YI);class ug extends jg{constructor(e){super(e);this.width=0,this.height=0,this.format="RGB",this.type="UNSIGNED_BYTE",this.loaded=!1,this.mipMapped=!0,this.wrapS="REPEAT",this.wrapT="REPEAT",this.minFilter="LINEAR",this.magFilter="LINEAR",this.alphaFromLuminance=!1,this.on("parameterValueChanged",()=>{this.emit("updated")})}isLoaded(){return this.loaded}getParams(){return{type:this.type,format:this.format,width:this.width,height:this.height,wrapS:this.wrapS,wrapT:this.wrapT,minFilter:this.minFilter,magFilter:this.magFilter,mipMapped:this.mipMapped,alphaFromLuminance:this.alphaFromLuminance}}}class Oe extends k{constructor(e="",g,t){super(e,g,t)}getImage(){return this.image}setImage(e){const g=()=>{this.emit("textureDisconnected")};e?(this.image!=null&&this.image!==e&&g(),this.image=e,this.emit("textureConnected"),this.emit("valueChanged",{mode:0})):this.image!=null&&(g(),this.image=void 0,this.emit("textureDisconnected"))}setValue(e){e instanceof ug?this.setImage(e):super.setValue(e)}readBinary(e,g){super.readBinary(e,g);const t=e.loadStr();t!=""&&(console.log("Load Texture"),this.setImage(g.assetItem.materialLibrary.getImage(t)))}clone(){return new Oe(this.name,this.__value,this.range)}}S.register("MaterialFloatParam",Oe);var Bg;(function(i){i.Gamma="Gamma",i.Linear="Linear"})(Bg||(Bg={}));class ye extends Fg{constructor(e,g){super(e,g);this.listenerIDs={},this.colorSpace=Bg.Gamma}getImage(){return this.image}imageUpdated(){this.emit("valueChanged")}setImage(e){const g=()=>{this.image&&(this.image.removeListenerById("updated",this.listenerIDs.updated),this.image=void 0),this.emit("textureDisconnected")};e?(this.image!=null&&this.image!==e&&g(),this.image=e,this.listenerIDs.updated=this.image.on("updated",()=>{this.imageUpdated()}),this.emit("textureConnected"),this.emit("valueChanged")):this.image!=null&&(g(),this.image=void 0,this.emit("textureDisconnected"))}setValue(e){e instanceof ug?this.setImage(e):super.setValue(e)}readBinary(e,g){super.readBinary(e,g);const t=e.loadStr();t!=""&&this.setImage(g.assetItem.materialLibrary.getImage(t)),this.colorSpace=Bg.Linear}clone(){var e;const g=new ye(this.name,(e=this.__value)===null||e===void 0?void 0:e.clone());return g.colorSpace=this.colorSpace,g}}S.register("MaterialColorParam",ye);function AC(i,e){return!i.some((g,t)=>Math.abs(e[t]-g)>.001)}function wU(i){for(let e=0;e<i.length;e++)if(!Number.isNaN(i[e]))return!0;return!1}class Ml extends LC{constructor(e,g){super();this.data=new Float32Array(0),this.dataTypeName=e,this.stride=g,this.initRange(0),this.splits={},this.splitValues=[]}setMesh(e){this.mesh=e}asArray(){return this.data}getDataTypeName(){return this.dataTypeName}getCount(){return this.data.length/this.stride}setCount(e){const g=this.data.length,t=e*this.stride;if(t>g){const I=new Float32Array(t);I.set(this.data,0),this.data=I,this.initRange(g)}else t<g&&(this.data=this.data.slice(0,t));this.splits={},this.splitValues=[]}initRange(e){for(let g=e;g<this.data.length;g++)this.data[g]=Number.NaN}get numElements(){return this.stride}getFloat32Value(e){return this.data[e]}setFloat32Value(e,g){this.data[e]=g}getSplits(){return this.splits}getFaceVertexValueRef_array(e,g){const t=this.mesh.getFaceVertexIndex(e,g);return t in this.splits&&e in this.splits[t]?this.splitValues[this.splits[t][e]]:this.data.subarray(t*this.stride,(t+1)*this.stride)}setFaceVertexValue_array(e,g,t){const I=this.mesh.getFaceVertexIndex(e,g);this.setFaceVertexValue_ByVertexIndex(e,I,t)}setFaceVertexValue_ByVertexIndex(e,g,t){const I=this.data.subarray(g*this.stride,(g+1)*this.stride);if(!wU(I))I.set(t);else if(!AC(I,t)){if(g in this.splits){const l=this.splits[g];for(const C in l){const n=l[C];if(AC(this.splitValues[n],t)){l[e]=n;return}}if(e in this.splits[g]){this.splitValues[this.splits[g][e]]=t;return}}else this.splits[g]={};this.splits[g][e]=this.splitValues.length,this.splitValues.push(t)}}setSplitVertexValue_array(e,g,t){if(e in this.splits||(this.splits[e]={}),g in this.splits[e]){const I=this.splitValues[this.splits[e][g]];if(AC(I,t))return;console.warn("Face Vertex Already Split with different value")}this.splits[e][g]=this.splitValues.length,this.splitValues.push(t)}setSplitVertexValues(e,g,t){e in this.splits||(this.splits[e]={});const I=this.splitValues.length;this.splitValues.push(t);for(const l of g)this.splits[e][l]=I}generateSplitValues(e,g){if(g==0)return this.data;const t=this.getCount(),I=new Float32Array((t+g)*this.stride);I.set(this.data);for(const l in e){const C=e[l];for(const n in C){const F=t+C[n];if(l in this.splits&&n in this.splits[l]){const a=this.splits[l][n];this.splitValues[a].forEach((U,d)=>{I[F*this.stride+d]=U})}else{const a=parseInt(l);for(let U=0;U<this.stride;U++)I[F*this.stride+U]=this.data[a*this.stride+U]}}}return I}toJSON(e){return{data:this.data,dataType:this.dataTypeName,length:this.data.length/this.stride}}fromJSON(e){const g=e.data.map(t=>q.isNumeric(t)?t:Number.POSITIVE_INFINITY);this.data=Float32Array.from(g)}loadSplitValues(e){const g=e.loadUInt32Array();if(g.length==0)return;let t=0,I=0;for(;;){const n=g[t++],F=g[t++],a={};for(let U=0;U<F;U++){const d=g[t++],s=g[t++];a[d]=s,s>=I&&(I=s+1)}if(this.splits[n]=a,t>=g.length)break}const l=this.stride,C=e.loadFloat32Array(I*l);this.splitValues=[];for(let n=0;n<I;n++){const F=C.slice(n*l,n*l+l);this.splitValues.push(F)}}toString(){return JSON.stringify(this.toJSON(),null,2)}genBuffer(){return{values:this.data,count:this.getCount(),dataType:this.dataTypeName,normalized:this.normalized}}}class Qg extends Ml{constructor(){super("Vec3",3);this.normalized=!1}getValueRef(e){if(e>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+e+". Num Vertices:"+this.data.length/3);const g=e*this.stride,t=this.data.subarray(g,g+this.stride);return new b(t)}getValue(e){if(e>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+e+". Num Vertices:"+this.data.length/3);const g=e*this.stride,t=this.data.slice(g,g+this.stride);return new b(t)}setValue(e,g){if(e>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+e+". Num Vertices:"+this.data.length/3);const t=e*this.stride;this.data.set(g.asArray(),t)}getFaceVertexValueRef(e,g){const t=this.getFaceVertexValueRef_array(e,g);return new b(t)}setFaceVertexValue(e,g,t){this.setFaceVertexValue_array(e,g,t.asArray())}setSplitVertexValue(e,g,t){this.setSplitVertexValue_array(e,g,t.asArray())}}S.register("Vec3Attribute",Qg);class Sg extends Ml{constructor(){super("Vec2",2);this.normalized=!1}getValueRef(e){if(e>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+e+". Num Vertices:"+this.data.length/3);const g=e*this.stride,t=this.data.subarray(g,g+this.stride);return new f(t)}getValue(e){if(e>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+e+". Num Vertices:"+this.data.length/3);const g=e*this.stride,t=this.data.slice(g,g+this.stride);return new f(t)}setValue(e,g){if(e>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+e+". Num Vertices:"+this.data.length/3);const t=e*this.stride;this.data.set(g.asArray(),t)}getFaceVertexValueRef(e,g){const t=this.getFaceVertexValueRef_array(e,g);return new f(t)}setFaceVertexValue(e,g,t){this.setFaceVertexValue_array(e,g,t.asArray())}setSplitVertexValue(e,g,t){this.setSplitVertexValue_array(e,g,t.asArray())}}S.register("Vec2Attribute",Sg);const tn=(i,e,g,t,I)=>{for(let l=i[0];l<i[1];l++){const C=new b(t[l*3+0]/255,t[l*3+1]/255,t[l*3+2]/255);C.multiplyInPlace(g),C.addInPlace(e),I.setValue(l,C)}},In=(i,e,g,t,I)=>{for(let l=i[0];l<i[1];l++){const C=new b(t[l*3+0]/65535,t[l*3+1]/65535,t[l*3+2]/65535);C.multiplyInPlace(g),C.addInPlace(e),I.setValue(l,C)}},ln=(i,e,g,t,I)=>{g.isNull()&&g.set(1,1,1);for(let l=i[0];l<i[1];l++){const C=new b(t[l*3+0]/255,t[l*3+1]/255,t[l*3+2]/255);C.multiplyInPlace(g),C.addInPlace(e),C.normalizeInPlace(),I.setValue(l,C)}},Cn=(i,e,g,t,I)=>{for(let l=i[0];l<i[1];l++){const C=new f(t[l*2+0]/255,t[l*2+1]/255);C.multiplyInPlace(g),C.addInPlace(e),I.setValue(l,C)}},nn=(i,e,g,t,I)=>{for(let l=i[0];l<i[1];l++){const C=new f(t[l*2+0]/65535,t[l*2+1]/65535);C.multiplyInPlace(g),C.addInPlace(e),I.setValue(l,C)}};class gi extends xt{constructor(){super();this.__boundingBox=new gg,this.__boundingBoxDirty=!0,this.__metaData=new Map,this.__name="",this.__numVertices=0,this.__vertexAttributes=new Map,this.debugColor=new E(1,0,0,1),this.name="",this.addVertexAttribute("positions",new Qg)}clear(){this.setNumVertices(0)}setDebugName(e){this.name=e}addVertexAttribute(e,g){g.setCount(this.__numVertices),this.__vertexAttributes.set(e,g)}hasVertexAttribute(e){return this.__vertexAttributes.has(e)}getVertexAttribute(e){return this.__vertexAttributes.get(e)}getVertexAttributes(){const e={};for(const[g,t]of this.__vertexAttributes.entries())e[g]=t;return e}get positions(){return this.__vertexAttributes.get("positions")}numVertices(){return this.__numVertices}getNumVertices(){return this.__numVertices}setNumVertices(e){this.__numVertices=e,this.__vertexAttributes.forEach(g=>g.setCount(this.__numVertices)),this.setBoundingBoxDirty()}getBoundingBox(){return this.__boundingBoxDirty&&this.updateBoundingBox(),this.__boundingBox}setBoundingBoxDirty(){this.__boundingBoxDirty=!0,this.emit("boundingBoxChanged")}updateBoundingBox(){const e=this.positions,g=new gg;if(e){const t=e.getCount();for(let I=0;I<t;I++)g.addPoint(e.getValueRef(I))}this.__boundingBox=g,this.__boundingBoxDirty=!1}getMetadata(e){return this.__metaData.get(e)}hasMetadata(e){return this.__metaData.has(e)}setMetadata(e,g){this.__metaData.set(e,g)}deleteMetadata(e){this.__metaData.delete(e)}genBuffers(e){const g={};for(const[t,I]of this.__vertexAttributes)g[t]=I.genBuffer();return{numVertices:this.numVertices(),attrBuffers:g}}loadBaseGeomBinary(e,g){this.name=e.loadStr();const t=e.loadUInt8();this.debugColor=e.loadRGBFloat32Color();const I=e.loadUInt32();this.__boundingBox.set(e.loadFloat32Vec3(),e.loadFloat32Vec3()),this.setNumVertices(I);const l=this.positions;let C,n;t&1<<1&&(C=this.getVertexAttribute("normals"),C||(C=new Qg,this.addVertexAttribute("normals",C))),t&1<<2&&(n=this.getVertexAttribute("texCoords"),n||(n=new Sg,this.addVertexAttribute("texCoords",n)));const F=e.loadUInt32();if(F==1){{const a=this.__boundingBox;if(g.versions["zea-engine"].compare([3,9,1])>=0){const U=e.loadUInt16Array(I*3);In([0,I],a.p0,a.diagonal(),U,l)}else{const U=e.loadUInt8Array(I*3);tn([0,I],a.p0,a.diagonal(),U,l)}}if(C){const a=new gg(e.loadFloat32Vec3(),e.loadFloat32Vec3()),U=e.loadUInt8Array(I*3);ln([0,I],a.p0,a.diagonal(),U,C),C.loadSplitValues(e)}if(n){const a=new Yt(e.loadFloat32Vec2(),e.loadFloat32Vec2());if(g.versions["zea-engine"].compare([3,9,1])>=0){const U=e.loadUInt16Array(I*2);nn([0,I],a.p0,a.diagonal(),U,n)}else{const U=e.loadUInt8Array(I*2);Cn([0,I],a.p0,a.diagonal(),U,n)}n.loadSplitValues(e)}}else{const a=[];let U=0;for(let A=0;A<F;A++){const B=e.loadUInt32(),Q={range:[U,U+B],bbox:new gg(e.loadFloat32Vec3(),e.loadFloat32Vec3()),normalsRange:new gg,texCoordsRange:new Yt};C&&Q.normalsRange.set(e.loadFloat32Vec3(),e.loadFloat32Vec3()),n&&Q.texCoordsRange.set(e.loadFloat32Vec2(),e.loadFloat32Vec2()),a.push(Q),U+=B}let d;g.versions["zea-engine"].compare([3,9,1])>=0?d=e.loadUInt16Array(I*3):d=e.loadUInt8Array(I*3);let s=null,o=null;C&&(s=e.loadUInt8Array(I*3)),n&&(o=e.loadUInt8Array(I*2));for(let A=0;A<F;A++){{const B=a[A].bbox;g.versions["zea-engine"].compare([3,9,1])>=0?In(a[A].range,B.p0,B.diagonal(),d,l):tn(a[A].range,B.p0,B.diagonal(),d,l)}if(s){const B=a[A].normalsRange;ln(a[A].range,B.p0,B.diagonal(),s,C)}if(o){const B=a[A].texCoordsRange;g.versions["zea-engine"].compare([3,9,1])>=0?nn([0,I],B.p0,B.diagonal(),o,n):Cn(a[A].range,B.p0,B.diagonal(),o,n)}}C&&C.loadSplitValues(e),n&&n.loadSplitValues(e)}}toJSON(e){const g=super.toJSON(e);(!e||!e.skipTopology)&&(g.numVertices=this.__numVertices||0);const t={};for(const[I,l]of this.__vertexAttributes.entries())(!e||!("skipAttributes"in e)||!e.skipAttributes.includes(I))&&(t[I]=l.toJSON(e));return g.vertexAttributes=t,g}fromJSON(e,g){this.clear(),super.fromJSON(e,g),this.setNumVertices(e.numVertices);for(const t in e.vertexAttributes){let I=this.__vertexAttributes.get(t);const l=e.vertexAttributes[t];I?I.fromJSON(l):console.warn("attr undefined, cannot execute fromJSON()")}this.emit("geomDataTopologyChanged")}toString(){return JSON.stringify(this.toJSON(),null,2)}}class DU extends Ml{constructor(){super("Vec4",4);this.normalized=!1}getValueRef(e){if(e>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+e+". Num Vertices:"+this.data.length/3);const g=e*this.stride,t=this.data.subarray(g,g+this.stride);return new Be(t)}getValue(e){if(e>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+e+". Num Vertices:"+this.data.length/3);const g=e*this.stride,t=this.data.slice(g,g+this.stride);return new Be(t)}setValue(e,g){if(e>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+e+". Num Vertices:"+this.data.length/3);const t=e*this.stride;this.data.set(g.asArray(),t)}getFaceVertexValueRef(e,g){const t=this.getFaceVertexValueRef_array(e,g);return new Be(t)}setFaceVertexValue(e,g,t){this.setFaceVertexValue_array(e,g,t.asArray())}setSplitVertexValue(e,g,t){this.setSplitVertexValue_array(e,g,t.asArray())}}S.register("Vec4Attribute",DU);class KU extends Ml{constructor(){super("Color",4);this.normalized=!1}getValueRef(e){if(e>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+e+". Num Vertices:"+this.data.length/3);const g=e*this.stride,t=this.data.subarray(g,g+this.stride);return new E(t)}getValue(e){if(e>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+e+". Num Vertices:"+this.data.length/3);const g=e*this.stride,t=this.data.slice(g,g+this.stride);return new E(t)}setValue(e,g){if(e>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+e+". Num Vertices:"+this.data.length/3);const t=e*this.stride;this.data.set(g.asArray(),t)}getFaceVertexValueRef(e,g){const t=this.getFaceVertexValueRef_array(e,g);return new E(t)}setFaceVertexValue(e,g,t){this.setFaceVertexValue_array(e,g,t.asArray())}setSplitVertexValue(e,g,t){this.setSplitVertexValue_array(e,g,t.asArray())}}S.register("ColorAttribute",KU);class Rt extends gi{constructor(){super()}clear(){this.setNumVertices(0),this.emit("geomDataTopologyChanged")}readBinary(e,g){super.loadBaseGeomBinary(e,g),this.emit("geomDataChanged")}}S.register("Points",Rt);class sg extends gi{constructor(){super();this.__indices=new Uint32Array}clear(){this.setNumSegments(0),this.setNumVertices(0),this.emit("geomDataTopologyChanged")}getIndices(){return this.__indices}getNumSegments(){return this.__indices.length/2}getNumLineSegments(){return this.__indices.length/2}setNumSegments(e){if(e>this.getNumSegments()){const g=new Uint32Array(e*2);g.set(this.__indices),this.__indices=g}else this.__indices=this.__indices.slice(0,e*2)}setSegmentVertexIndices(e,g,t){if(e>=this.__indices.length/2)throw new Error("Invalid line index:"+e+". Num Segments:"+this.__indices.length/2);this.__indices[e*2+0]=g,this.__indices[e*2+1]=t}getSegmentVertexIndex(e,g){const t=this.getNumSegments();return e<t?this.__indices[e*2+g]:-1}genBuffers(e){const g=super.genBuffers();let t;return g.numVertices<Math.pow(2,8)?t=new Uint8Array(this.__indices):g.numVertices<Math.pow(2,16)?t=new Uint16Array(this.__indices):t=this.__indices,g.indices=t,g}readBinary(e,g){super.loadBaseGeomBinary(e,g),this.setNumSegments(e.loadUInt32());const t=e.loadUInt8();t==1?this.__indices=e.loadUInt8Array():t==2?this.__indices=e.loadUInt16Array():t==4&&(this.__indices=e.loadUInt32Array()),this.emit("geomDataChanged")}toJSON(e){const g=super.toJSON(e);return(!e||!e.skipTopology)&&(g.indices=Array.from(this.__indices)),g}fromJSON(e,g){super.fromJSON(e,g),e.indices&&(this.__indices=Uint32Array.from(e.indices))}}S.register("Lines",sg);class ht extends gi{constructor(){super();this.edgeFaces=[],this.faceEdges=[[]],this.faceCounts=[],this.__faceVertexIndices=new Uint32Array,this.__logTopologyWarnings=!1,this.__edgeAttributes=new Map,this.__faceAttributes=new Map,this.numEdges=0,this.edgeVerts=[],this.vertexEdges=[],this.edgeAngles=new Float32Array,this.edgeVecs=[]}clear(){super.clear(),this.edgeVerts=[],this.vertexEdges=[],this.numEdges=0,this.edgeAngles=new Float32Array,this.emit("geomDataTopologyChanged")}addVertexAttribute(e,g){super.addVertexAttribute(e,g),g.setMesh(this)}getFaceCounts(){return this.faceCounts}getNumFaces(){return this.faceCounts.length==0?0:this.faceCounts.reduce((e,g)=>e+=g)}getNumTriangles(){let e=0,g=1;for(const t of this.faceCounts)e+=t*g,g++;return e}setFaceCounts(e){let g=0,t=3;for(const l of e)g+=l*t,t++;if(this.getNumFaces()==0)this.__faceVertexIndices=new Uint32Array(g);else{const l=new Uint32Array(g);let C=0,n=0;g=0,t=3,e.forEach((F,a)=>{const U=C+Math.min(F,this.faceCounts[a])*t;l.set(this.__faceVertexIndices.slice(C,U),n),C+=this.faceCounts[a]*t,n+=F*t,t++}),this.__faceVertexIndices=l}this.faceCounts=e}getFaceVertexCount(e){let g=0,t=0;return this.faceCounts.some((I,l)=>(g+=I,g>e?(t=l+3,!0):!1)),t}getFaceVertexOffset(e){let g=0,t=0;return this.faceCounts.some((I,l)=>g+I>e?(t+=(e-g)*(l+3),!0):(g+=I,t+=I*(l+3),!1)),t}setFaceVertexIndices(e,g){const t=this.getFaceVertexCount(e);if(g.length!=t)throw new Error(`Invalid indices for face:${e} vertexIndices:${g}. Expected ${t} indices`);const I=this.getFaceVertexOffset(e);this.__faceVertexIndices.set(g,I)}addFace(e){const g=[...this.faceCounts];if(g.length<=e.length-3){for(let l=g.length;l<e.length-3;l++)g[l]=0;g[e.length-3]=1}else g[e.length-3]++;this.setFaceCounts(g);let t=0,I=0;return this.faceCounts.some((l,C)=>C+3==e.length?(t+=l-1,I+=(l-1)*(C+3),!0):(t+=l,I+=l*(C+3),!1)),this.__faceVertexIndices.set(e,I),t}getFaceVertexIndices(e){const g=[],t=this.getFaceVertexOffset(e),I=this.getFaceVertexCount(e);for(let l=0;l<I;l++)g.push(this.__faceVertexIndices[t+l]);return g}getFaceVertexIndex(e,g){const t=this.getFaceVertexOffset(e);return this.__faceVertexIndices[t+g]}addFaceAttribute(e,g){return g.setCount(this.getNumFaces()),this.__faceAttributes.set(e,g),g}hasFaceAttribute(e){return this.__faceAttributes.has(e)}getFaceAttribute(e){return this.__faceAttributes.get(e)}addEdgeAttribute(e,g){g.setCount(this.numEdges),this.__edgeAttributes.set(e,g)}hasEdgeAttribute(e){return this.__edgeAttributes.has(e)}getEdgeAttribute(e){return this.__edgeAttributes.get(e)}genTopologyInfo(){let e={};this.vertexEdges=[],this.edgeFaces=[],this.edgeVerts=[],this.faceEdges=[],this.numEdges=0;const g=this.positions,t=(C,n)=>{let F=C,a=n;if(a<F){const Q=F;F=a,a=Q}const U=F+">"+a;if(U in e)return e[U];const d=g.getValueRef(F),o=g.getValueRef(a).subtract(d),B={edgeIndex:this.edgeFaces.length/2,edgeVec:o};return e[U]=B,this.edgeFaces.push(-1),this.edgeFaces.push(-1),this.edgeVerts.push(F),this.edgeVerts.push(a),this.numEdges++,B},I=(C,n,F)=>{const U=t(C,n).edgeIndex;if(n<C){const d=U*2+0;this.__logTopologyWarnings&&this.edgeFaces[d]!=-1&&console.warn("Edge poly 0 already set. Mesh is non-manifold."),this.edgeFaces[d]=F}else{const d=U*2+1;this.__logTopologyWarnings&&this.edgeFaces[d]!=-1&&console.warn("Edge poly 1 already set. Mesh is non-manifold."),this.edgeFaces[d]=F}F in this.faceEdges||(this.faceEdges[F]=[]),this.faceEdges[F].push(U),this.vertexEdges[C]==null&&(this.vertexEdges[C]=new Set),this.vertexEdges[n]==null&&(this.vertexEdges[n]=new Set),this.vertexEdges[C].add(U),this.vertexEdges[n].add(U)},l=this.getNumFaces();for(let C=0;C<l;C++){const n=this.getFaceVertexIndices(C);for(let F=0;F<n.length;F++){const a=n[F],U=n[(F+1)%n.length];I(a,U,C)}}}computeFaceNormals(){const e=this.positions,g=new Qg;this.addFaceAttribute("normals",g);const t=this.getNumFaces();for(let I=0;I<t;I++){const l=this.getFaceVertexIndices(I),C=e.getValueRef(l[0]);let F=e.getValueRef(l[1]);const a=new b;for(let U=2;U<l.length;U++){const d=e.getValueRef(l[U]),s=F.subtract(C),o=d.subtract(C);a.addInPlace(s.cross(o).normalize()),F=d}a.lengthSquared()<Number.EPSILON||g.setValue(I,a.normalize())}}calculateEdgeAngles(){this.vertexEdges.length==0&&this.genTopologyInfo(),this.computeFaceNormals();const e=this.positions,g=this.getFaceAttribute("normals");this.edgeVecs=[],this.edgeAngles=new Float32Array(this.numEdges);for(let t=0;t<this.edgeFaces.length;t+=2){const I=this.edgeVerts[t],l=this.edgeVerts[t+1],C=e.getValueRef(l).subtract(e.getValueRef(I));C.normalizeInPlace(),this.edgeVecs.push(C);const n=this.edgeFaces[t],F=this.edgeFaces[t+1];if(n==-1||F==-1){this.edgeAngles[t/2]=Math.PI*2;continue}const a=g.getValueRef(n),U=g.getValueRef(F);this.edgeAngles[t/2]=a.angleTo(U)}}computeVertexNormals(e=1){this.calculateEdgeAngles();const g=this.getFaceAttribute("normals"),t=new Qg;this.addVertexAttribute("normals",t);const I=n=>g.getValueRef(n),l=(n,F)=>{t.setValue(n,F)},C=(n,F)=>{let a,U;const d=this.faceEdges[n];for(const s of d)this.edgeVerts[s*2]==F?a?U=this.edgeVecs[s]:a=this.edgeVecs[s]:this.edgeVerts[s*2+1]==F&&(a?U=this.edgeVecs[s]:a=this.edgeVecs[s]);return[a,U]};for(let n=0;n<this.vertexEdges.length;n++){if(this.vertexEdges[n]==null)continue;const F=this.vertexEdges[n],a=[],U=s=>{let o=!1;for(const A of a)if(o=A.includes(s),o)break;o||a.push([s])};for(const s of F){const o=this.edgeFaces[s*2],A=this.edgeFaces[s*2+1];if(o!=-1&&A!=-1&&this.edgeAngles[s]<e){let B=-1,Q=-1;for(let r=0;r<a.length;r++)B==-1&&a[r].includes(o)&&(B=r),Q==-1&&a[r].includes(A)&&(Q=r);B==-1&&Q==-1?a.push([o,A]):B!=-1&&Q!=-1?B!=Q&&(a[B]=a[B].concat(a[Q]),a.splice(Q,1)):(B==-1&&a[Q].push(o),Q==-1&&a[B].push(A));continue}o!=-1&&U(o),A!=-1&&U(A)}a.sort((s,o)=>s.length<o.length?1:s.length>o.length?-1:0);let d=!0;for(const s of a){const o=new b;for(const A of s){const B=C(A,n);let Q;B[0]&&B[1]?(Q=B[0].angleTo(B[1]),o.addInPlace(I(A).scale(Q))):console.warn("variable weight is undefined because faceEdges[0] or faceEdges[1] is undefined")}o.normalizeInPlace(),d?(l(n,o),d=!1):t.setSplitVertexValues(n,s,o.asArray())}}return t}computeHardEdgesIndices(e=1){this.edgeVerts.length==0&&this.calculateEdgeAngles();const g=[],t=I=>{g.push(this.edgeVerts[I]),g.push(this.edgeVerts[I+1])};for(let I=0;I<this.edgeAngles.length;I++)this.edgeAngles[I]>e&&t(I*2);return Uint32Array.from(g)}genBuffers(e){const g={};let t=0;for(const[,U]of this.__vertexAttributes){const d=U.getSplits();for(const s in d){s in g||(g[s]={});const o=d[s];for(const A in o){const B=parseInt(A);B in g[s]||(g[s][B]=t,t++)}}}const l=this.positions.getCount(),C=l+t;let n;(!e||e.includeIndices!=!1)&&(n=this.generateTriangulatedIndices(C,l,g));const F={};for(const[U,d]of this.__vertexAttributes){let s;t==0?s=d.asArray():s=d.generateSplitValues(g,t);const o=d.stride,A=s.length/o;F[U]={values:s,count:A,dimension:o,normalized:U=="normals",dataType:d.getDataTypeName()}}return{numVertices:this.numVertices(),numRenderVerts:C,indices:n,attrBuffers:F}}computeNumTriangles(){let e=3,g=0;for(const t of this.faceCounts)g+=t*(e-2),e++;return g}generateTriangulatedIndices(e,g,t){const I=this.computeNumTriangles();let l;e<Math.pow(2,8)?l=new Uint8Array(I*3):e<Math.pow(2,16)?l=new Uint16Array(I*3):l=new Uint32Array(I*3);let C=0;const n=function(a,U){a in t&&U in t[a]&&(a=g+t[a][U]),l[C]=a,C++},F=this.getNumFaces();for(let a=0;a<F;a++){const U=this.getFaceVertexIndices(a);for(let d=0;d<U.length;d++)d>=3&&(n(U[0],a),n(U[d-1],a)),n(U[d],a)}return l}readBinary(e,g){super.loadBaseGeomBinary(e,g),this.setFaceCounts(Array.from(e.loadUInt32Array()));const t=this.getNumFaces(),I=e.loadUInt8Array(t),l=e.loadSInt32Vec2(),C=e.loadUInt8();let n;if(C==1)n=e.loadUInt8Array();else if(C==2)n=e.loadUInt16Array();else if(C==4)n=e.loadUInt32Array();else throw Error("faceVertexIndexDeltas undefined");let F=3,a=0;const U=this.faceCounts.map((A,B)=>{const Q=a;return a+=A*F,F++,Q});let d=0,s=0;const o=[];for(let A=0;A<t;A++){const B=I[A],Q=U[B],r=B+3;o[A]=Q;for(let R=0;R<r;R++){const V=d+R,h=Q+R,m=n[V]+l.x;if(A==0)this.__faceVertexIndices[h]=m;else{let Z=o[A-1];Z+=R<s?R:s-1,this.__faceVertexIndices[h]=this.__faceVertexIndices[Z]+m}}d+=r,U[B]+=r,s=r}this.hasVertexAttribute("normals")||this.computeVertexNormals(),this.emit("geomDataChanged")}toJSON(e){const g=super.toJSON(e);return(!e||!e.skipTopology)&&(g.faceCounts=Array.from(this.faceCounts),g.faceVertexIndices=Array.from(this.__faceVertexIndices)),g}fromJSON(e,g){super.fromJSON(e,g),e.faceCounts&&(this.faceCounts=e.faceCounts),e.faceVertexIndices&&(this.__faceVertexIndices=Uint32Array.from(e.faceVertexIndices))}}S.register("Mesh",ht);class vI extends Xe{constructor(e){super();this.name=e.name,this.__buffers=e.geomBuffers,this.__buffers.attrBuffers,this.boundingBox=new gg,this.boundingBox.p0.__data=e.bbox.p0.__data,this.boundingBox.p1.__data=e.bbox.p1.__data,this.__metaData=new Map}getNumVertices(){return this.__buffers.numVertices}getBoundingBox(){return this.boundingBox}genBuffers(){return this.__buffers}}class ct extends vI{constructor(e){super(e)}}class Gg extends vI{constructor(e){super(e)}getNumLineSegments(){return this.__buffers.indices.length/2}}class Kg extends vI{constructor(e){super(e)}getNumTriangles(){return this.__buffers.indices.length/3}}class ma extends jg{}S.register("SubGeom",ma);class hI extends vI{constructor(e,g){super(e);this.materials=[],this.subGeomMaterialIndices=new Uint8Array(0),this.subGeoms=[],this.counts=e.geomBuffers.counts;const t=g.getMaterials();e.geomBuffers.materialLibraryIndices.forEach((I,l)=>{this.materials[l]=t[I]}),this.subGeomMaterialIndices=e.geomBuffers.subGeomMaterialIndices,this.__buffers.materials=this.materials}getNumTriangles(){return this.counts.TRIANGLES/3}getNumLineSegments(){return this.counts.LINES/2}getNumPoints(){return this.counts.POINTS}loadMetadata(e,g){e.loadUInt32Array().forEach((I,l)=>{const C=new ma;e.seek(I),C.readBinary(e,g),this.subGeoms[l]=C})}}class LU extends Rt{constructor(){super();this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(e){this.setBoundingBoxDirty(),this.topologyParams.includes(e.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(e)}update(){this.dirtyTopology?(this.rebuild(),this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.dirtyVertices=!1,this.resize(),this.dirtyVertices=!1)}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}genBuffers(e){return this.update(),super.genBuffers(e)}toJSON(e){e||(e={}),e.skipTopology=!0,e.skipAttributes=["positions","normals","texCoords"];const g=super.toJSON(e);return e.skipTopology=!1,e.skipAttributes=[],g}}class MI extends sg{constructor(){super();this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(e){this.setBoundingBoxDirty(),this.topologyParams.includes(e.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(e)}update(){this.dirtyTopology?(this.rebuild(),this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.resize(),this.dirtyVertices=!1,this.resize())}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}genBuffers(e){return this.update(),super.genBuffers()}toJSON(e){e||(e={}),e.skipTopology=!0,e.skipAttributes=["positions","normals","texCoords"];const g=super.toJSON(e);return e.skipTopology=!1,e.skipAttributes=[],g}}class Zt extends ht{constructor(){super();this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(e){this.setBoundingBoxDirty(),this.topologyParams.includes(e.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(e)}update(){this.dirtyTopology?(this.vertexEdges=[],this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.dirtyVertices=!1,this.resize())}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}computeVertexNormals(e=1){return this.update(),super.computeVertexNormals(e)}computeHardEdgesIndices(e=1){return this.update(),super.computeHardEdgesIndices(e)}genBuffers(e){return this.update(),super.genBuffers(e)}toJSON(e){e||(e={}),e.skipTopology=!0,e.skipAttributes=["positions","normals","texCoords"];const g=super.toJSON(e);return e.skipTopology=!1,e.skipAttributes=[],g}}class zU extends LU{constructor(e=1,g=1,t=1,I=1,l=!1){super();if(this.topologyParams=[],isNaN(e)||isNaN(g)||isNaN(t)||isNaN(I))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new k("X",e)),this.sizeYParam=this.addParameter(new k("Y",g)),this.divisionsXParam=this.addParameter(new k("XDivisions",t)),this.divisionsYParam=this.addParameter(new k("YDivisions",I)),l&&this.addVertexAttribute("texCoords",new Sg),this.topologyParams.push("XDivisions"),this.topologyParams.push("YDivisions")}rebuild(){const e=this.divisionsXParam.value,g=this.divisionsYParam.value;this.setNumVertices(e*g);const t=this.getVertexAttribute("texCoords");if(t)for(let I=0;I<g;I++){const l=I/(g-1);for(let C=0;C<e;C++){const n=C/(e-1);t.getValueRef(I*e+C).set(n,l)}}this.resize()}resize(){const e=this.divisionsXParam.value,g=this.divisionsYParam.value,t=this.sizeXParam.value,I=this.sizeYParam.value,l=this.getVertexAttribute("positions");if(!!l)for(let C=0;C<g;C++){const n=(C/(g-1)-.5)*I;for(let F=0;F<e;F++){const a=(F/(e-1)-.5)*t;l.getValueRef(C*e+F).set(a,n,0)}}}}S.register("PointGrid",zU);class ti extends MI{constructor(e=1,g=1){super();if(isNaN(e)||isNaN(g))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new k("X",e)),this.sizeXParam.on("valueChanged",this.resize.bind(this)),this.sizeYParam=this.addParameter(new k("Y",g)),this.sizeYParam.on("valueChanged",this.resize.bind(this)),this.rebuild()}rebuild(){this.setNumVertices(4),this.setNumSegments(4),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,1,2),this.setSegmentVertexIndices(2,2,3),this.setSegmentVertexIndices(3,3,0),this.resize(!1)}resize(){const e=this.sizeXParam.value,g=this.sizeYParam.value,t=this.getVertexAttribute("positions");!t||(t.getValueRef(0).set(-.5*e,-.5*g,0),t.getValueRef(1).set(.5*e,-.5*g,0),t.getValueRef(2).set(.5*e,.5*g,0),t.getValueRef(3).set(-.5*e,.5*g,0))}}S.register("Rect",ti);class Ii extends MI{constructor(e=1,g=32,t=Math.PI*2){super();if(this.topologyParams=[],isNaN(e)||isNaN(g))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new k("Radius",e)),this.angleParam=this.addParameter(new k("Angle",t)),this.sidesParam=this.addParameter(new k("Sides",g>=3?g:3,[3,200],1)),this.topologyParams.push("Sides")}rebuild(){const e=this.sidesParam.value;this.setNumVertices(e);const t=this.angleParam.value<Math.PI*2;t?this.setNumSegments(e-1):this.setNumSegments(e);for(let I=0;I<(t?e-1:e);I++)this.setSegmentVertexIndices(I,I,(I+1)%e);this.resize()}resize(){const e=this.radiusParam.value,g=this.sidesParam.value,I=this.angleParam.value/g,l=this.getVertexAttribute("positions");if(l)for(let C=0;C<g;C++)l.getValueRef(C).set(Math.cos(I*C)*e,Math.sin(I*C)*e,0)}}S.register("Circle",Ii);class _U extends MI{constructor(e=1){super();if(isNaN(e))throw new Error("Invalid geom args");this.sizeParam=this.addParameter(new k("Size",e))}rebuild(){this.setNumVertices(6),this.setNumSegments(3),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,2,3),this.setSegmentVertexIndices(2,4,5),this.resize()}resize(){const e=this.sizeParam.value,g=this.getVertexAttribute("positions");!g||(g.getValueRef(0).set(-.5*e,0,0),g.getValueRef(1).set(.5*e,0,0),g.getValueRef(2).set(0,.5*e,0),g.getValueRef(3).set(0,-.5*e,0),g.getValueRef(4).set(0,0,.5*e),g.getValueRef(5).set(0,0,-.5*e))}}S.register("Cross",_U);class OU extends MI{constructor(e=1,g=1,t=1,I=!1){super();this.sizeXParam=this.addParameter(new k("X",e)),this.sizeYParam=this.addParameter(new k("Y",g)),this.sizeZParam=this.addParameter(new k("Z",t)),this.baseZAtZeroParam=this.addParameter(new Je("BaseZAtZero",I))}rebuild(){this.setNumVertices(8),this.setNumSegments(12),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,1,2),this.setSegmentVertexIndices(2,2,3),this.setSegmentVertexIndices(3,3,0),this.setSegmentVertexIndices(4,4,5),this.setSegmentVertexIndices(5,5,6),this.setSegmentVertexIndices(6,6,7),this.setSegmentVertexIndices(7,7,4),this.setSegmentVertexIndices(8,0,4),this.setSegmentVertexIndices(9,1,5),this.setSegmentVertexIndices(10,2,6),this.setSegmentVertexIndices(11,3,7),this.resize()}resize(){const e=this.sizeXParam.value,g=this.sizeYParam.value,t=this.sizeZParam.value,I=this.baseZAtZeroParam.value,l=this.getVertexAttribute("positions");if(l){let C=.5;I&&(C=1),l.getValueRef(0).set(.5*e,-.5*g,C*t),l.getValueRef(1).set(.5*e,.5*g,C*t),l.getValueRef(2).set(-.5*e,.5*g,C*t),l.getValueRef(3).set(-.5*e,-.5*g,C*t),C=-.5,I&&(C=0),l.getValueRef(4).set(.5*e,-.5*g,C*t),l.getValueRef(5).set(.5*e,.5*g,C*t),l.getValueRef(6).set(-.5*e,.5*g,C*t),l.getValueRef(7).set(-.5*e,-.5*g,C*t)}}}S.register("LinesCuboid",OU);class Wa extends MI{constructor(e=1,g=1,t=10,I=10,l=!1){super();if(this.topologyParams=[],isNaN(e)||isNaN(g)||isNaN(t)||isNaN(I))throw new Error("Invalid geom args");this.xParam=this.addParameter(new k("X",e)),this.yParam=this.addParameter(new k("Y",g)),this.xDivisionsParam=this.addParameter(new k("XDivisions",t)),this.yDivisionsParam=this.addParameter(new k("YDivisions",I)),this.skipCenterLinesParam=this.addParameter(new Je("SkipCenterLines",l)),this.topologyParams.push("XDivisions"),this.topologyParams.push("YDivisions"),this.topologyParams.push("SkipCenterLines")}rebuild(){const e=this.xDivisionsParam.value,g=this.yDivisionsParam.value,t=this.skipCenterLinesParam.value&&e%2==0&&g%2==0;this.setNumVertices((e+g+2-(t?1:0))*2),this.setNumSegments(e+g+2-(t?1:0));let I=0;for(let l=0;l<=e;l++){if(t&&l==e/2)continue;const C=I*2,n=I*2+1;this.setSegmentVertexIndices(I,C,n),I++}for(let l=0;l<=g;l++){if(t&&l==e/2)continue;const C=I*2,n=I*2+1;this.setSegmentVertexIndices(I,C,n),I++}this.resize()}resize(){const e=this.getVertexAttribute("positions"),g=this.xDivisionsParam.value,t=this.yDivisionsParam.value,I=this.xParam.value,l=this.yParam.value,C=this.skipCenterLinesParam.value&&g%2==0&&t%2==0;let n=0;for(let F=0;F<=g;F++){if(C&&F==g/2)continue;const a=n*2,U=n*2+1,d=(F/g-.5)*I;e&&(e.getValueRef(a).set(d,-.5*l,0),e.getValueRef(U).set(d,.5*l,0)),n++}for(let F=0;F<=t;F++){if(C&&F==g/2)continue;const a=n*2,U=n*2+1,d=(F/t-.5)*l;e&&(e.getValueRef(a).set(-.5*I,d,0),e.getValueRef(U).set(.5*I,d,0)),n++}}}S.register("Grid",Wa);class li extends Zt{constructor(e=.5,g=1,t=32,I=!0,l=!0,C=!0){super();if(this.topologyParams=[],isNaN(e)||isNaN(g)||isNaN(t))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new k("Radius",e)),this.heightParam=this.addParameter(new k("Height",g)),this.detailParam=this.addParameter(new k("Detail",t>=3?t:3,[3,200],1)),this.capParam=this.addParameter(new Je("Cap",I)),l&&this.addVertexAttribute("normals",new Qg),C&&this.addVertexAttribute("texCoords",new Sg),this.topologyParams.push("Detail"),this.topologyParams.push("Cap")}rebuild(){const e=this.detailParam.value,g=this.radiusParam.value,t=this.heightParam.value,I=this.capParam.value;let l=e+1;I&&(l+=1),this.setNumVertices(l);const C=e,n=e+1,F=this.getVertexAttribute("positions");if(F){F.getValueRef(C).set(0,0,t);for(let U=0;U<e;U++){const d=-(U/e*2*Math.PI);F.getValueRef(U).set(g*Math.cos(d),g*Math.sin(d),0)}I&&F.getValueRef(n).set(0,0,0)}this.setFaceCounts([e+(I?e:0)]);for(let U=0;U<e;U++){const d=(U+1)%e;this.setFaceVertexIndices(U,[d,U,C])}if(I)for(let U=0;U<e;U++){const d=(U+1)%e;this.setFaceVertexIndices(e+U,[U,d,n])}const a=this.getVertexAttribute("texCoords");if(a){let U=0;for(let d=0;d<e;d++)"setFaceVertexValue"in a&&(a.setFaceVertexValue(U,0,new f((d+1)/e,0)),a.setFaceVertexValue(U,1,new f(d/e,0)),a.setFaceVertexValue(U,2,new f((d+.5)/e,1)));if(I)for(let d=0;d<e;d++)a.setFaceVertexValue(U,0,new f(d/e,0)),a.setFaceVertexValue(U,1,new f((d+1)/e,0)),a.setFaceVertexValue(U,2,new f((d+.5)/e,1)),U++}this.resize()}resize(){const e=this.detailParam.value,g=this.radiusParam.value,t=this.heightParam.value,I=e,l=e+1,C=this.getVertexAttribute("positions");if(C){C.getValueRef(I).set(0,0,t);for(let F=0;F<e;F++){const a=-(F/e*2*Math.PI);C.getValueRef(F).set(g*Math.cos(a),g*Math.sin(a),0)}this.capParam.value&&C.getValueRef(l).set(0,0,0)}this.dirtyTopology=!1,this.dirtyVertices=!1,this.getVertexAttribute("normals")&&this.computeVertexNormals()}}S.register("Cone",li);class Hl extends Zt{constructor(e=1,g=1,t=1,I=!1){super();if(isNaN(e)||isNaN(g)||isNaN(t))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new k("X",e)),this.sizeYParam=this.addParameter(new k("Y",g)),this.sizeZParam=this.addParameter(new k("Z",t)),this.baseZAtZeroParam=this.addParameter(new Je("BaseZAtZero",I)),this.setFaceCounts([0,6]),this.setFaceVertexIndices(0,[0,1,2,3]),this.setFaceVertexIndices(1,[7,6,5,4]),this.setFaceVertexIndices(2,[1,0,4,5]),this.setFaceVertexIndices(3,[3,2,6,7]),this.setFaceVertexIndices(4,[0,3,7,4]),this.setFaceVertexIndices(5,[2,1,5,6]),this.setNumVertices(8),this.addVertexAttribute("normals",new Qg)}rebuild(){const e=this.getVertexAttribute("normals");if(e)for(let g=0;g<6;g++){let t;switch(g){case 0:t=new b(0,0,1);break;case 1:t=new b(0,0,-1);break;case 2:t=new b(1,0,0);break;case 3:t=new b(-1,0,0);break;case 4:t=new b(0,-1,0);break;default:t=new b(0,1,0);break}e.setFaceVertexValue(g,0,t),e.setFaceVertexValue(g,1,t),e.setFaceVertexValue(g,2,t),e.setFaceVertexValue(g,3,t)}this.resize()}resize(){const e=this.sizeXParam.value,g=this.sizeYParam.value,t=this.sizeZParam.value,I=this.baseZAtZeroParam.value;let l=.5;const C=this.getVertexAttribute("positions");I&&(l=1),C&&(C.getValueRef(0).set(.5*e,-.5*g,l*t),C.getValueRef(1).set(.5*e,.5*g,l*t),C.getValueRef(2).set(-.5*e,.5*g,l*t),C.getValueRef(3).set(-.5*e,-.5*g,l*t),l=-.5,I&&(l=0),C.getValueRef(4).set(.5*e,-.5*g,l*t),C.getValueRef(5).set(.5*e,.5*g,l*t),C.getValueRef(6).set(-.5*e,.5*g,l*t),C.getValueRef(7).set(-.5*e,-.5*g,l*t))}}S.register("Cuboid",Hl);class Ci extends Zt{constructor(e=.5,g=1,t=32,I=2,l=!0,C=!1){super();if(this.topologyParams=[],isNaN(e)||isNaN(g)||isNaN(t)||isNaN(I))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new k("Radius",e)),this.heightParam=this.addParameter(new k("Height",g)),this.sidesParam=this.addParameter(new k("Sides",t>=3?t:3,[3,200],1)),this.loopsParam=this.addParameter(new k("Loops",I>=2?I:2,[1,200],1)),this.capsParam=this.addParameter(new Je("Caps",l)),this.baseZAtZeroParam=this.addParameter(new Je("BaseZAtZero",C)),this.addVertexAttribute("texCoords",new Sg),this.addVertexAttribute("normals",new Qg),this.topologyParams.push("Sides"),this.topologyParams.push("Loops"),this.topologyParams.push("Caps")}rebuild(){const e=this.sidesParam.value,g=this.loopsParam.value,t=this.capsParam.value;let I=e*g;t&&(I+=2),this.setNumVertices(I),t?this.setFaceCounts([e*2,e]):this.setFaceCounts([0,e]);let l=0;if(t){for(let F=0;F<e;F++){const a=I-1,U=F,d=(F+1)%e;this.setFaceVertexIndices(l++,[a,U,d])}for(let F=0;F<e;F++){const a=e*(g-1)+F,U=I-2,d=e*(g-1)+(F+1)%e;this.setFaceVertexIndices(l++,[a,U,d])}}for(let F=0;F<g-1;F++)for(let a=0;a<e;a++){const U=e*F+(a+1)%e,d=e*F+a,s=e*(F+1)+a,o=e*(F+1)+(a+1)%e;this.setFaceVertexIndices(l++,[U,d,s,o])}const C=this.getVertexAttribute("normals");if(C){if(l=0,t){const F=new b(0,0,-1);for(let a=0;a<e;a++)C.setFaceVertexValue(l,0,F),C.setFaceVertexValue(l,1,F),C.setFaceVertexValue(l,2,F),l++;F.set(0,0,1);for(let a=0;a<e;a++)C.setFaceVertexValue(l,0,F),C.setFaceVertexValue(l,1,F),C.setFaceVertexValue(l,2,F),l++}for(let F=0;F<g-1;F++)for(let a=0;a<e;a++){let U=a/e*2*Math.PI;const d=new b(Math.sin(U),Math.cos(U),0);C.setFaceVertexValue(l,0,d),C.setFaceVertexValue(l,1,d),U=(a+1)/e*2*Math.PI;const s=new b(Math.sin(U),Math.cos(U),0);C.setFaceVertexValue(l,2,s),C.setFaceVertexValue(l,3,s),l++}}const n=this.getVertexAttribute("texCoords");if(n){if(l=0,t){for(let F=0;F<e;F++)n.setFaceVertexValue(l,0,new f(F/e,0)),n.setFaceVertexValue(l,1,new f((F+1)/e,0)),n.setFaceVertexValue(l,2,new f((F+.5)/e,1)),l++;for(let F=0;F<e;F++)n.setFaceVertexValue(l,0,new f(F/e,0)),n.setFaceVertexValue(l,1,new f((F+1)/e,0)),n.setFaceVertexValue(l,2,new f((F+.5)/e,1)),l++}for(let F=0;F<e;F++)n.setFaceVertexValue(l,0,new f((F+1)/e,0)),n.setFaceVertexValue(l,2,new f((F+1)/e,1)),n.setFaceVertexValue(l,1,new f(F/e,0)),n.setFaceVertexValue(l,3,new f(F/e,1)),l++}this.resize()}resize(){const e=this.sidesParam.value,g=this.loopsParam.value,t=this.radiusParam.value,I=this.heightParam.value,l=this.capsParam.value,C=this.baseZAtZeroParam.value;let n=e*g;l&&(n+=2);let F=0,a=.5;C&&(a=0);const U=this.getVertexAttribute("positions");if(U){for(let d=0;d<g;d++){const s=d/(g-1)*I-I*a;for(let o=0;o<e;o++){const A=o/e*2*Math.PI;U.getValueRef(F).set(Math.sin(A)*t,Math.cos(A)*t,s),F++}}l&&(U.getValueRef(n-1).set(0,0,I*(C?0:-.5)),U.getValueRef(n-2).set(0,0,I*(C?1:.5)))}this.dirtyTopology=!1,this.dirtyVertices=!1,this.computeVertexNormals()}}S.register("Cylinder",Ci);class PU extends Zt{constructor(e=.5,g=32){super();if(this.topologyParams=[],isNaN(e)||isNaN(g))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new k("Radius",e)),this.sidesParam=this.addParameter(new k("Sides",g>=3?g:3,[3,200],1)),this.addVertexAttribute("texCoords",new Sg),this.addVertexAttribute("normals",new Qg),this.topologyParams.push("Sides")}rebuild(){const e=this.sidesParam.value;this.setNumVertices(e+1),this.setFaceCounts([e]);const g=this.getVertexAttribute("positions");g&&g.getValueRef(0).set(0,0,0);for(let l=0;l<e;l++){const C=l%e+1,n=(l+1)%e+1;this.setFaceVertexIndices(l,[0,C,n])}const t=this.getVertexAttribute("normals");if(t){const l=new b(0,0,1);t.setValue(0,l);for(let C=0;C<e;C++)t.setValue(C+1,l)}const I=this.getVertexAttribute("texCoords");if(I){I.getValueRef(0).set(.5,.5);for(let l=0;l<e;l++){const C=l/e*2*Math.PI;I.getValueRef(l+1).set(Math.sin(C)*.5+.5,Math.cos(C)*.5+.5)}}this.resize()}resize(){const e=this.sidesParam.value,g=this.radiusParam.value,t=this.getVertexAttribute("positions");if(t)for(let I=0;I<e;I++){const l=I/e*2*Math.PI;t.getValueRef(I+1).set(Math.sin(l)*g,Math.cos(l)*g,0)}}}S.register("Disc",PU);class Dt extends Zt{constructor(e=1,g=1,t=1,I=1,l=!0,C=!0){super();if(this.topologyParams=[],isNaN(e)||isNaN(g)||isNaN(t)||isNaN(I))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new k("SizeX",e)),this.sizeYParam=this.addParameter(new k("SizeY",g)),this.detailXParam=this.addParameter(new k("DetailX",t)),this.detailYParam=this.addParameter(new k("DetailY",I)),l&&this.addVertexAttribute("normals",new Qg),C&&this.addVertexAttribute("texCoords",new Sg),this.topologyParams.push("DetailX"),this.topologyParams.push("DetailY")}rebuild(){const e=this.detailXParam.value,g=this.detailYParam.value;this.setNumVertices((e+1)*(g+1)),this.setFaceCounts([0,e*g]);let t=0;for(let n=0;n<g;n++)for(let F=0;F<e;F++){const a=(e+1)*(n+1)+F,U=(e+1)*n+F,d=(e+1)*n+(F+1),s=(e+1)*(n+1)+(F+1);this.setFaceVertexIndices(t,[a,U,d,s]),t=t+1}let I=0;const l=this.getVertexAttribute("normals");if(l)for(let n=0;n<=g;n++)for(let F=0;F<=e;F++)l.getValueRef(I).set(0,0,1),I++;I=0;const C=this.getVertexAttribute("texCoords");if(C)for(let n=0;n<=g;n++){const F=n/g;for(let a=0;a<=e;a++){const U=a/e;C.getValueRef(I).set(U,F),I++}}this.resize()}resize(){const e=this.sizeXParam.value,g=this.sizeYParam.value,t=this.detailXParam.value,I=this.detailYParam.value,l=this.getVertexAttribute("positions");if(!l)return;let C=0;for(let n=0;n<=I;n++){const F=(n/I-.5)*g;for(let a=0;a<=t;a++){const U=(a/t-.5)*e;l.getValueRef(C).set(U,F,0),C++}}}}S.register("Plane",Dt);class Kt extends Zt{constructor(e=1,g=12,t=12,I=!0,l=!0){super();if(this.radiusParam=new k("Radius",1),this.sidesParam=new k("Sides",12,[3,200],1),this.loopsParam=new k("Loops",6,[3,200],1),isNaN(e)||isNaN(g)||isNaN(t))throw new Error("Invalid geom args");this.addParameter(this.radiusParam),this.addParameter(this.sidesParam),this.addParameter(this.loopsParam),this.radiusParam.value=e,this.sidesParam.value=g,this.loopsParam.value=t,I&&this.addVertexAttribute("normals",new Qg),l&&this.addVertexAttribute("texCoords",new Sg),this.topologyParams.push("Sides"),this.topologyParams.push("Loops")}rebuild(){const e=this.radiusParam.value,g=this.sidesParam.value,t=this.loopsParam.value,I=2+g*t,l=g*2,C=g*t;this.setNumVertices(I),this.setFaceCounts([l,C]);const n=this.getVertexAttribute("positions"),F=this.getVertexAttribute("normals"),a=new b(0,0,1);let U=0;if(!n)return;n.getValueRef(U).set(0,0,e),F&&F.getValueRef(U).set(0,0,1),U++;for(let o=0;o<t;o++){const A=(o+1)/(t+1)*Math.PI;for(let B=0;B<g;B++){const Q=-(B/g*2*Math.PI);a.set(Math.sin(A)*Math.cos(Q),Math.sin(A)*Math.sin(Q),Math.cos(A)),n.getValueRef(U).setFromOther(a.scale(e)),F&&F.getValueRef(U).setFromOther(a),U++}}n.getValueRef(U).set(0,0,-e),F&&F.getValueRef(U).set(0,0,-1),U++;const d=this.getVertexAttribute("texCoords");let s=0;for(let o=0;o<g;o++){const B=(o+1)%g+1,Q=o+1;if(this.setFaceVertexIndices(s,[0,B,Q]),d){const r=new f(.5,0),R=new f((o+1)/(g-1),1/(t+1)),V=new f(o/(g-1),1/(t+1));d.setFaceVertexValue(s,0,r),d.setFaceVertexValue(s,1,R),d.setFaceVertexValue(s,2,V)}s++}for(let o=0;o<g;o++){const A=I-1,B=g*(t-1)+(o+1)%g+1,Q=g*(t-1)+o+1;if(this.setFaceVertexIndices(s,[A,Q,B]),d){const r=new f(.5,1),R=new f((o+1)/(g-1),1-1/(t+1)),V=new f(o/(g-1),1-1/(t+1));d.setFaceVertexValue(s,0,r),d.setFaceVertexValue(s,1,R),d.setFaceVertexValue(s,2,V)}s++}for(let o=0;o<t-1;o++)for(let A=0;A<g;A++){const B=g*o+A+1,Q=g*o+(A+1)%g+1,r=g*(o+1)+(A+1)%g+1,R=g*(o+1)+A+1;this.setFaceVertexIndices(s,[B,Q,r,R]),d&&(d.setFaceVertexValue(s,0,new f(A/g,(o+1)/t)),d.setFaceVertexValue(s,1,new f((A+1)/g,(o+1)/t)),d.setFaceVertexValue(s,2,new f((A+1)/g,(o+2)/t)),d.setFaceVertexValue(s,3,new f(A/g,(o+2)/t))),s++}}resize(){const e=this.radiusParam.value,g=this.sidesParam.value,t=this.loopsParam.value;if(!g||!t){console.warn("resize() failed");return}const I=this.getVertexAttribute("positions"),l=this.getVertexAttribute("normals");let C=0;const n=new b(0,0,1);I.getValueRef(C).set(0,0,e),l&&l.getValueRef(C).set(0,0,1),C++;for(let F=0;F<t;F++){const a=(F+1)/(t+1)*Math.PI;for(let U=0;U<g;U++){const d=-(U/g*2*Math.PI);n.set(Math.sin(a)*Math.cos(d),Math.sin(a)*Math.sin(d),Math.cos(a)),I.getValueRef(C).setFromOther(n.scale(e)),l&&l.getValueRef(C).setFromOther(n),C++}}I.getValueRef(C).set(0,0,-e),l&&l.getValueRef(C).set(0,0,-1),C++}}S.register("Sphere",Kt);class ba extends Zt{constructor(e=.5,g=3,t=32,I=Math.PI*2){super();if(isNaN(e)||isNaN(g)||isNaN(t))throw new Error("Invalid geom args");this.innerRadiusParam=this.addParameter(new k("InnerRadius",e)),this.outerRadiusParam=this.addParameter(new k("OuterRadius",g)),this.detailParam=this.addParameter(new k("Detail",t>=3?t:3,[3,200],1)),this.arcAngleParam=this.addParameter(new k("ArcAngle",I)),this.addVertexAttribute("texCoords",new Sg),this.addVertexAttribute("normals",new Qg),this.topologyParams.push("Detail"),this.topologyParams.push("ArcAngle")}rebuild(){const g=this.arcAngleParam.value<2*Math.PI,t=this.detailParam.value,I=t,l=t*2+(g?1:0),C=I*l;this.setNumVertices(C),this.setFaceCounts([0,I*l]);const n=this.getVertexAttribute("texCoords");if(n){let F=0;for(let a=0;a<(g?l-1:l);a++)for(let U=0;U<I;U++){const d=(a+1)%l,s=(U+1)%I,o=I*a+U,A=I*a+s,B=I*d+s,Q=I*d+U;this.setFaceVertexIndices(F,[o,A,B,Q]),n.setFaceVertexValue(F,0,new f(a/l,U/l)),n.setFaceVertexValue(F,1,new f(a/l,(U+1)/l)),n.setFaceVertexValue(F,2,new f((a+1)/l,(U+1)/l)),n.setFaceVertexValue(F,3,new f((a+1)/l,U/l)),F++}}this.resize()}resize(){const e=this.innerRadiusParam.value,g=this.outerRadiusParam.value,t=this.arcAngleParam.value,I=this.detailParam.value,l=t<2*Math.PI,C=I,n=I*2+(l?1:0),F=this.getVertexAttribute("positions"),a=this.getVertexAttribute("normals");if(!F||!a)return;let U=0;for(let d=0;d<n;d++){const s=-(d/(l?n-1:n)*t),o=Math.cos(s),A=Math.sin(s);for(let B=0;B<C;B++){const Q=B/C*2*Math.PI,r=Math.sin(Q),R=Math.cos(Q),V=g+R*e;F.getValueRef(U).set(o*V,A*V,e*r),a.getValueRef(U).set(o*R,A*R,r),U++}}}}S.register("Torus",ba);class ii extends ug{constructor(e){super(e);this.__data=new Uint8Array(4),this.format="RGBA",this.type="UNSIGNED_BYTE",this.width=1,this.height=1}isLoaded(){return this.loaded}isStream(){return!1}setData(e,g,t){this.__data!=t&&(this.width=e,this.height=g,this.__data=t,this.loaded?this.emit("updated"):(this.loaded=!0,this.emit("loaded")))}getParams(){const e=super.getParams();return e.data=this.__data,e}}S.register("DataImage2D",ii);S.register("DataImage",ii);const BC={};class qg extends ug{constructor(e,g="",t={}){super(e);this.__data=null,this.type="UNSIGNED_BYTE",this.crossOrigin="anonymous",g&&g!=""&&this.load(g)}setCrossOrigin(e){this.crossOrigin=e}getDOMElement(){return this.__data}load(e,g="RGB"){return new Promise((t,I)=>{if(!g){const C=e.lastIndexOf(".");C!=-1&&e.substring(C).toLowerCase()==".png"&&(g="RGBA")}this.format=g,this.loaded=!1;const l=()=>{this.url=e,this.width=this.__data.width,this.height=this.__data.height,this.loaded=!0,this.emit("loaded"),t()};e in BC?(this.__data=BC[e],this.__data.complete?l():(this.__data.addEventListener("load",l),this.__data.addEventListener("error",I))):(this.__data=new Image,this.__data.crossOrigin=this.crossOrigin,this.__data.src=e,this.__data.addEventListener("load",l),this.__data.addEventListener("error",I),BC[e]=this.__data)})}setImageURL(e,g="RGB"){this.load(e,g)}getParams(){const e=super.getParams();return this.loaded&&(e.data=this.__data),e}readBinary(e,g){this.setName(e.loadStr());const t=e.loadStr();if(typeof t=="string"&&t!=""){const I=g.url.substring(0,g.url.lastIndexOf("/"));this.load(I+"/"+t)}}}S.register("FileImage2D",qg);S.register("FileImage",qg);class jU extends qg{constructor(e,g,t){super(e,g,t)}}S.register("LDRImage",jU);class ni extends ug{constructor(e,g={}){super(e);this.exposure=1,this.hdrTint=new E(1,1,1,1);let t;e!=null&&e.includes(".")&&(t=e,this.setName(e.substring(e.lastIndexOf("/")+1,e.lastIndexOf(".")))),this.type="FLOAT",t&&this.load(t)}__decodeData(e){return new Promise((g,t)=>{const I=e.ldr,l=e.cdm,C=new Blob([I.buffer]),n=new Image;n.onload=()=>{this.width=n.width,this.height=n.height,this.__data={ldr:n,cdm:l},this.loaded?this.emit("updated"):(this.loaded=!0,this.emit("loaded")),g()},n.src=URL.createObjectURL(C)})}load(e){return this.loaded=!1,new Promise((g,t)=>{const I=e.lastIndexOf("/")>-1?e.substring(e.lastIndexOf("/")+1):"",l=I.substring(0,I.lastIndexOf("."));this.getName()==""&&this.setName(l),this.type="FLOAT",ee.loadFile("archive",e).then(C=>{if(!C.ldr||!C.cdm)for(const n in C)n.endsWith(".jpg")?(C.ldr=C[n],delete C[n]):n.endsWith(".bin")&&(C.cdm=C[n],delete C[n]);this.__decodeData(C).then(()=>{g()})},C=>{this.emit("error",C),t(C)})})}isStream(){return!1}getParams(){const e=super.getParams();return this.loaded&&(e.data=this.__data,e.exposure=this.exposure),e}setHDRTint(e){this.hdrTint=e}getHDRTint(){return this.hdrTint}readBinary(e,g){this.setName(e.loadStr());let t=e.loadStr();typeof t=="string"&&t!=""&&this.load(t)}}S.register("HDRImage",ni);class qU extends qg{constructor(e,g,t){super(e,g,t);this.videoElem=new HTMLVideoElement,this.muteParam=new Je("Mute",!1),this.loopParam=new Je("Loop",!0),this.spatializeAudioParam=new Je("SpatializeAudio",!0),this.refDistanceParam=new k("refDistance",2),this.maxDistanceParam=new k("maxDistance",1e4),this.rolloffFactorParam=new k("rolloffFactor",1),this.coneInnerAngleParam=new k("coneInnerAngle",360),this.coneOuterAngleParam=new k("coneOuterAngle",0),this.coneOuterGainParam=new k("coneOuterGain",1),this.gainParam=new k("Gain",2),this.format="RGB",this.type="UNSIGNED_BYTE",this.addParameter(this.muteParam),this.addParameter(this.loopParam),this.addParameter(this.spatializeAudioParam),this.addParameter(this.refDistanceParam),this.addParameter(this.maxDistanceParam),this.addParameter(this.rolloffFactorParam),this.addParameter(this.coneInnerAngleParam),this.addParameter(this.coneOuterAngleParam),this.addParameter(this.coneOuterGainParam),this.addParameter(this.gainParam).setRange([0,5])}getAudioSource(){return this.videoElem}load(e,g="RGB"){return new Promise((t,I)=>{ee.incrementWorkload(1),this.videoElem.style.display="none",this.videoElem.preload="auto",this.videoElem.crossOrigin="anonymous",document.body.appendChild(this.videoElem),this.videoElem.addEventListener("loadedmetadata",()=>{this.videoElem.muted=this.muteParam.value,this.muteParam.on("valueChanged",()=>{this.videoElem.muted=this.muteParam.value}),this.videoElem.loop=this.loopParam.value,this.loopParam.on("valueChanged",()=>{this.videoElem.loop=this.loopParam.value}),this.width=this.videoElem.videoHeight,this.height=this.videoElem.videoWidth,this.loaded=!0,ee.incrementWorkDone(1),this.emit("loaded"),t(l);let C=0;const n=29.97,F=()=>{if(this.videoElem.paused||this.videoElem.ended)return;const a=Math.floor(this.videoElem.currentTime*n);C!=a&&(this.emit("updated"),C=a),setTimeout(F,20)};F()},!1),this.videoElem.src=e;const l=this.videoElem.play();l!==void 0&&l.then(C=>{console.log("Autoplay started!")}).catch(()=>{console.log("Autoplay was prevented.")})})}getParams(){const e=super.getParams();return this.loaded&&(e.data=this.videoElem),e}}S.register("LDRVideo",qU);function $g(i){this.data=i,this.pos=0}$g.prototype.readByte=function(){return this.data[this.pos++]};$g.prototype.peekByte=function(){return this.data[this.pos]};$g.prototype.readBytes=function(i){for(var e=new Array(i),g=0;g<i;g++)e[g]=this.readByte();return e};$g.prototype.peekBytes=function(i){for(var e=new Array(i),g=0;g<i;g++)e[g]=this.data[this.pos+g];return e};$g.prototype.readString=function(i){for(var e="",g=0;g<i;g++)e+=String.fromCharCode(this.readByte());return e};$g.prototype.readBitArray=function(){for(var i=[],e=this.readByte(),g=7;g>=0;g--)i.push(!!(e&1<<g));return i};$g.prototype.readUnsigned=function(i){var e=this.readBytes(2);return i?(e[1]<<8)+e[0]:(e[0]<<8)+e[1]};function HI(i){this.stream=new $g(i),this.output={}}HI.prototype.parse=function(i){return this.parseParts(this.output,i),this.output};HI.prototype.parseParts=function(i,e){for(var g=0;g<e.length;g++){var t=e[g];this.parsePart(i,t)}};HI.prototype.parsePart=function(i,e){var g=e.label,t;if(!(e.requires&&!e.requires(this.stream,this.output,i)))if(e.loop){for(var I=[];e.loop(this.stream);){var l={};this.parseParts(l,e.parts),I.push(l)}i[g]=I}else e.parts?(t={},this.parseParts(t,e.parts),i[g]=t):e.parser?(t=e.parser(this.stream,this.output,i),e.skip||(i[g]=t)):e.bits&&(i[g]=this.parseBits(e.bits))};function $U(i){return i.reduce(function(e,g){return e*2+g},0)}HI.prototype.parseBits=function(i){var e={},g=this.stream.readBitArray();for(var t in i){var I=i[t];I.length?e[t]=$U(g.slice(I.index,I.index+I.length)):e[t]=g[I.index]}return e};var De={readByte:function(){return function(i){return i.readByte()}},readBytes:function(i){return function(e){return e.readBytes(i)}},readString:function(i){return function(e){return e.readString(i)}},readUnsigned:function(i){return function(e){return e.readUnsigned(i)}},readArray:function(i,e){return function(g,t,I){for(var l=e(g,t,I),C=new Array(l),n=0;n<l;n++)C[n]=g.readBytes(i);return C}}},xl={label:"blocks",parser:function(i){for(var e=[],g=0,t=i.readByte();t!==g;t=i.readByte())e=e.concat(i.readBytes(t));return e}},ed={label:"gce",requires:function(i){var e=i.peekBytes(2);return e[0]===33&&e[1]===249},parts:[{label:"codes",parser:De.readBytes(2),skip:!0},{label:"byteSize",parser:De.readByte()},{label:"extras",bits:{future:{index:0,length:3},disposal:{index:3,length:3},userInput:{index:6},transparentColorGiven:{index:7}}},{label:"delay",parser:De.readUnsigned(!0)},{label:"transparentColorIndex",parser:De.readByte()},{label:"terminator",parser:De.readByte(),skip:!0}]},gd={label:"image",requires:function(i){var e=i.peekByte();return e===44},parts:[{label:"code",parser:De.readByte(),skip:!0},{label:"descriptor",parts:[{label:"left",parser:De.readUnsigned(!0)},{label:"top",parser:De.readUnsigned(!0)},{label:"width",parser:De.readUnsigned(!0)},{label:"height",parser:De.readUnsigned(!0)},{label:"lct",bits:{exists:{index:0},interlaced:{index:1},sort:{index:2},future:{index:3,length:2},size:{index:5,length:3}}}]},{label:"lct",requires:function(i,e,g){return g.descriptor.lct.exists},parser:De.readArray(3,function(i,e,g){return Math.pow(2,g.descriptor.lct.size+1)})},{label:"data",parts:[{label:"minCodeSize",parser:De.readByte()},xl]}]},td={label:"text",requires:function(i){var e=i.peekBytes(2);return e[0]===33&&e[1]===1},parts:[{label:"codes",parser:De.readBytes(2),skip:!0},{label:"blockSize",parser:De.readByte()},{label:"preData",parser:function(i,e,g){return i.readBytes(g.text.blockSize)}},xl]},Id={label:"application",requires:function(i,e,g){var t=i.peekBytes(2);return t[0]===33&&t[1]===255},parts:[{label:"codes",parser:De.readBytes(2),skip:!0},{label:"blockSize",parser:De.readByte()},{label:"id",parser:function(i,e,g){return i.readString(g.blockSize)}},xl]},ld={label:"comment",requires:function(i,e,g){var t=i.peekBytes(2);return t[0]===33&&t[1]===254},parts:[{label:"codes",parser:De.readBytes(2),skip:!0},xl]},Cd={label:"frames",parts:[ed,Id,ld,gd,td],loop:function(i){var e=i.peekByte();return e===33||e===44}},id=[{label:"header",parts:[{label:"signature",parser:De.readString(3)},{label:"version",parser:De.readString(3)}]},{label:"lsd",parts:[{label:"width",parser:De.readUnsigned(!0)},{label:"height",parser:De.readUnsigned(!0)},{label:"gct",bits:{exists:{index:0},resolution:{index:1,length:3},sort:{index:4},size:{index:5,length:3}}},{label:"backgroundColorIndex",parser:De.readByte()},{label:"pixelAspectRatio",parser:De.readByte()}]},{label:"gct",requires:function(i,e){return e.lsd.gct.exists},parser:De.readArray(3,function(i,e){return Math.pow(2,e.lsd.gct.size+1)})},Cd],nd=id;function ai(i){var e=new Uint8Array(i),g=new HI(e);this.raw=g.parse(nd),this.raw.hasImages=!1;for(var t=0;t<this.raw.frames.length;t++)if(this.raw.frames[t].image){this.raw.hasImages=!0;break}}ai.prototype.decompressFrame=function(i,e){if(i>=this.raw.frames.length)return null;var g=this.raw.frames[i];if(g.image){var t=g.image.descriptor.width*g.image.descriptor.height,I=C(g.image.data.minCodeSize,g.image.data.blocks,t);g.image.descriptor.lct.interlaced&&(I=n(I,g.image.descriptor.width));var l={pixels:I,dims:{top:g.image.descriptor.top,left:g.image.descriptor.left,width:g.image.descriptor.width,height:g.image.descriptor.height}};return g.image.descriptor.lct&&g.image.descriptor.lct.exists?l.colorTable=g.image.lct:l.colorTable=this.raw.gct,g.gce&&(l.delay=(g.gce.delay||10)*10,l.disposalType=g.gce.extras.disposal,g.gce.extras.transparentColorGiven&&(l.transparentIndex=g.gce.transparentColorIndex)),e&&(l.patch=F(l)),l}return null;function C(a,U,d){var s=4096,o=-1,A=d,B,Q,r,R,V,h,m,Z,c,W,u,J,N,X,y,p,_=new Array(d),ae=new Array(s),ne=new Array(s),K=new Array(s+1);for(J=a,Q=1<<J,V=Q+1,B=Q+2,m=o,R=J+1,r=(1<<R)-1,c=0;c<Q;c++)ae[c]=0,ne[c]=c;for(u=Z=N=X=p=y=0,W=0;W<A;){if(X===0){if(Z<R){u+=U[y]<<Z,Z+=8,y++;continue}if(c=u&r,u>>=R,Z-=R,c>B||c==V)break;if(c==Q){R=J+1,r=(1<<R)-1,B=Q+2,m=o;continue}if(m==o){K[X++]=ne[c],m=c,N=c;continue}for(h=c,c==B&&(K[X++]=N,c=m);c>Q;)K[X++]=ne[c],c=ae[c];N=ne[c]&255,K[X++]=N,B<s&&(ae[B]=m,ne[B]=N,B++,(B&r)===0&&B<s&&(R++,r+=B)),m=h}X--,_[p++]=K[X],W++}for(W=p;W<A;W++)_[W]=0;return _}function n(a,U){for(var d=new Array(a.length),s=a.length/U,o=function(V,h){var m=a.slice(h*U,(h+1)*U);d.splice.apply(d,[V*U,U].concat(m))},A=[0,4,2,1],B=[8,8,4,2],Q=0,r=0;r<4;r++)for(var R=A[r];R<s;R+=B[r])o(R,Q),Q++;return d}function F(a){for(var U=a.pixels.length,d=new Uint8ClampedArray(U*4),s=0;s<U;s++){var o=s*4,A=a.pixels[s],B=a.colorTable[A];d[o]=B[0],d[o+1]=B[1],d[o+2]=B[2],d[o+3]=A!==a.transparentIndex?255:0}return d}};ai.prototype.decompressFrames=function(i){for(var e=[],g=0;g<this.raw.frames.length;g++){var t=this.raw.frames[g];t.image&&e.push(this.decompressFrame(g,i))}return e};const QC={};class ad extends qg{constructor(e,g="",t={}){super(e,g,t);this.streamAtlasDescParam=new wt("StreamAtlasDesc"),this.streamAtlasIndexParam=new k("StreamAtlasIndex",0),this.format="RGBA",this.type="UNSIGNED_BYTE",this.__streamAtlas=!0,this.addParameter(this.streamAtlasDescParam),this.addParameter(this.streamAtlasIndexParam);const I=this.streamAtlasIndexParam;I.setRange([0,1]);let l,C=0;const n=F=>{I.value=C,l&&setTimeout(()=>n(F),this.getFrameDelay(C)),C=(C+1)%F};this.play=()=>{this.__resourcePromise.then(()=>{l=!0;let F=I.getRange();if(!F){console.warn("numFrames is null");return}const a=F[1];n(a)})},this.stop=()=>{l=!1}}getFrameDelay(e){return this.__unpackedData.frameDelays[e]*10}load(e,g="RGB"){return e in QC?(this.__resourcePromise=QC[e],this.__resourcePromise):(this.__resourcePromise=new Promise((t,I)=>{ee.incrementWorkload(1),Ra(e,l=>{console.warn("Unpacking Gif client side:"+e);const C=performance.now(),F=new ai(l).decompressFrames(!0),a=Math.sqrt(F.length),U=[a,a];q.fract(a)>0&&(U[0]=Math.floor(U[0]+1),q.fract(a)>.5?U[1]=Math.floor(U[1]+1):U[1]=Math.floor(U[1]));const d=F[0].dims.width,s=F[0].dims.height,o=document.createElement("canvas"),A=o.getContext("2d"),B=document.createElement("canvas"),Q=B.getContext("2d");B.width=d,B.height=s;const r=document.createElement("canvas"),R=r.getContext("2d");r.width=U[0]*d,r.height=U[1]*s;let V;const h=[],m=(W,u)=>{const J=W.dims;h.push(W.delay/10),(!V||J.width!=V.width||J.height!=V.height)&&(o.width=J.width,o.height=J.height,V=A==null?void 0:A.createImageData(J.width,J.height)),V.data.set(W.patch),A==null||A.putImageData(V,0,0),W.disposalType==2&&(Q==null||Q.clearRect(0,0,B.width,B.height)),Q==null||Q.drawImage(o,J.left,J.top),R==null||R.drawImage(B,u%U[0]*d,Math.floor(u/U[0])*s)};for(let W=0;W<F.length;W++)m(F[W],W);ee.incrementWorkDone(1);const Z=R==null?void 0:R.getImageData(0,0,r.width,r.height),c=performance.now()-C;console.log(`Decode GIF '${e}' time:`+c),t({width:r.width,height:r.height,atlasSize:U,frameRange:[0,F.length],frameDelays:h,imageData:Z})},l=>{const C="Unable to Load URL:"+l+":"+e;console.warn(C),I(C)})}),QC[e]=this.__resourcePromise,this.__resourcePromise.then(t=>{this.width=t.width,this.height=t.height,this.streamAtlasDescParam.value=new Be(t.atlasSize[0],t.atlasSize[1],0,0),this.streamAtlasIndexParam.setRange(t.frameRange),this.__unpackedData=t,this.__data=t.imageData,this.loaded=!0,this.emit("loaded")}),this.__resourcePromise)}}S.register("GIFImage",ad);class Fi extends ni{constructor(e,g={}){super(e,g);this.headlightModeParam=new Je("HeadLightMode",!1),this.addParameter(this.headlightModeParam),this.utf8decoder=new TextDecoder,this.shCoeffs=[]}__decodeData(e){const g=e.samples;if(g&&(this.luminanceData=JSON.parse(this.utf8decoder.decode(g)),this.luminanceData.shCoeffs))for(let t=0;t<9;t++)this.shCoeffs[t]=new E(this.luminanceData.shCoeffs[t*3+0],this.luminanceData.shCoeffs[t*3+1],this.luminanceData.shCoeffs[t*3+2]);return super.__decodeData(e)}dirToLuminance(e){const g=e.x,t=e.y,I=e.z,l=this.shCoeffs[0].scale(.886227);return l.addInPlace(this.shCoeffs[1].scale(2*.511664*t)),l.addInPlace(this.shCoeffs[2].scale(2*.511664*I)),l.addInPlace(this.shCoeffs[3].scale(2*.511664*g)),l.addInPlace(this.shCoeffs[4].scale(2*.429043*g*t)),l.addInPlace(this.shCoeffs[5].scale(2*.429043*t*I)),l.addInPlace(this.shCoeffs[6].scale(.743125*I*I-.247708)),l.addInPlace(this.shCoeffs[7].scale(2*.429043*g*I)),l.addInPlace(this.shCoeffs[8].scale(.429043*(g*g-t*t))),l.luminance()}}S.register("EnvMap",Fi);function Fd(){if(!globalThis.navigator)return"en";const i=new URLSearchParams(window.location.search);if(i.has("lang"))return i.get("lang");const e=globalThis.navigator;let g,t;const I=l=>l.startsWith("en")?"En":l.startsWith("es")?"Es":l.startsWith("fr")?"Fr":l.startsWith("gb")||l.startsWith("de")?"Gb":l;if(Array.isArray(e.languages)){for(g=0;g<e.languages.length;g++)if(t=e.languages[g],t&&t.length)return I(t)}return null}class Ud extends Xe{constructor(){super();this.__labelLibraries={},this.__language=Fd(),this.__foundLabelLibraries={}}loadLibrary(e,g){const t=e.substring(0,e.lastIndexOf("."));if(this.__foundLabelLibraries[t]=g,e.endsWith(".labels"))MC(g,I=>{this.__labelLibraries[t]=JSON.parse(I),this.emit("labelLibraryLoaded",{library:t})});else if(e.endsWith(".xlsx")){const I=globalThis.XLSX;Ra(g,l=>{const C=new Uint8Array(l),n=I.read(C,{type:"array"}),F={};n.SheetNames.forEach(function(a){I.utils.sheet_to_json(n.Sheets[a],{}).forEach(function(d){const s=d.Identifier;delete d.Identifier,F[s]=d})}),this.__labelLibraries[t]=F,this.emit("labelLibraryLoaded",{library:t})})}}isLibraryFound(e){return e in this.__foundLabelLibraries}isLibraryLoaded(e){return e in this.__labelLibraries}getLabelText(e,g){const t=this.__labelLibraries[e];if(!t)throw new Error("LabelLibrary: '"+e+"' not found in LabelManager. Found: ["+Object.keys(this.__labelLibraries)+"]");const I=t[g];if(!I)throw new Error("Label: '"+g+"' not found in LabelLibrary: '"+e+"'. Found: ["+Object.keys(t)+"]");const l=I[this.__language];if(!l){if(I.En)return I.En;throw new Error("labelText: '"+this.__language+"' not found in Label. Found: ["+Object.keys(I)+"]")}return l}setLabelText(e,g,t){let I=this.__labelLibraries[e];I||(I={},this.__labelLibraries[e]=I);let l=I[g];l||(l={},I[g]=l),l[this.__language]=t}setLanguage(e){this.__language=e}}const el=new Ud;function dd(i,e,g,t,I,l,C=!1,n=!0,F){if(typeof n=="undefined"&&(n=!0),typeof l=="undefined"&&(l=5),typeof l=="number")l={tl:l,tr:l,br:l,bl:l};else{const a={tl:0,tr:0,br:0,bl:0};for(const U in a)l[U]=l[U]||a[U]}i.beginPath(),i.moveTo(e+l.tl,g),i.lineTo(e+t-l.tr,g),i.quadraticCurveTo(e+t,g,e+t,g+l.tr),i.lineTo(e+t,g+I-l.br),i.quadraticCurveTo(e+t,g+I,e+t-l.br,g+I),i.lineTo(e+l.bl,g+I),i.quadraticCurveTo(e,g+I,e,g+I-l.bl),i.lineTo(e,g+l.tl),i.quadraticCurveTo(e,g,e+l.tl,g),i.closePath(),C&&i.fill(),n&&(i.lineWidth=F,i.stroke())}class Ui extends ii{constructor(e,g){super(e);this.requestedReRender=!1,this.libraryParam=new Zg("Library"),this.textParam=new Zg("Text",""),this.fontColorParam=new Fg("FontColor",new E(0,0,0)),this.fontSizeParam=new k("FontSize",22),this.fontParam=new Zg("Font","Helvetica"),this.borderWidthParam=new k("BorderWidth",2),this.outlineParam=new Je("Outline",!1),this.outlineColorParam=new Fg("OutlineColor",new E(0,0,0)),this.backgroundParam=new Je("Background",!0),this.backgroundColorParam=new Fg("BackgroundColor",new E("#FBC02D")),this.fillBackgroundParam=new Je("FillBackground",!0),this.strokeBackgroundOutlineParam=new Je("StrokeBackgroundOutline",!0),this.canvasElem=document.createElement("canvas");const t=22;this.marginParam=new k("Margin",t*.5),this.borderRadiusParam=new k("BorderRadius",t*.5),this.addParameter(this.marginParam),this.addParameter(this.borderRadiusParam),this.addParameter(this.libraryParam),this.addParameter(this.textParam),this.addParameter(this.fontColorParam),this.addParameter(this.fontSizeParam),this.addParameter(this.fontParam),this.addParameter(this.borderWidthParam),this.addParameter(this.outlineParam),this.addParameter(this.outlineColorParam),this.addParameter(this.backgroundParam),this.addParameter(this.backgroundColorParam),this.addParameter(this.fillBackgroundParam),this.addParameter(this.strokeBackgroundOutlineParam);const I=()=>{this.loadLabelData()};this.on("nameChanged",I),g&&(this.libraryParam.value=g),this.requestedReRender=!1,this.needsRender=!1,this.loadLabelData()}__parameterValueChanged(e){super.parameterValueChanged(e),this.requestedReRender||(this.requestedReRender=!0,this.loadLabelData())}loadLabelData(){const e=()=>{this.requestedReRender=!1,this.needsRender=!0,this.loaded?this.emit("updated"):(this.loaded=!0,this.emit("loaded"))},g=()=>new Promise(I=>{const l=this.libraryParam.value;if(l==""){I();return}if(!el.isLibraryFound(l)){console.warn("Label Library not found:",l),I();return}const C=()=>{try{const n=this.getName(),F=el.getLabelText(l,n);this.textParam.value=F}catch(n){console.warn(n)}I()};el.isLibraryLoaded(l)?C():el.on("labelLibraryLoaded",n=>{n.library==l&&C()})}),t=()=>new Promise(I=>{if(document.fonts!=null){const l=this.fontParam.value,C=this.fontSizeParam.value;document.fonts.load(C+'px "'+l+'"').then(()=>{I()})}else I()});Promise.all([g(),t()]).then(e)}renderLabelToImage(){const e=this.canvasElem.getContext("2d",{alpha:!0});let g=this.textParam.value;g==""&&(g=this.getName());const t=this.fontParam.value,I=this.fontColorParam.value,l="left",C=this.fontSizeParam.value,n=this.marginParam.value,F=this.borderWidthParam.value,a=this.borderRadiusParam.value,U=this.outlineParam.value,d=this.outlineColorParam.value,s=this.backgroundParam.value,o=this.backgroundColorParam.value,A=this.fillBackgroundParam.value,B=this.strokeBackgroundOutlineParam.value,Q=n+F,r=g.split(`
`);e.font=C+'px "'+t+'"';let R=0;r.forEach(h=>{R=Math.max(e.measureText(h).width,R)});const V=C;this.width=Math.ceil(R+Q*2),this.height=Math.ceil(V*r.length+Q*2),e.canvas.width=this.width,e.canvas.height=this.height,this.canvasElem.width=this.width,this.canvasElem.height=this.height,e.fillStyle="rgba(0, 0, 0, 0.0)",e.fillRect(0,0,this.width,this.height),s&&(e.fillStyle=o.toHex(),e.strokeStyle=d.toHex(),dd(e,F,F,this.width-F*2,this.height-F*2,a,A,B,F)),e.font=C+'px "'+t+'"',e.textAlign=l,e.fillStyle=I.toHex(),e.textBaseline="hanging",r.forEach((h,m)=>{e.fillText(h,Q,Q+m*V)}),U&&(e.strokeStyle=d.toHex(),e.lineWidth=1.5,e.strokeText(g,Q,Q)),this.__data=e.getImageData(0,0,this.width,this.height),this.needsRender=!1,this.emit("labelRendered",{width:this.width,height:this.height,data:this.__data})}getParams(){return this.needsRender&&this.renderLabelToImage(),super.getParams()}}S.register("Label",Ui);class sd extends ug{constructor(){super("")}connectWebcam(e,g,t=!1){const I={width:e,height:g,frameRate:{ideal:60,max:60}};t?I.facingMode={exact:"environment"}:I.facingMode={facingMode:"user"};const l=document.createElement("video");l.style.display="none",l.preload="auto",l.crossOrigin="anonymous",document.body.appendChild(l),navigator.mediaDevices.getUserMedia({audio:!1,video:I}).then(C=>{l.srcObject=C,l.onloadedmetadata=n=>{l.play(),this.width=l.videoWidth,this.height=l.videoHeight,console.log("Webcam:["+this.width+", "+this.height+"]"),this.__data=l,this.loaded=!0,this.emit("loaded");let F=0;const a=60,U=()=>{if(l.paused||l.ended)return;const d=Math.floor(l.currentTime*a);F!=d&&(this.emit("updated"),F=d),setTimeout(U,20)};U()}}).catch(function(C){})}setVideoStream(e){this.loaded=!1,this.width=e.videoWidth,this.height=e.videoHeight,this.start(),this.__data=e,this.loaded=!0,this.emit("loaded")}stop(){clearInterval(this.__intervalId)}start(){this.__intervalId=setInterval(()=>{this.emit("updated")},20)}isLoaded(){return this.loaded}getParams(){return{type:this.type,format:this.format,width:this.width,height:this.height,data:this.__data,flipY:!0}}}S.register("VideoStreamImage2D",sd);class Ve extends jg{constructor(e,g){super(e);this.__isOpaque=!0,this.__isTextured=!1,this.__shaderName="",g&&this.setShaderName(g)}getShaderName(){return this.__shaderName}setShaderName(e){if(this.__shaderName==e)return;this.__shaderName=e;const t=S.getClassDefinition(e).getMaterialTemplate();if(!t)throw new Error("Error setting Shader. Material template not registered found:"+e);const I={};let l=t.getNumParameters();for(;l--;){const n=t.getParameterByIndex(l);this.getParameter(n.getName())||this.addParameter(n.clone()),I[n.getName()]=!0}for(const n of this.params)I[n.getName()]||this.removeParameter(n.getName());this.__shaderName=e,this.__checkOpacity({});const C=new dU(e);this.emit("shaderNameChanged",C)}removeAllTextures(){for(const e of this.params)e instanceof ye?e.getImage()&&e.setImage(null):e instanceof Oe&&e.getImage()&&e.setImage(null)}getParamTextures(){const e={};for(const g of this.params)g instanceof ye?g.getImage()&&(e[g.getName()]=g.getImage()):g instanceof Oe&&g.getImage()&&(e[g.getName()]=g.getImage());return e}isOpaque(){return this.__isOpaque}__checkOpacity(e){let g=!0;try{this.getShaderClass().isOpaque()||(g=!1)}catch{}if(g){const t=this.getParameter("Opacity");if(t&&(t.value<.99||t instanceof Oe&&t.getImage()))g=!1;else{const I=this.getParameter("BaseColor");if(I){if(I instanceof ye){const l=I.getImage();l&&l.format=="RGBA"&&(g=!1)}g&&I.value&&I.value.a<1&&(g=!1)}}}if(g!=this.__isOpaque){this.__isOpaque=g;const t=new Qa(g,!0);this.emit("opacityChanged",t),this.emit("transparencyChanged",t)}}isTextured(){return this.__isTextured}__checkTextures(e){const g=e||{};let t=!1;for(const I of this.params)if(I instanceof ye){if(I.getImage()){t=!0;break}}else if(I instanceof Oe&&I.getImage()){t=!0;break}if(t!=this.__isTextured){this.__isTextured=t;let I=new sU(t,g);this.emit("texturedChanged",I)}}parameterValueChanged(e){this.__checkOpacity(e),this.__checkTextures(e),super.parameterValueChanged(e)}getShaderClass(){return S.getClassDefinition(this.getShaderName())}toJSON(e){const g=super.toJSON(e);return g.shader=this.__shaderName,g}fromJSON(e,g={}){if(!e.shader){console.warn("Invalid Material JSON");return}this.setShaderName(e.shader),super.fromJSON(e,g)}readBinary(e,g){let t=e.loadStr();if(t=="StandardMaterial"&&(t="StandardSurfaceShader"),t=="TransparentMaterial"&&(t="StandardSurfaceShader"),this.setShaderName(t),g.versions["zea-engine"].compare([0,0,3])<0)throw`Loading zcad files of version ${g.versions["zea-engine"]} is not longer support`;super.readBinary(e,g),this.__checkOpacity(),this.__checkTextures()}clone(e){const g=new Ve("clone","");return g.copyFrom(this,e),g}copyFrom(e,g){this.setShaderName(e.getShaderName()),super.copyFrom(e,g)}}S.register("Material",Ve);class wl extends Ve{constructor(e){super(e);this.baseColorParam=new ye("BaseColor",new E(1,1,.5)),this.opacityParam=new k("Opacity",1),this.lineThicknessParam=new k("LineThickness",.01),this.overlayParam=new k("Overlay",0),this.__shaderName="FatLinesShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.overlayParam),this.addParameter(this.lineThicknessParam)}}S.register("FatLinesMaterial",wl);class Dl extends Ve{constructor(e){super(e);this.baseColorParam=new ye("BaseColor",new E(1,1,.5)),this.pointSizeParam=new k("PointSize",1),this.roundedParam=new k("Rounded",1),this.borderWidthParam=new k("BorderWidth",.2),this.overlayParam=new k("Overlay",0),this.__shaderName="FatPointsShader",this.addParameter(this.baseColorParam),this.addParameter(this.pointSizeParam),this.addParameter(this.roundedParam),this.addParameter(this.borderWidthParam),this.addParameter(this.overlayParam)}clone(e){const g=new Dl;return g.copyFrom(this,e),g}}S.register("FatPointsMaterial",Dl);class xI extends Ve{constructor(e){super(e);this.baseColorParam=new ye("BaseColor",new E(1,1,.5)),this.overlayParam=new Oe("Overlay",0),this.__shaderName="FlatSurfaceShader",this.addParameter(this.baseColorParam),this.addParameter(this.overlayParam)}clone(e){const g=new xI;return g.copyFrom(this,e),g}}S.register("FlatSurfaceMaterial",xI);class Lt extends Ve{constructor(e){super(e);this.baseColorParam=new ye("BaseColor",new E(1,1,.5)),this.opacityParam=new Oe("Opacity",.7,[0,1]),this.overlayParam=new Oe("Overlay",1e-6),this.stippleScaleParam=new k("StippleScale",.01),this.stippleValueParam=new k("StippleValue",0,[0,1]),this.occludedStippleValueParam=new k("OccludedStippleValue",1,[0,1]),this.__shaderName="LinesShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.overlayParam),this.addParameter(this.stippleScaleParam),this.addParameter(this.stippleValueParam),this.addParameter(this.occludedStippleValueParam)}clone(e){const g=new Lt;return g.copyFrom(this,e),g}}S.register("LinesMaterial",Lt);class Kl extends Ve{constructor(e){super(e);this.baseColorParam=new ye("BaseColor",new E(1,1,.5)),this.pointSizeParam=new Oe("PointSize",2),this.overlayParam=new Oe("Overlay",2e-5),this.__shaderName="PointsShader",this.addParameter(this.baseColorParam),this.addParameter(this.pointSizeParam),this.addParameter(this.overlayParam)}clone(e){const g=new Kl;return g.copyFrom(this,e),g}}S.register("PointsMaterial",Kl);class Ll extends Ve{constructor(e){super(e);this.baseColorParam=new ye("BaseColor",new E(1,1,.5)),this.__shaderName="ScreenSpaceShader",this.addParameter(this.baseColorParam)}clone(e){const g=new Ll;return g.copyFrom(this,e),g}}S.register("ScreenSpaceMaterial",Ll);class zl extends Ve{constructor(e){super(e);this.baseColorParam=new ye("BaseColor",new E(1,1,.5)),this.opacityParam=new Oe("Opacity",1,[0,1]),this.emissiveStrengthParam=new Oe("EmissiveStrength",0,[0,1]),this.__shaderName="SimpleSurfaceShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.emissiveStrengthParam)}clone(e){const g=new zl;return g.copyFrom(this,e),g}}S.register("SimpleSurfaceMaterial",zl);class _l extends Ve{constructor(e){super(e);this.baseColorParam=new ye("BaseColor",new E(1,1,.5)),this.normalParam=new ye("Normal",new E(1,1,.5)),this.ambientOcclusion=new Oe("AmbientOcclusion",1,[0,1]),this.metallicParam=new Oe("Metallic",.05,[0,1]),this.roughnessParam=new Oe("Roughness",.5,[0,1]),this.reflectanceParam=new Oe("Reflectance",.5,[0,1]),this.emissiveStrengthParam=new Oe("EmissiveStrength",0,[0,1]),this.opacityParam=new Oe("Opacity",1,[0,1]),this.edgeColorParam=new ye("EdgeColor",new E(.2,.2,.2)),this.pointColorParam=new ye("PointColor",new E(.1,.1,.1)),this.__shaderName="StandardSurfaceShader",this.addParameter(this.baseColorParam),this.addParameter(this.normalParam),this.addParameter(this.ambientOcclusion),this.addParameter(this.metallicParam),this.addParameter(this.roughnessParam),this.addParameter(this.reflectanceParam),this.addParameter(this.emissiveStrengthParam),this.addParameter(this.opacityParam),this.addParameter(this.edgeColorParam),this.addParameter(this.pointColorParam)}clone(e){const g=new _l;return g.copyFrom(this,e),g}}S.register("StandardSurfaceMaterial",_l);class od extends Xe{constructor(){super();this.assetItem=null}}class Ol extends H{constructor(e){super(e);this.srcTreePath=[],this.srcTree=null}setSrcTree(e){this.srcTree=e;const g=new od,t=this.srcTree.clone(g);t.localXfoParam.value=new v,this.addChild(t,!1)}getSrcTree(){return this.srcTree}readBinary(e,g){if(super.readBinary(e,g),this.srcTreePath=e.loadStrArray(),this.srcTreePath.length>0)try{g.resolvePath(this.srcTreePath,t=>{this.setSrcTree(t)},t=>{console.warn(`Error loading InstanceItem: ${this.getPath()}, unable to resolve: ${this.srcTreePath}. `+t.message)})}catch(t){console.warn(`Error loading InstanceItem: ${this.getPath()}: `+t)}}clone(e){const g=new Ol;return g.copyFrom(this,e),g}copyFrom(e,g){super.copyFrom(e,g),this.srcTreePath=e.srcTreePath,this.srcTreePath.length>0&&this.getNumChildren()==0&&e.once("childAdded",t=>{const l=t.childItem;this.setSrcTree(l)})}}S.register("InstanceItem",Ol);class Lg extends H{constructor(e){super(e);this.materialParam=new YI("Material"),this.overlay=!1,this.__cutAway=!1,this.__cutAwayVector=new b(1,0,0),this.__cutAwayDist=0,this.__layers=[]}setOverlay(e){this.overlay=e}isOverlay(){return this.overlay}addLayer(e){this.__layers.push(e)}getLayers(){return this.__layers}isCutawayEnabled(){return this.__cutAway}setCutawayEnabled(e){this.__cutAway=e,this.emit("cutAwayChanged")}getCutVector(){return this.__cutAwayVector}setCutVector(e){this.__cutAwayVector=e,this.emit("cutAwayChanged")}getCutDist(){return this.__cutAwayDist}setCutDist(e){this.__cutAwayDist=e,this.emit("cutAwayChanged")}readBinary(e,g){if(super.readBinary(e,g),g.versions["zea-engine"].compare([0,0,4])>=0){const t=e.loadStr();let l=g.assetItem.getMaterialLibrary().getMaterial(t,!1);if(l||(l=new Ve(t,"SimpleSurfaceShader"),l.getParameter("BaseColor").loadValue(E.random(.25)),g.assetItem.getMaterialLibrary().addMaterial(l)),this.materialParam.loadValue(l),this.__layers=e.loadStrArray(),this.__layers.length>0)for(const C of this.__layers)g.addGeomToLayer(this,C)}}}let an=!1;class Ad extends ag{constructor(e,g,t){super("CalcGeomMatOperator");this.globalXfo=new Pg("GlobalXfo"),this.geomOffsetXfo=new Pg("GeomOffsetXfo"),this.geomMat=new HU("GeomMat"),this.globalXfo.setParam(e),this.geomOffsetXfo.setParam(g),this.geomMat.setParam(t),this.addInput(this.globalXfo),this.addInput(this.geomOffsetXfo),this.addOutput(this.geomMat)}evaluate(){const e=this.globalXfo.getValue().toMat4(),g=this.geomOffsetXfo.getValue().toMat4();this.geomMat.setClean(e.multiply(g))}}class ge extends Lg{constructor(e,g,t,I){super(e);this.listenerIDs={},this.geomIndex=-1,this.assetItem=null,this.cullable=!0,this.geomOffsetXfoParam=new cg("GeomOffsetXfo"),this.geomParam=new vl("Geometry"),this.geomMatParam=new EI("GeomMat"),this.addParameter(this.geomParam),this.addParameter(this.materialParam),this.addParameter(this.geomOffsetXfoParam),this.addParameter(this.geomMatParam);const l=()=>{this.setBoundingBoxDirty()};this.geomParam.on("valueChanged",l),this.geomParam.on("boundingBoxChanged",l),this.calcGeomMatOperator=new Ad(this.globalXfoParam,this.geomOffsetXfoParam,this.geomMatParam),g&&this.geomParam.loadValue(g),t&&this.materialParam.loadValue(t),I&&(this.localXfoParam.value=I)}_cleanBoundingBox(){if(this.disableBoundingBox)return new gg;const e=super._cleanBoundingBox();if(this.geomBBox){const g=this.geomMatParam.value;e.addPoint(g.transformVec3(this.geomBBox.p0)),e.addPoint(g.transformVec3(this.geomBBox.p1))}else{const g=this.geomParam.value;if(g)if(an){const t=this.geomMatParam.value;if(g instanceof vI){const I=g.__buffers.attrBuffers.positions.values,l=C=>{const n=C*3;return new b(I.subarray(n,n+3))};for(let C=0;C<g.getNumVertices();C++)e.addPoint(t.transformVec3(l(C)))}else{const I=g.getVertexAttribute("positions");for(let l=0;l<g.getNumVertices();l++)e.addPoint(t.transformVec3(I.getValueRef(l)))}}else e.addBox3(g.getBoundingBox(),this.geomMatParam.value)}return e}fromJSON(e,g){super.fromJSON(e,g),g.numGeomItems++}readBinary(e,g){super.readBinary(e,g),g.numGeomItems++;const t=e.loadUInt8(),I=e.loadUInt32(),l=g.assetItem.getGeometryLibrary();this.geomIndex=I,this.assetItem=g.assetItem;const C=l.getGeom(I);if(C)this.geomParam.loadValue(C);else{const F=U=>{const{range:d}=U;if(I>=d[0]&&I<d[1]){const s=l.getGeom(I);s?this.geomParam.value=s:console.warn("Geom not loaded:",this.getName()),l.removeListenerById("rangeLoaded",a)}},a=l.on("rangeLoaded",F)}const n=1<<2;if(t&n&&(this.geomOffsetXfoParam.value=new v(e.loadFloat32Vec3(),e.loadFloat32Quat(),e.loadFloat32Vec3())),g.versions["zea-engine"].compare([0,0,4])<0)if(t&8){const a=g.assetItem.getMaterialLibrary(),U=e.loadStr();let d=a.getMaterial(U);d||(console.warn("Geom :'"+this.__name+"' Material not found:"+U),d=a.getMaterial("Default")),this.materialParam.loadValue(d)}else this.materialParam.loadValue(g.assetItem.getMaterialLibrary().getMaterial("Default"));g.versions["zea-engine"].compare([3,0,0])<0?e.loadFloat32Vec2():this.geomBBox=new gg(e.loadFloat32Vec3(),e.loadFloat32Vec3())}toString(e){return JSON.stringify(this.toJSON(e),null,2)}clone(e){const g=new ge;return g.copyFrom(this,e),g}copyFrom(e,g){if(super.copyFrom(e,g),!e.geomParam.value&&e.geomIndex!=-1){const t=e.assetItem.getGeometryLibrary();this.assetItem=e.assetItem,this.geomIndex=e.geomIndex,this.geomBBox=e.geomBBox;const I=l=>{const{range:C}=l;if(this.geomIndex>=C[0]&&this.geomIndex<C[1]){const n=t.getGeom(this.geomIndex);n?this.geomParam.value=n:console.warn("Geom not loaded:",this.getName()),t.removeListenerById("rangeLoaded",this.listenerIDs.rangeLoaded)}};this.listenerIDs.rangeLoaded=t.on("rangeLoaded",I)}this.geomMatParam.setDirty(0)}static setCalculatePreciseBoundingBoxes(e){an=e}}S.register("GeomItem",ge);class Pl extends H{constructor(e){super(e);this.itemsParam=new $C("Items",g=>g instanceof H),this.__itemsEventHandlers=[],this.addParameter(this.itemsParam),this.__itemsParam=this.itemsParam,this.itemsParam.on("itemAdded",g=>{this.bindItem(g.item,g.index)}),this.itemsParam.on("itemRemoved",g=>{this.unbindItem(g.item,g.index)})}setSearchRoot(e){this.searchRoot=e}setOwner(e){(!this.searchRoot||this.searchRoot==this.getOwner())&&(this.searchRoot=e),super.setOwner(e)}bindItem(e,g){if(!(e instanceof H))return;const t={};t.pointerDown=e.on("pointerDown",I=>{this.onPointerDown(I)}),t.pointerUp=e.on("pointerUp",I=>{this.onPointerUp(I)}),t.pointerMove=e.on("pointerMove",I=>{this.onPointerMove(I)}),t.pointerEnter=e.on("pointerEnter",I=>{this.onPointerEnter(I)}),t.pointerLeave=e.on("pointerLeave",I=>{this.onPointerLeave(I)}),this.__itemsEventHandlers.splice(g,0,t)}unbindItem(e,g){if(!(e instanceof H))return;const t=this.__itemsEventHandlers[g];for(let I in t){const l=I.split(".");if(l.length>1){const C=e.getParameter(l[0]);C&&C.removeListenerById(l[1],t[I])}else e.removeListenerById(I,t[I])}this.__itemsEventHandlers.splice(g,1)}addItem(e,g=!0){if(!e){console.warn("Error adding item to group. Item is null");return}this.itemsParam.addItem(e,g)}removeItem(e,g=!0){const t=this.itemsParam.value;if(!t)return;const I=Array.from(t).indexOf(e);I&&this.itemsParam.removeItem(I,g)}clearItems(e=!0){const g=this.itemsParam.value;if(!g)return;const t=Array.from(g);for(let I=t.length-1;I>=0;I--)this.unbindItem(t[I],I);this.itemsParam.clearItems(e)}getItems(){return this.itemsParam.value}setItems(e){this.clearItems(!1),this.itemsParam.setItems(e)}toJSON(e){const g=super.toJSON(e),t=this.itemsParam.value;if(t){const I=Array.from(t),l=[];I.forEach(C=>{const n=C.getPath();l.push(e?e.makeRelative(n):n)}),g.treeItems=l}return g}fromJSON(e,g){if(super.fromJSON(e,g),!e.treeItems){console.warn("Invalid Parameter JSON");return}if(!g)throw new Error("Unable to load JSON on a BaseGroup without a load context");let t=e.treeItems.length;const I=l=>{g.resolvePath(l,C=>{this.addItem(C),t--,t==0&&this.loadDone()},()=>{console.warn("BaseGroup: '"+this.getName()+"'. Unable to load item:"+l)})};for(const l of e.treeItems)I(l)}loadDone(){}}class wI extends Pl{constructor(e){super(e);this.highlightedParam=new Je("Highlighted",!1),this.highlightColorParam=new Fg("HighlightColor",new E(.5,.5,1)),this.highlightFillParam=new k("HighlightFill",0,[0,1]),this.addParameter(this.highlightedParam),this.highlightedParam.on("valueChanged",()=>{this.updateHighlight()}),this.addParameter(this.highlightColorParam),this.highlightColorParam.on("valueChanged",()=>{this.updateHighlight()}),this.addParameter(this.highlightFillParam),this.highlightFillParam.on("valueChanged",()=>{this.updateHighlight()})}updateVisibility(){if(super.updateVisibility()){const e=this.isVisible();return Array.from(this.itemsParam.value).forEach(g=>{g instanceof H&&g.propagateVisibility(e?1:-1)}),!0}return!1}updateHighlight(){this.__updateHighlightHelper()}__updateHighlightHelper(){let e=!1,g;(this.highlightedParam.value||this.isSelected())&&(e=!0,g=this.highlightColorParam.value,g.a=this.highlightFillParam.value);const t="groupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach(I=>{I instanceof H&&(e?I.addHighlight(t,g,!0):I.removeHighlight(t,!0))})}setSelected(e){super.setSelected(e),this.updateHighlight()}bindItem(e,g){super.bindItem(e,g);const t=this.__itemsEventHandlers[g];if(e instanceof H){if(e instanceof H&&this.highlightedParam.value){const I=this.highlightColorParam.value;I.a=this.highlightFillParam.value,e.addHighlight("groupItemHighlight"+this.getId(),I,!0)}this.isVisible()||e.propagateVisibility(-1),t["BoundingBox.valueChanged"]=e.boundingBoxParam.on("valueChanged",I=>{this.setBoundingBoxDirty()})}}unbindItem(e,g){super.unbindItem(e,g),e instanceof H&&(this.highlightedParam.value&&e.removeHighlight("groupItemHighlight"+this.getId(),!0),this.isVisible()||e.propagateVisibility(1),e.traverse(t=>{t instanceof Lg&&t.setCutawayEnabled(!1)},!0))}clone(e){const g=new wI(this.__name+" clone");return g.copyFrom(this,e),g}}S.register("SelectionSet",wI);var Bd=_C("",null,!1);class Qd extends ha{constructor(){super(!0)}constructWorker(){const e=new Bd;return Promise.resolve(e)}}const Fn=new Qd;let Un=0;class Vd extends Xe{constructor(e){super();this.listenerIDs={},this.streamInfos={},this.genBuffersOpts={},this.numGeoms=-1,this.geoms=[],this.basePath="",this.loadedCount=0,this.assetItem=e,Un++}isLoaded(){return this.loadedCount==this.numGeoms}loadGeomFile(e,g=!1){return g&&ee.incrementWorkload(1),new Promise(t=>{const I=this.basePath+e+".zgeoms";ee.loadFile("archive",I,!1).then(l=>{const C=l[Object.keys(l)[0]],n=this.on("streamFileParsed",F=>{F.geomFileID==I&&(g&&ee.incrementWorkDone(1),this.removeListenerById("streamFileParsed",n),t())});this.readBinaryBuffer(I,C.buffer,this.loadContext)})})}loadGeomFilesStream(e,g,t){const I=e.numGeomsPerFile.length;ee.incrementWorkload(I),this.numGeoms=e.numGeoms,this.basePath=g,this.loadContext=t;for(let l=0;l<I;l++)this.loadGeomFile(l,!1)}setGenBufferOption(e,g){this.genBuffersOpts[e]=g}setNumGeoms(e){this.numGeoms=e}getNumGeoms(){return this.numGeoms}getGeom(e){return e>=this.geoms.length?null:this.geoms[e]}readBinaryBuffer(e,g,t){const I=new RI(g,0,_e.isMobileDevice),l=I.loadUInt32(),C=I.loadUInt32();if(this.streamInfos[e]={total:l,done:0},l==0){const a=new $i(e,0);this.emit("streamFileParsed",a);return}this.numGeoms==-1&&(this.numGeoms=l);const n=I.loadUInt32Array(l),F=g.byteLength>2e7;if(Un>1&&!F){const a=[0,l],U=0;Fn.addTask({geomFileID:e,toc:n,byteOffset:U,geomIndexOffset:C,geomsRange:a,isMobileDevice:I.isMobileDevice,bufferSlice:g,genBuffersOpts:this.genBuffersOpts,context:{versions:t.versions}},[g]).then(d=>{this.__receiveGeomDatas(d)})}else{let U=0;for(;U<l;){const d=n[U];let s=0,o=U;for(;o<l&&s<2e6;)o++,s=n[o]-d;let A,B;o>=l?(A=[U,l],B=g.byteLength):(A=[U,o],B=n[A[1]]);const Q=U==0&&o==l,r=Q?0:n[A[0]],R=Q?g:g.slice(d,B);U=o,Fn.addTask({geomFileID:e,toc:n,byteOffset:r,geomIndexOffset:C,geomsRange:A,isMobileDevice:I.isMobileDevice,bufferSlice:R,genBuffersOpts:this.genBuffersOpts,context:{versions:t.versions}},[R]).then(V=>{this.__receiveGeomDatas(V)})}}}__receiveGeomDatas(e){const{geomFileID:g,geomDatas:t,geomIndexOffset:I,geomsRange:l}=e,C=I+l[0],n=[C,I+l[1]];for(let d=0;d<t.length;d++){const s=t[d];if(!s.type)continue;let o;switch(s.type){case"Points":o=new ct(s);break;case"Lines":o=new Gg(s);break;case"Mesh":case"Plane":case"Sphere":case"Cone":o=new Kg(s);break;case"CompoundGeom":o=new hI(s,this.assetItem.getMaterialLibrary());break;default:throw new Error("Unsupported Geom type:")}this.geoms[C+d]=o}const F=new nU(n);this.emit("rangeLoaded",F);const a=n[1]-n[0],U=this.streamInfos[g];if(U.done+=a,U.done==U.total){const d=new $i(g,U.done);this.emit("streamFileParsed",d)}return this.loadedCount+=a,this.loadedCount==this.numGeoms&&this.emit("loaded"),this.loadedCount==this.numGeoms}toJSON(){return{numGeoms:this.geoms.length}}toString(){return JSON.stringify(this.toJSON(),null,2)}loadMetadata(e,g){const t=new RI(e.buffer,0,_e.isMobileDevice),I=t.loadUInt32Array();for(let l=0;l<I.length;l++)try{const C=this.geoms[l];C||console.warn("Error loading metadata for geom that was not yet loaded: ",l),C instanceof hI&&(t.seek(I[l]),C.loadMetadata(t,g))}catch{console.warn("Error loading geom metadata: ",l)}}}class rd extends Xe{constructor(e="MaterialLibrary"){super();this.__images={},this.materials=[],this.__materialsMap={},this.name="",this.__name=e}clear(){this.__images={},this.materials=[],this.__materialsMap={}}getPath(){return[this.__name]}resolvePath(e,g=0){return null}getNumMaterials(){return this.materials.length}getMaterials(){return this.materials}getMaterialNames(){const e=[];return this.materials.forEach(g=>{e.push(g.getName())}),e}hasMaterial(e){return e in this.__materialsMap}addMaterial(e){e.setOwner(this),this.__materialsMap[e.getName()]=this.materials.length,this.materials.push(e)}getMaterial(e,g=!0){const t=this.__materialsMap[e];if(t==null&&g)throw new Error("Material:"+e+" not found in library:"+this.getMaterialNames());return this.materials[t]}hasImage(e){return e in this.__images}addImage(e){e.setOwner(this),this.__images[e.getName()]=e}getImage(e,g=!0){const t=this.__images[e];if(!t&&g)throw new Error("Image:"+e+" not found in library:"+this.getImageNames());return t}getImageNames(){const e=[];for(const g in this.__images)e.push(g);return e}load(e){const g=new XMLHttpRequest;g.open("GET",e,!0),g.ontimeout=()=>{throw new Error("The request for "+e+" timed out.")},g.onload=()=>{g.readyState===4&&(g.status===200?this.fromJSON(JSON.parse(g.responseText)):console.warn(g.statusText))},g.send(null)}toJSON(e={}){return{numMaterials:this.getNumMaterials()}}fromJSON(e,g={}){for(const t in e.textures){const I=new qg(t);I.fromJSON(e.textures[t]),this.__images[t]=I}for(const t in e.materials){const I=new Ve(t);I.fromJSON(e.materials[t]),this.addMaterial(I)}}readBinary(e,g){this.name=e.loadStr();const t=e.loadUInt32();for(let l=0;l<t;l++){const C=e.loadStr(),n=S.constructClass(C);n.readBinary(e,g),this.__images[n.getName()]=n}const I=e.loadUInt32();if(I>0){const l=e.loadUInt32Array(I);for(let C=0;C<I;C++){const n=e.loadStr();let F;switch(n){case"StandardMaterial":case"TransparentMaterial":case"StandardSurfaceShader":F=S.constructClass("StandardSurfaceMaterial");break;case"SimpleSurfaceShader":case"SimpleSurfaceMaterial":F=S.constructClass("SimpleSurfaceMaterial");break;case"PointsShader":case"PointsMaterial":F=S.constructClass("PointsMaterial");break;case"FatPointsShader":case"FatPointsMaterial":F=S.constructClass("FatPointsMaterial");break;case"LinesShader":case"LinesMaterial":F=S.constructClass("LinesMaterial");break;default:F=new Ve("");break}e.seek(l[C]),F.readBinary(e,g),this.materials[C]=F,this.__materialsMap[F.getName()]=C}}this.emit("loaded")}toString(){return JSON.stringify(this.toJSON(),null,2)}}const dn=i=>{switch(i.toLowerCase()){case"millimeters":return .001;case"centimeters":return .01;case"decimeters":return .1;case"meters":return 1;case"kilometers":return 1e3;case"inches":return .0254;case"feet":return .3048;case"miles":return 1609.34}return 1};class dt extends H{constructor(e=""){super(e);this.geomLibrary=new Vd(this),this.materialLibrary=new rd,this.loaded=!1,this.unitsScale=1,this.units="meters"}load(e){return Promise.reject(`This method is not implemented for this Asset Item: ${e}`)}isLoaded(){return this.loaded}getEngineDataVersion(){return this.engineDataVersion}getGeometryLibrary(){return this.geomLibrary}getMaterialLibrary(){return this.materialLibrary}getUnitsConversion(){return this.unitsScale}readBinary(e,g){g.assetItem=this,g.numTreeItems=0,g.units||(g.units="meters"),g.numGeomItems=0,g.versions["zea-engine"]||(g.versions["zea-engine"]=new rI(e.loadStr())),this.engineDataVersion=g.versions["zea-engine"];const t=()=>{this.units=e.loadStr(),this.addParameter(new Zg("FileUnits",this.units));const n=dn(this.units),F=dn(g.units);this.unitsScale=n/F,g.units=this.units;const a=this.localXfoParam,U=a.value;U.sc.scaleInPlace(this.unitsScale),a.value=U};g.versions["zea-engine"].compare([0,0,6])>0&&t();let I;const l={};g.addGeomToLayer=(n,F)=>{if(!l[F]){I||(I=new H("Layers"),this.addChild(I,!1));const a=new wI(F);I.addChild(a,!1),l[F]=a}l[F].addItem(n)};const C=[];g.resolvePath=(n,F,a)=>{if(!n)throw new Error("Path not specified");try{const U=this.resolvePath(n);F(U)}catch{C.push(()=>{try{const d=this.resolvePath(n);F(d)}catch(d){if(a)a(d);else throw d}})}},g.addPLCB=n=>C.push(n),this.materialLibrary.readBinary(e,g),super.readBinary(e,g),g.versions["zea-engine"].compare([0,0,5])>=0&&g.versions["zea-engine"].compare([0,0,7])<0&&t();for(const n of C)n();this.loaded=!0}toJSON(e={}){return e.makeRelative=t=>{const I=this.getPath(),l=t.slice(0,I.length);for(let n=0;n<l.length-1;n++)if(l[n]!=I[n])return console.warn("Param Path is not relative to the asset. May not be able to be resolved at load time:"+t),t;const C=t.slice(I.length-1);return C[0]=".",C},e.assetItem=this,super.toJSON(e)}fromJSON(e,g={}){g||(g={}),g.assetItem=this,g.numTreeItems=0,g.numGeomItems=0,g.version==null&&(g.version=0),g.assetItem=this;const t=[];g.resolvePath=(I,l)=>{if(!I)throw new Error("Path not specified");const C=this.resolvePath(I);C?l(C):t.push(()=>{const n=this.resolvePath(I);n?l(n):console.warn("Path unable to be resolved:"+I)})},g.addPLCB=I=>t.push(I),super.fromJSON(e,g);for(const I of t)I()}clone(e){const g=new dt;return g.copyFrom(this,e),g}copyFrom(e,g){this.geomLibrary=e.geomLibrary,this.materialLibrary=e.materialLibrary,this.loaded=e.loaded,e.loaded||e.once("loaded",t=>{const I=e.localXfoParam.value,l=this.localXfoParam.value;l.sc=I.sc.clone(),this.localXfoParam.value=l,e.getChildren().forEach(C=>{C&&C!=dt&&this.addChild(C.clone(g),!1,!1)}),this.loaded=!0,this.emit("loaded",t)}),super.copyFrom(e,g)}}S.register("AssetItem",dt);class st extends Xe{constructor(e){super();this.units="meters",this.versions={},this.sdk="",this.url="",this.folder="",this.camera=null,this.assetItem=null,this.resources=null,this.xrefs={},this.xrefLoadCallback=null,this.numTreeItems=0,this.numGeomItems=0,this.postLoadCallbacks=[],this.asyncCount=0,e&&(this.units=e.units,this.xrefs=e.xrefs,this.resources=e.resources,this.xrefs=e.xrefs,this.xrefLoadCallback=e.xrefLoadCallback)}incrementAsync(){this.asyncCount++}decrementAsync(){this.asyncCount--,this.asyncCount==0&&this.emit("done")}resolvePath(e,g,t){try{const I=this.assetItem.resolvePath(e);g(I)}catch{this.postLoadCallbacks.push(()=>{try{const l=this.assetItem.resolvePath(e);g(l)}catch(l){if(t)t(l);else throw new Error(l.message)}})}}addPLCB(e){this.postLoadCallbacks.push(e)}clone(){return new st(this)}}class cI extends H{constructor(e,g){super(e);this.imageParam=new TI("Image"),this.pixelsPerMeterParam=new k("PixelsPerMeter",1e3),this.alphaParam=new k("Alpha",1),this.colorParam=new Fg("Color",new E(1,1,1)),this.alignedToCameraParam=new Je("AlignedToCamera",!1),this.drawOnTopParam=new Je("DrawOnTop",!1),this.fixedSizeOnscreenParam=new Je("FixedSizeOnscreen",!1),this.pivotParam=new XI("Pivot",new f(.5,0));const t=this.addParameter(this.imageParam);g&&(t.value=g),this.addParameter(this.pixelsPerMeterParam),this.addParameter(this.alphaParam),this.addParameter(this.colorParam),this.addParameter(this.alignedToCameraParam),this.addParameter(this.drawOnTopParam),this.addParameter(this.fixedSizeOnscreenParam),this.addParameter(this.pivotParam)}}S.register("BillboardItem",cI);class Ja extends H{constructor(e="Camera"){super(e);this.isOrthographicParam=new k("isOrthographic",0),this.fovParam=new k("fov",1),this.nearParam=new k("near",.1),this.farParam=new k("far",1e3),this.focalDistanceParam=new k("focalDistance",5),this.viewHeight=0,this.__orthoIntervalId=-1,this.__focusIntervalId=-1,this.addParameter(this.isOrthographicParam),this.addParameter(this.fovParam),this.addParameter(this.nearParam),this.addParameter(this.farParam),this.addParameter(this.focalDistanceParam);const g=t=>{this.emit("projectionParamChanged",t)};this.isOrthographicParam.on("valueChanged",g),this.fovParam.on("valueChanged",g),this.nearParam.on("valueChanged",g),this.farParam.on("valueChanged",g),this.setPositionAndTarget(new b(3,3,1.75),new b(0,0,1)),this.setLensFocalLength("28mm"),this.adjustNearAndFarPlanesToFocalDist=!0,this.nearDistFactor=.01,this.farDistFactor=100,this.frameOnBoundingSphere=!1}getNear(){return this.nearParam.value}setNear(e){this.nearParam.value=e}getFar(){return this.farParam.value}setFar(e){this.farParam.value=e}getFov(){return this.fovParam.value}setFov(e){this.fovParam.value=e}getFrustumHeight(){return this.viewHeight}setFrustumHeight(e){this.viewHeight=e,this.emit("projectionParamChanged")}setLensFocalLength(e){const g={"10mm":100.4,"11mm":95,"12mm":90,"14mm":81.2,"15mm":77.3,"17mm":70.4,"18mm":67.4,"19mm":64.6,"20mm":61.9,"24mm":53.1,"28mm":46.4,"30mm":43.6,"35mm":37.8,"45mm":29.9,"50mm":27,"55mm":24.6,"60mm":22.6,"70mm":19.5,"75mm":18.2,"80mm":17.1,"85mm":16.1,"90mm":15.2,"100mm":13.7,"105mm":13,"120mm":11.4,"125mm":11,"135mm":10.2,"150mm":9.1,"170mm":8.1,"180mm":7.6,"210mm":6.5,"300mm":4.6,"400mm":3.4,"500mm":2.7,"600mm":2.3,"800mm":1.7};if(!(e in g)){console.warn("Camera lense focal length not supported:"+e);return}this.fovParam.value=q.degToRad(g[e])}getFocalDistance(){return this.focalDistanceParam.value}setFocalDistance(e){e<1e-4&&console.error("Never set focal distance to zero"),this.focalDistanceParam.value=e,this.adjustNearAndFarPlanesToFocalDist&&(this.nearParam.value=e*this.nearDistFactor,this.farParam.value=e*this.farDistFactor)}isOrthographic(){return this.isOrthographicParam.value==1}setIsOrthographic(e,g=0){if(this.__orthoIntervalId&&clearInterval(this.__orthoIntervalId),e>.5){const t=this.fovParam.value,I=this.focalDistanceParam.value;this.viewHeight=Math.sin(t*.5)*I*2}if(g==0)this.isOrthographicParam.value=e;else{const t=Math.round(g/20);let I=0;const l=this.isOrthographicParam.value,C=()=>{const n=q.lerp(l,e,I/t);this.isOrthographicParam.value=n,I++,I<=t?this.__orthoIntervalId=window.setTimeout(C,20):(this.__orthoIntervalId=-1,this.emit("movementFinished"))};C()}}setPositionAndTarget(e,g){this.setFocalDistance(e.distanceTo(g));const t=new v;t.setLookAt(e,g,new b(0,0,1)),this.globalXfoParam.value=t,this.emit("movementFinished")}getTargetPosition(){const e=this.focalDistanceParam.value,g=this.globalXfoParam.value,t=g.ori.getZaxis();return t.scaleInPlace(-e),t.addInPlace(g.tr),t}frameView(e,g){const t=this.focalDistanceParam.value,I=this.fovParam.value,l=this.globalXfoParam.value.clone(),C=e.getWidth()/e.getHeight(),n=Math.atan(Math.tan(I*.5)*C)*2;let F=t;if(this.frameOnBoundingSphere){const a=new gg;for(const B of g)a.addBox3(B.boundingBoxParam.value);if(!a.isValid()){console.warn("Bounding box not valid.");return}const d=l.ori.getZaxis().scale(-t),s=l.tr.add(d),A=a.center().subtract(s);l.tr.addInPlace(A),F=a.size()/Math.tan(I)}else{const a=[];if(g.forEach(r=>{r.traverse(R=>{if(!(R instanceof H)||R.disableBoundingBox)return!1;if(R instanceof ge){const V=R.geomParam.value;if(V){const h=V.getBoundingBox();if(h.isValid()){const m=R.geomMatParam.value;a.push(m.transformVec3(h.p0)),a.push(m.transformVec3(new b(h.p0.x,h.p0.y,h.p1.z))),a.push(m.transformVec3(new b(h.p0.x,h.p1.y,h.p0.z))),a.push(m.transformVec3(new b(h.p1.x,h.p0.y,h.p0.z))),a.push(m.transformVec3(new b(h.p0.x,h.p1.y,h.p1.z))),a.push(m.transformVec3(new b(h.p1.x,h.p0.y,h.p1.z))),a.push(m.transformVec3(new b(h.p1.x,h.p1.y,h.p0.z))),a.push(m.transformVec3(h.p1));return}}}if(R.getNumChildren()==0){const V=R.boundingBoxParam.value;if(V.isValid()){a.push(new b(V.p0.x,V.p0.y,V.p0.z)),a.push(new b(V.p0.x,V.p0.y,V.p1.z)),a.push(new b(V.p0.x,V.p1.y,V.p0.z)),a.push(new b(V.p1.x,V.p0.y,V.p0.z)),a.push(new b(V.p0.x,V.p1.y,V.p1.z)),a.push(new b(V.p1.x,V.p0.y,V.p1.z)),a.push(new b(V.p1.x,V.p1.y,V.p0.z)),a.push(new b(V.p1.x,V.p1.y,V.p1.z));return}}})}),a.length==0)return;const U=this.isOrthographic()?0:n/2,d=this.isOrthographic()?0:I/2,s={};s.XPos=new b(Math.cos(U),0,Math.sin(U)),s.XNeg=new b(-Math.cos(U),0,Math.sin(U)),s.YPos=new b(0,Math.cos(d),Math.sin(d)),s.YNeg=new b(0,-Math.cos(d),Math.sin(d)),s.ZPos=new b(0,0,1),s.ZNeg=new b(0,0,-1);const o={},A={};for(const r in s)o[r]=l.ori.rotateVec3(s[r]),A[r]=Number.NEGATIVE_INFINITY;const B=new b;a.forEach((r,R)=>{if(!Number.isFinite(r.x)||!Number.isFinite(r.y)||!Number.isFinite(r.z))return;const V=r.subtract(l.tr);for(const h in s){const m=V.dot(o[h]);m>A[h]&&m!=Number.POSITIVE_INFINITY&&(A[h]=m)}B.addInPlace(r)});for(const r in A)if(A[r]==Number.POSITIVE_INFINITY)return;B.scaleInPlace(1/a.length);let Q=0;if(this.isOrthographic()){const r=new b((-A.XNeg+A.XPos)*.5,(-A.YNeg+A.YPos)*.5,(-A.ZNeg+A.ZPos)*.5),R=A.ZNeg+A.ZPos;Q=R*2,r.z=-A.ZNeg+Q,l.tr.addInPlace(l.ori.rotateVec3(r)),F=R*2;const V=A.XPos+A.XNeg,h=A.YPos+A.YNeg;this.viewHeight=Math.max(h,V/C);const m=.1;this.viewHeight+=this.viewHeight*m}else{const r=n/2,R=I/2,V=new f(Math.cos(r)*A.XPos,Math.sin(r)*A.XPos),h=V.add(new f(Math.sin(r),-Math.cos(r))),m=new f(-Math.cos(r)*A.XNeg,Math.sin(r)*A.XNeg),Z=m.add(new f(-Math.sin(r),-Math.cos(r))),c=f.intersectionOfLines(V,h,m,Z),W=new f(Math.cos(R)*A.YPos,Math.sin(R)*A.YPos),u=W.add(new f(Math.sin(R),-Math.cos(R))),J=new f(-Math.cos(R)*A.YNeg,Math.sin(R)*A.YNeg),N=J.add(new f(-Math.sin(R),-Math.cos(R))),X=f.intersectionOfLines(W,u,J,N);if(c===null||X===null){console.warn("xP or yP === null");return}Q=Math.max(c.y,X.y);const y=new b(c.x,X.x,Q);l.tr.addInPlace(l.ori.rotateVec3(y)),F=B.distanceTo(l.tr);const _=F*.1;l.tr.addInPlace(l.ori.rotateVec3(new b(0,0,_))),Q+=_}if(this.adjustNearAndFarPlanesToFocalDist){A.ZPos-=Q,A.ZNeg+=Q;const r=A.ZNeg*this.nearDistFactor,R=-A.ZPos*this.farDistFactor;this.nearParam.value=r,this.farParam.value=R}}this.setFocalDistance(F),this.globalXfoParam.value=l,this.emit("movementFinished")}updateProjectionMatrix(e,g){const t=this.isOrthographicParam.value,I=this.fovParam.value,l=this.nearParam.value,C=this.farParam.value,n=new Ee;if(t>0){const F=this.viewHeight*.5,a=-F,U=F,d=F*-g,s=F*g;n.setOrthographicMatrix(d,s,a,U,l,C)}t<1&&e.setPerspectiveMatrix(I,g,l,C),t==1?e.setFromMat4(n):t>0&&e.set(q.lerp(e.m00,n.m00,t),q.lerp(e.m01,n.m01,t),q.lerp(e.m02,n.m02,t),q.lerp(e.m03,n.m03,t),q.lerp(e.m10,n.m10,t),q.lerp(e.m11,n.m11,t),q.lerp(e.m12,n.m12,t),q.lerp(e.m13,n.m13,t),q.lerp(e.m20,n.m20,t),q.lerp(e.m21,n.m21,t),q.lerp(e.m22,n.m22,t),q.lerp(e.m23,n.m23,t),q.lerp(e.m30,n.m30,t),q.lerp(e.m31,n.m31,t),q.lerp(e.m32,n.m32,t),q.lerp(e.m33,n.m33,t))}}S.register("Camera",Ja);class Rd extends ag{constructor(e,g){super();this.bindXfo=new v,this.invBindXfo=new v,this.groupGlobalXfo=new Pg("GroupGlobalXfo"),this.groupTransformXfo=new Yl("GroupTransformXfo"),this.groupGlobalXfo.setParam(e),this.groupTransformXfo.setParam(g),this.addInput(this.groupGlobalXfo),this.addOutput(this.groupTransformXfo)}setBindXfo(e){this.bindXfo=e,this.invBindXfo=e.inverse(),this.setDirty()}evaluate(){if(this.invBindXfo){const e=this.groupGlobalXfo.getValue();this.groupTransformXfo.setClean(e.multiply(this.invBindXfo))}else this.groupTransformXfo.setClean(new v)}}class hd extends ag{constructor(e,g){super();this.groupTransformXfo=new Pg("GroupTransformXfo"),this.memberGlobalXfo=new Yl("MemberGlobalXfo",Mt.OP_READ_WRITE),this.groupTransformXfo.setParam(e),this.memberGlobalXfo.setParam(g),this.addInput(this.groupTransformXfo),this.addOutput(this.memberGlobalXfo),this._enabled=!0}disable(){this._enabled=!1,this.setDirty()}enable(){this._enabled=!0,this.setDirty()}evaluate(){const e=this.memberGlobalXfo.getValue();if(this._enabled){const g=this.groupTransformXfo.getValue();this.memberGlobalXfo.setClean(g.multiply(e))}else this.memberGlobalXfo.setClean(e)}}const Nt={disabled:0,manual:1,first:2,average:3,globalOri:4};class at extends Pl{constructor(e=""){super(e);this.initialXfoModeParam=new OC("InitialXfoMode",Nt.average,["manual","first","average","global"]),this.groupTransformParam=new cg("GroupTransform",new v),this.calculatingGroupXfo=!1,this.memberXfoOps=[],this.addParameter(this.initialXfoModeParam),this.initialXfoModeParam.on("valueChanged",()=>{this.calcGroupXfo()}),this.addParameter(this.groupTransformParam),this.groupTransformOp=new Rd(this.globalXfoParam,this.groupTransformParam)}static get INITIAL_XFO_MODES(){return Nt}updateHighlight(){setTimeout(()=>{let e=!1,g;this.isSelected()&&(e=!0,g=this.getHighlight(),g.a=.2);const t="kinematicGroupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach(I=>{I instanceof H&&(e?I.addHighlight(t,g,!0):I.removeHighlight(t,!0))})},1)}setSelected(e){super.setSelected(e),this.updateHighlight()}calcGroupXfo(){const e=Array.from(this.itemsParam.value);if(e.length==0)return;this.calculatingGroupXfo=!0,this.memberXfoOps.forEach(I=>I.disable());const g=this.initialXfoModeParam.value;let t;if(g==Nt.manual)t=this.globalXfoParam.value;else if(g==Nt.first&&e[0]instanceof H)t=e[0].globalXfoParam.value;else if(g==Nt.average){t=new v,t.ori.set(0,0,0,0);let I=0;e.forEach((l,C)=>{if(l instanceof H){const n=l.globalXfoParam.value;t.tr.addInPlace(n.tr),t.ori.addInPlace(n.ori),I++}}),t.tr.scaleInPlace(1/I),t.ori.normalizeInPlace()}else if(g==Nt.globalOri){t=new v;let I=0;e.forEach((l,C)=>{if(l instanceof H){const n=l.globalXfoParam.value;t.tr.addInPlace(n.tr),I++}}),t.tr.scaleInPlace(1/I)}else throw new Error("Invalid GROUP_XFO_MODES.");this.globalXfoParam.value=t,this.groupTransformOp.setBindXfo(t),this.memberXfoOps.forEach(I=>I.enable()),this.calculatingGroupXfo=!1}bindItem(e,g){if(super.bindItem(e,g),e instanceof H){if(this.isSelected()){const t=this.getHighlight();t.a=.2;const I="kinematicGroupItemHighlight"+this.getId();e.addHighlight(I,t,!0)}{const t=e.globalXfoParam,I=new hd(this.groupTransformParam,t);this.memberXfoOps.splice(g,0,I),this.__itemsEventHandlers[g]||(this.__itemsEventHandlers[g]={});const l=this.__itemsEventHandlers[g];l["BoundingBox.valueChanged"]=e.boundingBoxParam.on("valueChanged",C=>{this.setBoundingBoxDirty()})}}}unbindItem(e,g){if(super.unbindItem(e,g),e instanceof H){if(this.isSelected()){const t="kinematicGroupItemHighlight"+this.getId();e.removeHighlight(t,!0)}this.memberXfoOps[g].detach(),this.memberXfoOps.splice(g,1),this.setBoundingBoxDirty()}}addItem(e,g=!0){super.addItem(e,g),g&&this.calcGroupXfo()}removeItem(e,g=!0){super.removeItem(e,g),g&&this.calcGroupXfo()}setItems(e){super.setItems(e),this.calcGroupXfo()}clearItems(e=!0){super.clearItems(e),this.memberXfoOps=[],e&&this.calcGroupXfo()}loadDone(){this.calculatingGroupXfo=!0,this.calcGroupXfo(),this.calculatingGroupXfo=!1}clone(e){const g=new at;return g.copyFrom(this,e),g}}S.register("KinematicGroup",at);class di extends Pl{constructor(e){super(e);this.materialParam=new YI("Material"),this.__backupMaterials={},this.addParameter(this.materialParam),this.materialParam.on("valueChanged",()=>{this.updateMaterial()})}updateHighlight(){this.__updateHighlightHelper()}__updateHighlightHelper(){let e=!1,g;this.isSelected()&&(g=this.getHighlight(),e=!0,g.a=.2);const t="kinematicGroupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach(I=>{I instanceof H&&(e?I.addHighlight(t,g,!0):I.removeHighlight(t,!0))})}setSelected(e){super.setSelected(e),this.updateHighlight()}updateOpacity(){super.updateOpacity(),Array.from(this.itemsParam.value).forEach(e=>{e instanceof H&&(e.opacityParam.value=this.opacity)})}updateMaterial(){this.updateMaterialHelper()}updateMaterialHelper(){const e=this.materialParam.value;Array.from(this.itemsParam.value).forEach(g=>{g.traverse(t=>{if(t instanceof Lg){const l=t.materialParam;if(e){const C=l.value;C!=e&&(!C||C.getShaderName()!="LinesShader")&&(this.__backupMaterials[l.getId()]=C,l.value=e)}else this.__backupMaterials[l.getId()]&&(l.value=this.__backupMaterials[l.getId()])}})})}bindItem(e,g){if(super.bindItem(e,g),!(e instanceof H))return;if(this.isSelected()){const I=this.getHighlight();I.a=.2;const l="materialGroupItemHighlight"+this.getId();e.addHighlight(l,I,!0)}const t=this.materialParam.value;t&&e.traverse(I=>{if(I instanceof Lg){const C=I.materialParam;if(t){const n=C.value;n!=t&&(!n||n.getShaderName()!="LinesShader")&&(this.__backupMaterials[C.getId()]=n,C.value=t)}}},!0),e.opacityParam.value=this.opacity}unbindItem(e,g){if(super.unbindItem(e,g),e instanceof H&&this.isSelected()){const t="materialGroupItemHighlight"+this.getId();e.removeHighlight(t,!0)}}clone(e){const g=new di(this.__name+"clone");return g.copyFrom(this,e),g}}S.register("MaterialGroup",di);class cd extends ag{constructor(e,g){super();this.groupGlobalXfo=new Pg("GroupGlobalXfo"),this.cuttingPlane=new MU("CuttingPlane"),this.groupGlobalXfo.setParam(e),this.cuttingPlane.setParam(g),this.addInput(this.groupGlobalXfo),this.addOutput(this.cuttingPlane)}evaluate(){const e=this.groupGlobalXfo.getValue(),g=e.ori.getZaxis(),t=e.tr.dot(g);this.cuttingPlane.setClean(new Be(g.x,g.y,g.z,-t))}}class si extends Pl{constructor(e=""){super(e);this.cutAwayEnabledParam=new Je("CutAwayEnabled",!1),this.cutPlaneParam=new wt("CutPlane",new Be(1,0,0)),this.addParameter(this.cutAwayEnabledParam),this.addParameter(this.cutPlaneParam),this.cutPlaneOp=new cd(this.globalXfoParam,this.cutPlaneParam),this.cutAwayEnabledParam.on("valueChanged",C=>{this.updateCutaway(C)}),this.cutPlaneParam.on("valueChanged",C=>{this.updateCutaway(C)});const g=new Ve("plane","FlatSurfaceShader");g.getParameter("BaseColor").value=new E(1,1,1,.2);const t=new ge("PlaneGeom",new Dt(1,1),g);t.setSelectable(!1),this.addChild(t);const I=new Ve("border","LinesShader");I.getParameter("BaseColor").value=new E(1,0,0,1);const l=new ge("BorderGeom",new ti(1,1),I);l.setSelectable(!1),this.addChild(l)}updateCutaway(e){const g=this.cutAwayEnabledParam.value,t=this.cutPlaneParam.value,I=t.xyz,l=t.w;e instanceof Lg?(e.setCutawayEnabled(g),e.setCutVector(I),e.setCutDist(l)):Array.from(this.itemsParam.value).forEach(C=>{C.traverse(n=>{n instanceof Lg&&(n.setCutawayEnabled(g),n.setCutVector(I),n.setCutDist(l))},!0)})}bindItem(e,g){if(!(e instanceof H))return;this.cutAwayEnabledParam.value&&this.updateCutaway(e);const I=new gg;Array.from(this.itemsParam.value).forEach(l=>{l instanceof H&&I.addBox3(l.boundingBoxParam.value)});{const l=I.p1.x-I.p0.x,C=I.p1.y-I.p0.y,n=new v;n.sc.set(l,C,1),this.getChild(0).localXfoParam.value=n,this.getChild(1).localXfoParam.value=n}}unbindItem(e,g){e instanceof H&&e.traverse(t=>{t instanceof Lg&&t.setCutawayEnabled(!1)},!0)}clone(e){const g=new si;return g.copyFrom(this,e),g}}S.register("CuttingPlane",si);class ot extends dt{constructor(e){super(e);this.cadfileVersion=new rI("0,0,0"),this.metadataLoaded=!1}clone(e){const g=new ot;return g.copyFrom(this,e),g}getVersion(){return this.cadfileVersion}readRootLevelBinary(e,g){g.versions={},g.versions["zea-cad"]=new rI(e.loadStr()),g.sdk=e.loadStr(),this.cadfileVersion=g.versions["zea-cad"],super.readBinary(e,g)}load(e,g=new st){return this.loadPromise?this.loadPromise:(this.loadPromise=new Promise((t,I)=>{const l=e.lastIndexOf("/")>-1?e.substring(0,e.lastIndexOf("/"))+"/":"",C=e.lastIndexOf("/")>-1?e.substring(e.lastIndexOf("/")+1):"",n=C.substring(0,C.lastIndexOf("."));this.url=e,g=g.clone(),g.assetItem=this,g.url=e,g.folder=l,g.xrefs={},g.on("done",()=>{this.loaded=!0,t(),this.emit("loaded")}),g.incrementAsync(),ee.incrementWorkload(1),this.geomLibrary.once("loaded",()=>{ee.incrementWorkDone(1)}),ee.loadFile("archive",e).then(F=>{if(!(F.tree2||F.tree)){console.error("Corrupt zcad file. Missing 'tree':",e),ee.incrementWorkDone(1),g.decrementAsync();return}const a=new RI((F.tree2||F.tree).buffer,0,_e.isMobileDevice),U=this.getName();if(this.readRootLevelBinary(a,g),U!=""&&this.setName(U),g.versions["zea-cad"]=this.getVersion(),g.versions["zea-engine"]=this.getEngineDataVersion(),F.geoms)this.geomLibrary.readBinaryBuffer(C,F.geoms.buffer,g),F.geomsdata&&(this.geomLibrary.loadMetadata(F.geomsdata,g),this.metadataLoaded=!0);else if(F["geomLibrary.json"]){const d=JSON.parse(new TextDecoder("utf-8").decode(F["geomLibrary.json"])),s=l+n;d.numGeomFiles==0?(console.error("Corrupt zcad file. Missing 'geoms':",e),ee.incrementWorkDone(1)):this.geomLibrary.loadGeomFilesStream(d,s,g)}else ee.incrementWorkDone(1);g.decrementAsync()},F=>{g.decrementAsync(),ee.incrementWorkDone(1),this.emit("error",F),I(F)})}),this.loadPromise)}loadMetadata(e=""){return this.metadataLoaded?Promise.resolve():this.metadataLoadPromise?this.metadataLoadPromise:(this.metadataLoadPromise=new Promise((g,t)=>{if(this.metadataLoaded&&g(),e==""){const I=this.url;e=I.substring(0,I.lastIndexOf("."))+".zmetadata"}console.log(e),ee.incrementWorkload(),ee.loadFile("archive",e).then(I=>{const l=new st;l.versions["zea-cad"]=this.getVersion(),l.versions["zea-engine"]=this.getEngineDataVersion(),this.geomLibrary.loadMetadata(I.geomsdata,l),ee.incrementWorkDone(1),this.metadataLoaded=!0,g()},I=>{ee.incrementWorkDone(1),this.emit("error",I),t(I)})}),this.metadataLoadPromise)}}S.register("CADAsset",ot);class oi extends H{constructor(e){super(e)}clone(e){const g=new oi;return g.copyFrom(this,e),g}}S.register("CADAssembly",oi);class jl extends H{constructor(e){super(e)}clone(e){const g=new jl;return g.copyFrom(this,e),g}}S.register("CADPart",jl);class At extends ge{constructor(e){super(e);this.shattered=!1}setShatterState(e){this.shattered!=e&&(this.shattered=e,this.emit("shatterStateChanged",new YC(e)))}clone(e){const g=new At;return g.copyFrom(this,e),g}readBinary(e,g){if(g.versions["zea-engine"].compare([3,9,0])<0){if(Lg.prototype.readBinary.call(this,e,g),e.loadSInt32(),g.versions["zea-cad"].compare([0,0,4])<0){const t=e.loadStr();let l=g.assetItem.getMaterialLibrary().getMaterial(t,!1);l||(l=new Ve(t,"SimpleSurfaceShader"),l.getParameter("BaseColor").setValue(E.random(.25)),g.assetItem.getMaterialLibrary().addMaterial(l)),this.materialParam.setValue(l)}if(g.versions["zea-cad"].compare([0,0,2])>=0&&g.versions["zea-cad"].compare([0,0,4])<0){this.__layers=e.loadStrArray();for(const t of this.__layers)g.addGeomToLayer(this,t)}}else super.readBinary(e,g)}}S.register("CADBody",At);const Zd=new Hl(1,1,1);let II=null;class sn extends ge{addHighlight(e,g,t=!1){}removeHighlight(e,g=!1){}}class xg extends H{constructor(e){super(e);this.materialMapping={}}clone(e){const g=new xg;return g.copyFrom(this,e),g}setSelected(e){super.setSelected(e),e?this.activate():this.deactivate()}activate(){}deactivate(){}addHighlight(e,g,t=!1){if(super.addHighlight(e,g,!1),t){const C=g.clone();C.a=1;const n={};this.traverse(F=>{if(F instanceof sn)return!1;if(F instanceof ge){const a=F.materialParam.value;if(this.materialMapping[F.getId()]=a,!(a.getId()in n)){const U=a.clone();if(U.hasParameter("BaseColor")){const d=U.getParameter("BaseColor");d instanceof ye&&(d.colorSpace=Bg.Gamma),d.setValue(C)}if(U.hasParameter("EdgeColor")){const d=U.getParameter("EdgeColor");d instanceof ye&&(d.colorSpace=Bg.Gamma),d.setValue(C)}U.hasParameter("Overlay")&&U.getParameter("Overlay").setValue(.85),U.__isOpaque=!1,F.materialParam.value=U,n[a.getId()]=U}F.materialParam.value=n[a.getId()]}})}const l=this.getOwner().getOwner().getOwner();if(l){const C={},n={},F=this.getParameter("LinkedEntities");if(F){F.getValue().forEach((U,d)=>{if(U=="")return;const s=U.split(", "),o=s.pop();try{const A=l.resolvePath(s);if(A&&A instanceof At)if(A.getNumChildren()==0)A.setShatterState(!0),C[A.getId()]||(C[A.getId()]=A,n[A.getId()]=[]),n[A.getId()].push(o);else{const B=A.getChildByName(o);B&&B.addHighlight(e,g,!0)}else console.log("linkedEntity.addHighlight(name, color, true):",s)}catch(A){console.log(d+":"+A.message)}});for(let U in C){const d=C[U],s=n[U];d.addHighlight(e+":"+s.toString(),g,!0)}}}}removeHighlight(e,g=!1){super.removeHighlight(e,!1),g&&this.traverse(l=>{l instanceof ge&&l.getId()in this.materialMapping&&(l.materialParam.value=this.materialMapping[l.getId()],delete this.materialMapping[l.getId()])});const I=this.getOwner().getOwner().getOwner();if(I){const l={},C={},n=this.getParameter("LinkedEntities");if(n){n.getValue().forEach(a=>{if(a=="")return;const U=a.split(", "),d=U.pop();try{const s=I.resolvePath(U);if(s&&s instanceof At)if(s.getNumChildren()==0)s.setShatterState(!1),l[s.getId()]||(l[s.getId()]=s,C[s.getId()]=[]),C[s.getId()].push(d);else{const o=s.getChildByName(d);o&&o.removeHighlight(e,!0)}else console.log("linkedEntity.addHighlight(name, color, true):failed")}catch(s){console.log(s.message)}});for(let a in l){const U=l[a],d=C[a];U.removeHighlight(e+":"+d.toString(),!0)}}}}readBinary(e,g){super.readBinary(e,g),this.traverse(t=>{if(t instanceof ge){const I=t.materialParam.value;I.getShaderName()=="StandardSurfaceShader"&&I.setShaderName("FlatSurfaceShader"),t.__opacity=.99}}),g.assetItem.getGeometryLibrary().once("loaded",()=>{this.traverse(t=>{if(t.getName().startsWith("Text")){const I=[];return t.traverse(l=>{if(l instanceof ge){const n=l.geomParam.value.getBoundingBox();II||(II=new xI("plane"),II.baseColorParam.value=new E(1,1,0,.001),II.overlayParam.value=-.001);const F=new sn("plane",Zd,II),a=l.localXfoParam.value.multiply(l.geomOffsetXfoParam.value);a.tr.addInPlace(n.center()),a.sc.multiplyInPlace(n.diagonal()),F.localXfoParam.value=a,I.push(F)}},!1),I.forEach(l=>t.addChild(l,!1)),!1}},!1)})}}S.register("PMIItem",xg);class Rl extends xg{constructor(e){super(e);this.camera=null}clone(e){const g=new Rl;return g.copyFrom(this,e),g}activate(){super.activate();let e=[];this.hasParameter("GraphicalElements")&&(e=this.getParameter("GraphicalElements").getValue());const t=(()=>{let C=this;for(;C&&!(C instanceof ot);)C=C.getParentItem();return C instanceof ot?C:null})(),I=this.getParentItem().getParentItem(),l=I.getParentItem();if(l){const C=[];I.traverse(n=>{n instanceof Rl||n instanceof xg&&C.push(n)}),C.forEach(n=>{const F=e.includes(n.getName());n.setVisible(F)})}if(this.camera){const C=this.localXfoParam.value.clone(),n=this.getParameter("TargetPoint").getValue().clone(),F=this.getParameter("CameraType").getValue();C.tr.scaleInPlace(t.unitsScale),n.scaleInPlace(t.unitsScale);const a=C.tr.distanceTo(n);if(C.sc.set(1,1,1),this.camera.globalXfoParam.value=C,this.camera.setFocalDistance(a),F=="Camera_Orthographic"&&(this.camera.setIsOrthographic(1,0),this.hasParameter("CameraZoom")&&t)){const U=this.getParameter("CameraZoom").getValue(),d=1/U*t.unitsScale*2;this.camera.setFrustumHeight(d)}}if(this.hasParameter("ClippingPlaneOrigin")){const C=this.getParameter("ClippingPlaneOrigin").getValue(),n=this.getParameter("ClippingPlaneNormal").getValue(),F=!0,a=-C.dot(n)*t.unitsScale;l.traverse(U=>{if(U instanceof xg)return!1;U instanceof ge&&(U.setCutawayEnabled(F),U.setCutVector(n),U.setCutDist(a))})}else l.traverse(C=>{if(C instanceof xg)return!1;C instanceof ge&&C.setCutawayEnabled(!1)})}deactivate(){super.deactivate()}readBinary(e,g){super.readBinary(e,g),g.camera&&(this.camera=g.camera)}}S.register("PMIView",Rl);class Ai extends ot{constructor(e){super(e)}clone(e){const g=new Ai;return g.copyFrom(this,e),g}readBinary(e,g){e.loadStr();const t=e.loadStr();this.setName(t);let I=e.loadStr();const l=new v;if(g.versions["zea-cad"].compare([3,6,2])>0?(l.tr=e.loadFloat32Vec3(),l.ori=e.loadFloat32Quat(),this.localXfoParam.value=l):t==""&&this.setName(I),g.incrementAsync(),g.xrefs[I]){const C=g.xrefs[I],n=()=>{this.copyFrom(C),this.setName(t),this.localXfoParam.value=l,this.loaded=!0,this.emit("loaded"),g.decrementAsync()};C.loaded?n():C.on("loaded",n)}else{let C;g.resources?g.resources[I]?C=g.resources[I]:(I.includes("/")?I=I.slice(I.lastIndexOf("/")+1):I.includes("\\")&&(I=I.slice(I.lastIndexOf("\\")+1)),g.resources[I]?C=g.resources[I]:g.xrefLoadCallback&&(C=g.xrefLoadCallback.call(g,I,this))):g.xrefLoadCallback?C=g.xrefLoadCallback.call(g,I,this):(I.includes("/")?I=I.slice(I.lastIndexOf("/")+1):I.includes("\\")&&(I=I.slice(I.lastIndexOf("\\")+1)),C=g.folder+I+".zcad"),C?(g.xrefs[I]=this,this.load(C,new st(g)).then(()=>{g.decrementAsync()},()=>{g.decrementAsync()})):(g.decrementAsync(),console.warn(`While Loading ${this.getPath()} unable to resolve ${I}`))}}}S.register("XRef",Ai);const dg={OPAQUE:1<<0,TRANSPARENT:1<<1,OVERLAY:1<<2};class Ga extends xt{constructor(){super();this.enabled=!0,this.passIndex=-1,this.__gl=null,this.renderer=null,this.__renderer=null,this.enabledParam=new Je("Enabled",!0),this.enabled=!0,this.passIndex=0,this.addParameter(this.enabledParam),this.enabledParam.on("valueChanged",()=>this.enabled=this.enabledParam.value)}parameterValueChanged(e){super.parameterValueChanged(e),this.renderer&&this.renderer.requestRedraw()}init(e,g){if(g==null)throw new Error("Missing constructor argument.");this.__gl=e.gl,this.renderer=e,this.__renderer=e,this.passIndex=g}setPassIndex(e){this.passIndex=e}getPassType(){return dg.OPAQUE}itemAddedToScene(e,g){throw Error(`${this.constructor.name} must implement itemAddedToScene and itemRemovedFromScene`)}itemRemovedFromScene(e,g){throw Error(`${this.constructor.name} must implement itemAddedToScene and itemRemovedFromScene`)}startPresenting(){}stopPresenting(){}draw(e){throw Error("draw not implemented on GLPass")}drawHighlightedGeoms(e){}drawGeomData(e){}getGeomItemAndDist(e){throw Error("getGeomItemAndDist not implemented on GLPass")}}class ua extends H{constructor(e=5,g=50,t=new E("#DCDCDC")){super("GridTree");this.disableBoundingBox=!0,this.setSelectable(!1);const I=new Ve("gridMaterial","LinesShader");I.getParameter("BaseColor").value=t,I.getParameter("Overlay").value=0,I.getParameter("StippleValue").value=0,I.getParameter("OccludedStippleValue").value=1;const l=new Wa(e,e,g,g,!0),C=new ge("GridItem",l,I);C.setSelectable(!1),this.addChild(C,!1);const n=new sg;n.setNumVertices(2),n.setNumSegments(1),n.setSegmentVertexIndices(0,0,1);const F=n.getVertexAttribute("positions");F.getValueRef(0).set(e*-.5,0,0),F.getValueRef(1).set(e*.5,0,0);const a=new Ve("gridXAxisMaterial","LinesShader");a.getParameter("BaseColor").value=new E(t.luminance(),0,0),a.getParameter("Overlay").value=0,a.getParameter("StippleValue").value=0,a.getParameter("OccludedStippleValue").value=1;const U=new ge("xAxisLine",n,a);U.setSelectable(!1),this.addChild(U,!1);const d=new Ve("gridYAxisMaterial","LinesShader");d.getParameter("BaseColor").value=new E(0,t.luminance(),0),d.getParameter("Overlay").value=0,d.getParameter("StippleValue").value=0,d.getParameter("OccludedStippleValue").value=1;const s=new ge("yAxisLine",n,d);s.setSelectable(!1);const o=new v;o.ori.setFromAxisAndAngle(new b(0,0,1),Math.PI*.5),s.geomOffsetXfoParam.value=o,this.addChild(s,!1)}_cleanBoundingBox(){return new gg}}S.register("GridTreeItem",ua);const md=new E("#DCDCDC");class Wd{constructor(){this.envMapParam=new TI("EnvMap"),this.displayEnvMapParam=new Je("Display EnvMap",!1),this.envMapLODParam=new k("EnvMapLOD",0),this.root=new H("root")}getRoot(){return this.root}getResourceLoader(){return ee}setEnvMap(e){this.envMapParam.value=e}setupGrid(e=5,g=50,t=md){const I=new ua(e,g,t);return this.root.addChild(I,!1),I}}class Sa extends dt{constructor(e){super(e);this.geomLibrary.on("loaded",()=>{this.emit("geomsLoaded")})}readBinary(e,g){g.versions["zea-engine"]||(g.versions["zea-mesh"]=new rI(e.loadStr()));const t=e.loadUInt32();return super.readBinary(e,g),g.versions["zea-engine"].compare([2,1,0])<0&&e.loadFloat32Vec2(),this.geomLibrary.setNumGeoms(e.loadUInt32()),t}load(e,g=new st){return new Promise((t,I)=>{const l=e.lastIndexOf("/")>-1?e.substring(0,e.lastIndexOf("/"))+"/":"",C=e.lastIndexOf("/")>-1?e.substring(e.lastIndexOf("/")+1):"",n=C.substring(0,C.lastIndexOf("."));let F=0;g.assetItem=this,g.url=e,g.folder=l,ee.incrementWorkload(1),this.geomLibrary.on("loaded",()=>{ee.incrementWorkDone(1)}),ee.loadFile("archive",e).then(a=>{let U;if(a.tree2)U=new RI(a.tree2.buffer,0,_e.isMobileDevice);else{const d=a.tree?a.tree:a[Object.keys(a)[0]];U=new RI(d.buffer,0,_e.isMobileDevice),g.versions["zea-engine"]=new rI}if(F=this.readBinary(U,g),this.loaded=!0,this.emit("loaded"),F==0&&a.geoms)this.geomLibrary.readBinaryBuffer(C,a.geoms.buffer,g);else{const d=l+n,s={numGeomsPerFile:F,numGeoms:this.geomLibrary.getNumGeoms()};this.geomLibrary.loadGeomFilesStream(s,d,g)}t()},a=>{this.emit("error",a),I(a)})})}}S.register("VLAAsset",Sa);class bd extends dt{constructor(e){super(e);this.splitObjects=new Je("splitObjects",!1),this.splitGroupsIntoObjects=new Je("splitGroupsIntoObjects",!1),this.loadMtlFile=new Je("loadMtlFile",!0),this.unitsConversion=new k("unitsConversion",1),this.defaultShader=new Zg("defaultShader",""),this.splitObjectsParam=new Je("splitObjects",!1),this.splitGroupsIntoObjectsParam=new Je("splitGroupsIntoObjects",!1),this.loadMtlFileParam=new Je("loadMtlFile",!0),this.unitsConversionParam=new k("unitsConversion",1),this.defaultShaderParam=new Zg("defaultShader",""),this.addParameter(this.splitObjectsParam),this.addParameter(this.splitGroupsIntoObjectsParam),this.addParameter(this.loadMtlFileParam),this.addParameter(this.unitsConversionParam),this.addParameter(this.defaultShaderParam)}load(e){return this.loaded=!1,new Promise((g,t)=>{const I=e.substring(0,e.lastIndexOf("/"))+"/",l=B=>{const Q=B.split(`
`),r=/\s+/;let R;const V=function(m){if(m.length==3)return new E(parseFloat(m[0]),parseFloat(m[1]),parseFloat(m[2]));throw new Error("Unable to parse a color from the following parts:"+m.join("_"))},h=(m,Z)=>{const c=new qg(m);return c.load(I+Z),c};for(let m=0;m<Q.length;m++){let Z=Q[m].trim();if(Z.startsWith("#"))continue;Z.includes("#")&&(Z=Z.substring(0,Z.indexOf("#")).trim());const c=Z.split(r),W=c.shift(),u=c.join(" ");switch(W){case"newmtl":R=new Ve(u),R.setShaderName("StandardSurfaceShader"),this.materialLibrary.addMaterial(R);break;case"Kd":{const p=R.getParameter("BaseColor");p.value=V(c),p instanceof ye&&p.colorSpace==Bg.Linear;break}case"map_Kd":{const p=R.getParameter("BaseColor");p instanceof ye&&p.setImage(h("map_Kd",c[0]));break}case"Ks":const J=(parseFloat(c[0])+parseFloat(c[1])+parseFloat(c[2]))/3;R.getParameter("Roughness").value=1-J,R.getParameter("Reflectance").value=J;break;case"map_Ks":const N=R.getParameter("Roughness");N instanceof Oe&&N.setImage(h("map_Ks",c[0])),R.getParameter("Reflectance").value=.2;break;case"d":const X=parseFloat(u);X<1&&(R.setShaderName("TransparentSurfaceShader"),R.getParameter("Opacity").value=X);break;case"map_d":R.getParameter("alpha").value=parseFloat(c[0]);break;case"map_bump":const y=R.getParameter("Normal");y instanceof ye&&y.setImage(h("normal",c[0]));break}}},C=B=>new Promise(Q=>{MC(B,r=>{ee.incrementWorkDone(1),l(r),ee.incrementWorkDone(1),Q()})}),n=[],F=[],a=[],U={},d=B=>VI(this,void 0,void 0,function*(){const Q=B.split(`
`),r=/\s+/;let R,V,h=0;const m=W=>{if(W in U){let u=1;for(;W+String(u)in U;)u++;W=W+String(u)}R={verticesRemapping:{},texCoordsRemapping:{},normalsRemapping:{},vertexIndices:[],texCoordIndices:[],normalIndices:[],numVertices:0,numTexCoords:0,numNormals:0,faceCounts:[],material:V},U[W]=R,h++};m("geom");const Z=this.splitGroupsIntoObjectsParam.value,c=!1;for(let W=0;W<Q.length&&!c;W++){let u=Q[W].trim();if(u.startsWith("#"))continue;u.includes("#")&&(u=u.substring(0,u.indexOf("#")).trim());const J=u.split(r),N=J.shift(),X=J.join(" ");switch(N){case"":case"s":continue;case"mtllib":if(!this.loadMtlFileParam.value)continue;ee.incrementWorkload(2);const y=I+X;y&&(yield C(y));break;case"o":m(X);break;case"usemtl":V=X,m(X+Object.keys(U).length);break;case"g":Z&&m(X?J.join("_"):"Group"+h);break;case"v":n.push(J.map(p=>parseFloat(p)));break;case"vt":a.push(J.map(p=>parseFloat(p)));break;case"vn":F.push(J.map(p=>parseFloat(p)));break;case"f":{const p=[],_=[],ae=[];for(let ne=0,K=J.length;ne<K;ne++){const te=J[ne].split("/").map(Ce=>parseInt(Ce)-1),j=te[0];let se=R.verticesRemapping[j];if(se==null&&(se=R.numVertices,R.verticesRemapping[j]=se,R.numVertices++),p.push(se),te.length>1&&!isNaN(te[1])){const Ce=te[1];_.push(Ce)}if(te.length>2&&!isNaN(te[2])){const Ce=te[2];ae.push(Ce)}}R.vertexIndices.push(p),ae.length>0&&R.normalIndices.push(ae),_.length>0&&R.texCoordIndices.push(_),R.faceCounts[p.length-3]==null&&(R.faceCounts[p.length-3]=[]),R.faceCounts[p.length-3]++;break}default:console.warn("Unhandled line:"+u)}}}),s=()=>{for(const B in U)U[B].numVertices!=0&&o(B,U[B]);this.emit("loaded"),this.getGeometryLibrary().emit("loaded"),this.emit("geomsLoaded"),g()},o=(B,Q)=>{for(let J=0;J<Q.faceCounts.length;J++)Q.faceCounts[J]==null&&(Q.faceCounts[J]=0);const r=Q.numVertices,R=new ht;R.setDebugName(B),R.setFaceCounts(Q.faceCounts),R.setNumVertices(r);const V=R.getVertexAttribute("positions"),h=this.unitsConversionParam.value;for(const J in Q.verticesRemapping){const N=Number.parseInt(J),X=Q.verticesRemapping[N];V.getValueRef(X).set(n[N][0]*h,n[N][1]*h,n[N][2]*h)}let m,Z;Q.normalIndices.length>0&&(m=new Qg,R.addVertexAttribute("normals",m)),Q.texCoordIndices.length>0&&(Z=new Sg,R.addVertexAttribute("texCoords",Z));const c=Array(Q.faceCounts.length).fill(0);for(let J=0;J<Q.vertexIndices.length;J++){const N=Q.vertexIndices[J];let X=0;for(let y=0;y<N.length-3;++y)Q.faceCounts[y]&&(X+=Q.faceCounts[y]);if(X+=c[N.length-3],c[N.length-3]++,R.setFaceVertexIndices(X,N),m){const y=Q.normalIndices[J];for(let p=0;p<y.length;p++){const _=new b(F[y[p]][0],F[y[p]][1],F[y[p]][2]);m.setFaceVertexValue(X,p,_)}}if(Z&&Q.texCoordIndices.length==Q.vertexIndices.length){const y=Q.texCoordIndices[J];for(let p=0;p<y.length;p++){const _=new f(a[y[p]][0],a[y[p]][1]);Z.setFaceVertexValue(X,p,_)}}}const W=new ge(B,R),u=R.getBoundingBox().center();{const J=u.negate(),N=R.getVertexAttribute("positions");for(let X=0;X<N.getCount();X++)N.getValueRef(X).addInPlace(J);R.setBoundingBoxDirty()}if(W.localXfoParam.value=new v(u),Q.material!=null&&this.materialLibrary.hasMaterial(Q.material))W.materialParam.value=this.materialLibrary.getMaterial(Q.material);else{const J=this.defaultShaderParam.value,N=new Ve(B+" mat");N.setShaderName(J!=""?J:"StandardSurfaceShader"),this.materialLibrary.addMaterial(N),W.materialParam.value=N}this.addChild(W,!1)};(()=>{ee.incrementWorkload(2),MC(e,B=>{ee.incrementWorkDone(1),d(B).then(()=>{s(),ee.incrementWorkDone(1)})},B=>{this.emit("error",B),t(B)})})()})}}class Na extends xt{constructor(){super();this.__activated=!1}activateTool(){if(this.__activated)throw new Error("Tool already activate");this.__activated=!0,this.emit("activatedChanged",{activated:this.__activated})}deactivateTool(){this.__activated=!1,this.emit("activatedChanged",{activated:this.__activated})}onPointerDown(e){}onPointerMove(e){}onPointerUp(e){}onPointerDoublePress(e){}onPointerEnter(e){}onPointerLeave(e){}onWheel(e){}onKeyDown(e){}onKeyUp(e){}onTouchCancel(e){}}const ze={pan:0,dolly:1,focussing:2,look:3,turntable:4,tumbler:5,trackball:6};class Jd extends Na{constructor(e){super();this.orbitAroundCursor=!1,this.zoomTowardGeomUnderCursor=!1,this.aimFocusOnTouchTap=2,this.aimFocusOnMouseClick=2,this.enabledWASDWalkMode=!1,this.defaultManipulationState=ze.turntable,this.pointerDown=!1,this.dragging=0,this.keyboardMovement=!1,this.keysPressed=[],this.velocity=new b,this.prevVelocityIntegrationTime=-1,this.ongoingTouches={},this.mouseWheelMovementDist=0,this.mouseWheelZoomCount=0,this.mouseWheelZoomId=-1,this.orbitRateParam=new k("OrbitRate",_e.isMobileDevice?.5:1),this.dollySpeedParam=new k("DollySpeed",.02),this.mouseWheelDollySpeedParam=new k("MouseWheelDollySpeed",.1),this.walkSpeedParam=new k("WalkSpeed",5),this.walkModeCollisionDetection=new Je("WalkModeCollisionDetection",!1),this.appData=e,this.defaultManipulationState=ze.turntable,this.manipulationState=this.defaultManipulationState,this.addParameter(this.orbitRateParam),this.addParameter(this.dollySpeedParam),this.addParameter(this.mouseWheelDollySpeedParam),this.addParameter(this.walkSpeedParam),this.addParameter(this.walkModeCollisionDetection)}activateTool(){super.activateTool(),this.appData&&this.appData.renderer&&(this.prevCursor=this.appData.renderer.getGLCanvas().style.cursor,this.appData.renderer.getGLCanvas().style.cursor="cursor")}deactivateTool(){super.deactivateTool(),this.appData&&this.appData.renderer&&(this.appData.renderer.getGLCanvas().style.cursor=this.prevCursor)}setDefaultManipulationMode(e){if(typeof e=="string"?this.defaultManipulationState=ze[e]:this.defaultManipulationState=e,!Object.values(ze).includes(this.defaultManipulationState))throw new Error("Invalid Camera Manipulation Mode. Must be one of "+Object.keys(ze))}look(e,g){const{viewport:t}=e,I=t.getCamera(),l=this.orbitRateParam.value,C=I.globalXfoParam.value,n=new de;n.rotateZ(g.x/t.getWidth()*Math.PI*l),C.ori=n.multiply(C.ori);const F=new de;F.rotateX(g.y/t.getHeight()*Math.PI*l),C.ori.multiplyInPlace(F),I.globalXfoParam.value=C}turntable(e,g){const{viewport:t}=e,I=t.getCamera(),l=this.orbitRateParam.value,C=I.globalXfoParam.value,n=C.ori.inverse().rotateVec3(C.tr.subtract(this.orbitTarget)),F=new de;F.rotateZ(g.x/t.getWidth()*2*Math.PI*-l),C.ori=F.multiply(C.ori);const a=new de;a.rotateX(g.y/t.getHeight()*Math.PI*-l),C.ori.multiplyInPlace(a),C.tr=this.orbitTarget.add(C.ori.rotateVec3(n)),I.globalXfoParam.value=C}tumbler(e,g){const{viewport:t}=e,I=t.getCamera(),l=this.orbitRateParam.value,C=I.globalXfoParam.value,n=C.ori.getXaxis(),F=C.ori.getYaxis(),a=C.ori.getZaxis(),d=n.scale(-g.x).add(F.scale(g.y)).cross(a);d.normalizeInPlace();const s=g.length(),o=C.ori.inverse().rotateVec3(C.tr.subtract(this.orbitTarget)),A=new de;A.setFromAxisAndAngle(d,s/t.getWidth()*Math.PI*-l),C.ori=A.multiply(C.ori),C.tr=this.orbitTarget.add(C.ori.rotateVec3(o)),I.globalXfoParam.value=C}trackball(e,g){const{viewport:t}=e,I=t.getCamera(),l=this.orbitRateParam.value,C=I.globalXfoParam.value,n=C.ori.getXaxis(),F=C.ori.getYaxis(),a=C.ori.getZaxis(),d=n.scale(-g.x).add(F.scale(g.y)).cross(a);d.normalizeInPlace();const s=g.length(),o=C.ori.inverse().rotateVec3(C.tr.subtract(this.orbitTarget)),A=new de;A.setFromAxisAndAngle(d,s/t.getWidth()*Math.PI*-l),C.ori=A.multiply(C.ori),C.tr=this.orbitTarget.add(C.ori.rotateVec3(o)),I.globalXfoParam.value=C}pan(e,g){const{viewport:t}=e,I=t.getCamera(),l=new v,C=new b(1,0,0),n=new b(0,1,0);if(I.isOrthographic()){const a=I.getFrustumHeight(),U=a*(t.getWidth()/t.getHeight());l.tr=C.scale(-(g.x/t.getWidth())*U),l.tr.addInPlace(n.scale(g.y/t.getHeight()*a))}else{const a=I.getFocalDistance(),U=I.getFov(),d=2*a*Math.tan(.5*U),s=d*(t.getWidth()/t.getHeight());l.tr=C.scale(-(g.x/t.getWidth())*s),l.tr.addInPlace(n.scale(g.y/t.getHeight()*d))}const F=I.globalXfoParam.value;I.globalXfoParam.value=F.multiply(l)}dolly(e,g){const{viewport:t}=e,I=t.getCamera(),l=I.getFocalDistance(),C=()=>{const F=g.y*this.dollySpeedParam.value*l,a=new v;a.tr.set(0,0,F);const U=I.globalXfoParam.value;I.globalXfoParam.value=U.multiply(a)},n=()=>{const F=g.y*this.dollySpeedParam.value,a=I.getFrustumHeight(),U=a*F;I.setFrustumHeight(a+U)};I.isOrthographic()?n():C()}initDrag(e){const{pointerPos:g}=e;e.setCapture(this),this.pointerDown=!0;const I=e.viewport.getCamera(),l=I.globalXfoParam.value;if(this.orbitAroundCursor)if(e.intersectionData!=null&&this.orbitAroundCursor){this.orbitTarget=e.intersectionData.intersectionPos;const C=l.inverse().transformVec3(e.intersectionData.intersectionPos);I.setFocalDistance(-C.z)}else e.pointerRay?this.orbitTarget=e.pointerRay.pointAtDist(I.getFocalDistance()):this.orbitTarget=l.tr.add(l.ori.getZaxis().scale(-I.getFocalDistance()));else this.orbitTarget=l.tr.add(l.ori.getZaxis().scale(-I.getFocalDistance()));this.prevPointerPos=g,this.dragging=1}endDrag(e){e.getCapture()==this&&e.releaseCapture(),this.dragging=0,this.pointerDown=!1}aimFocus(e,g,t=-1,I=400){this.focusIntervalId&&clearInterval(this.focusIntervalId);const l=Math.round(I/20),C=this.manipulationState;let n=0;const F=()=>{const a=e.globalXfoParam.value,U=e.getFocalDistance(),d=g.subtract(a.tr),s=d.normalizeInPlace(),o=a.clone();if(C==ze.turntable||C==ze.look){{const Q=a.ori.getZaxis().clone();Q.z=0;const r=d.negate();r.z=0;const R=new de;R.setFrom2Vectors(Q,r),o.ori=R.multiply(o.ori)}{const Q=a.ori.getXaxis().clone(),r=a.ori.getZaxis().clone(),R=d.negate();R.subtractInPlace(Q.scale(R.dot(Q))),R.normalizeInPlace();const V=new de;r.cross(R).dot(Q)>0?V.rotateX(r.angleTo(R)):V.rotateX(-r.angleTo(R)),o.ori=o.ori.multiply(V)}{const Q=o.ori.getXaxis().clone(),r=Q.clone();r.z=0,r.normalizeInPlace();const R=new de;R.setFrom2Vectors(Q,r),o.ori=R.multiply(o.ori)}}else{const Q=a.ori.getZaxis().clone(),r=d.negate(),R=new de;R.setFrom2Vectors(Q,r),o.ori=R.multiply(o.ori)}const A=Math.pow(n/l,2),B=a.clone();if(B.ori=a.ori.lerp(o.ori,A),t>0){const Q=d.scale(s-t);B.tr.addInPlace(Q.scale(A))}e.setFocalDistance(U+(s-U)*A),e.globalXfoParam.value=B,n++,n<=l?this.focusIntervalId=setTimeout(F,20):(this.focusIntervalId=void 0,this.emit("movementFinished"),e.emit("movementFinished"))};F()}orientPointOfView(e,g,t,I=0,l=400){this.focusIntervalId&&clearInterval(this.focusIntervalId);const C=Math.round(l/20);let n=0;const F=()=>{const a=e.globalXfoParam.value,U=e.getTargetPosition(),d=Math.pow(n/C,2),s=g.subtract(a.tr),o=s.normalizeInPlace(),A=s.scale(o-I),B=a.tr.add(A.scale(d)),Q=U.lerp(t,d);e.setPositionAndTarget(B,Q),n++,n<=C?this.focusIntervalId=setTimeout(F,20):(this.focusIntervalId=void 0,this.emit("movementFinished"),e.emit("movementFinished"))};F()}onPointerDoublePress(e){const g=t=>{const l=e.viewport.getCamera(),n=l.globalXfoParam.value.tr.add(t.dir.scale(e.intersectionData.dist));this.aimFocus(l,n),e.aimTarget=n,e.aimDistance=e.intersectionData.dist,this.emit("aimingFocus",e),l.emit("aimingFocus",e),e.stopPropagation()};if(e.intersectionData&&this.aimFocusOnMouseClick){if(e.pointerType===ve.mouse&&this.aimFocusOnMouseClick==2){const t=e;g(t.pointerRay),t.preventDefault()}e.pointerType===ve.touch&&this.aimFocusOnTouchTap==2&&g(e.pointerRay)}}onPointerDown(e){if(e.pointerType===ve.mouse){this.dragging==1&&this.endDrag(e),this.initDrag(e);const g=e;g.button==2?this.manipulationState=ze.pan:g.ctrlKey&&g.altKey?this.manipulationState=ze.dolly:g.ctrlKey||g.button==2?this.manipulationState=ze.look:this.manipulationState=this.defaultManipulationState,g.preventDefault()}else e.pointerType===ve.touch&&this._onTouchStart(e);e.stopPropagation()}onPointerMove(e){this.dragging!=0&&(e.pointerType===ve.mouse&&this._onMouseMove(e),e.pointerType===ve.touch&&this._onTouchMove(e),this.dragging=2,e.stopPropagation())}_onMouseMove(e){if(!this.pointerDown)return;const g=e.pointerPos,t=g.subtract(this.prevPointerPos);switch(this.manipulationState){case ze.turntable:this.turntable(e,t);break;case ze.tumbler:this.tumbler(e,t);break;case ze.trackball:this.trackball(e,t);break;case ze.look:this.look(e,t);break;case ze.pan:this.pan(e,g.subtract(this.prevPointerPos));break;case ze.dolly:this.dolly(e,t);break}this.prevPointerPos=g,e.preventDefault()}_onTouchMove(e){const g=e.touches;if(g.length==1){const t=g[0],I=new f(t.clientX,t.clientY),l=this.ongoingTouches[t.identifier];if(!l)return;const C=I.subtract(l.pos);switch(this.defaultManipulationState){case ze.look:C.scaleInPlace(6),this.look(e,C);break;case ze.turntable:this.turntable(e,C);break;case ze.tumbler:this.tumbler(e,C);break;case ze.trackball:this.trackball(e,C);break}l.pos=I}else if(g.length==2){const t=g[0],I=this.ongoingTouches[t.identifier],l=g[1],C=this.ongoingTouches[l.identifier];if(!I||!C)return;const n=new f(t.clientX,t.clientY),F=new f(l.clientX,l.clientY),a=C.pos.subtract(I.pos).length(),U=F.subtract(n).length(),d=a-U,s=n.subtract(I.pos),o=F.subtract(C.pos),A=s.add(o);A.scaleInPlace(.5);const B=d*.002,{viewport:Q}=e,r=Q.getCamera(),R=r.getFocalDistance(),V=r.getFov(),h=new b(1,0,0),m=new b(0,1,0),Z=2*R*Math.tan(.5*V),c=Z*(Q.getWidth()/Q.getHeight()),W=new v;W.tr=h.scale(-(A.x/Q.getWidth())*c),W.tr.addInPlace(m.scale(A.y/Q.getHeight()*Z));const u=B*R;switch(r.setFocalDistance(R+u),W.tr.z+=u,this.defaultManipulationState){case ze.tumbler:case ze.trackball:const N=C.pos.subtract(I.pos),X=F.subtract(n);let y=N.normalize().angleTo(X.normalize());N.cross(X)<0&&(y=-y);const p=new de;p.rotateZ(y),W.ori.multiplyInPlace(p);break}const J=r.globalXfoParam.value;r.globalXfoParam.value=J.multiply(W),I.pos=n,C.pos=F}}onPointerUp(e){if(this.dragging==1){if(this.endDrag(e),e.intersectionData&&(e.pointerType===ve.mouse&&this.aimFocusOnMouseClick==1||e.pointerType===ve.touch&&this.aimFocusOnTouchTap==1)){const t=e.viewport.getCamera(),I=t.globalXfoParam.value,l=(e.pointerType===ve.mouse,e.pointerRay),C=I.tr.add(l.dir.scale(e.intersectionData.dist));this.aimFocus(t,C),e.aimTarget=C,e.aimDistance=e.intersectionData.dist,this.emit("aimingFocus",e),t.emit("aimingFocus",e),e.stopPropagation(),e.pointerType===ve.mouse&&e.preventDefault()}}else if(this.dragging==2){if(e.pointerType===ve.mouse)this.endDrag(e),this.emit("movementFinished"),e.viewport.getCamera().emit("movementFinished");else if(e.pointerType===ve.touch){const g=e,{changedTouches:t,touches:I}=g;for(let l=0;l<t.length;l++)this.__endTouch(t[l]);Object.keys(this.ongoingTouches).length==0?this.endDrag(e):I.length||(this.endDrag(e),this.ongoingTouches={}),g.preventDefault()}e.stopPropagation()}}onPointerLeave(e){this.keysPressed.length>0&&(this.keysPressed=[],this.velocity.set(0,0,0),this.keyboardMovement=!1)}onWheel(e){const t=e.viewport.getCamera(),I=this.mouseWheelDollySpeedParam.value,l=e.shiftKey?.1:.5,C=t.globalXfoParam.value;let n;if(!t.isOrthographic())if(this.zoomTowardGeomUnderCursor)if(e.intersectionData!=null){n=C.tr.subtract(e.intersectionData.intersectionPos),n.normalizeInPlace();const o=C.inverse().transformVec3(e.intersectionData.intersectionPos);t.setFocalDistance(-o.z)}else{const o=e.pointerRay.pointAtDist(t.getFocalDistance());n=C.tr.subtract(o),n.normalizeInPlace()}else n=t.globalXfoParam.value.ori.getZaxis();const F=6,a=e.deltaY<0?-1:1,U=()=>{const o=t.getFocalDistance(),A=o*this.mouseWheelMovementDist;C.tr.addInPlace(n.scale(A)),t.setFocalDistance(o+A),t.globalXfoParam.value=C,this.mouseWheelZoomCount++,this.mouseWheelZoomCount<F?this.mouseWheelZoomId=window.setTimeout(U,10):(this.mouseWheelZoomId=-1,this.emit("movementFinished"),t.emit("movementFinished"))},d=()=>{const o=50*this.mouseWheelMovementDist;new v().tr.set(0,0,o),C.tr.addInPlace(n.scale(o)),t.globalXfoParam.value=C},s=()=>{const o=t.getFrustumHeight(),A=o*this.mouseWheelMovementDist;if(t.setFrustumHeight(o+A),e.intersectionData&&this.zoomTowardGeomUnderCursor){const B=C.tr.subtract(e.intersectionData.intersectionPos),Q=C.ori.getZaxis();B.subtractInPlace(Q.scale(B.dot(Q))),C.tr.addInPlace(B.scale(A/(o+A))),t.globalXfoParam.value=C}this.mouseWheelZoomCount++,this.mouseWheelZoomCount<F?this.mouseWheelZoomId=window.setTimeout(s,10):(this.mouseWheelZoomId=-1,this.emit("movementFinished"),t.emit("movementFinished"))};this.mouseWheelZoomId>0?(this.mouseWheelMovementDist+=a*I*l*.5/F,this.mouseWheelZoomCount=0):(this.mouseWheelMovementDist=a*I*l/F,this.mouseWheelZoomCount=0,t.isOrthographic()?s():e.ctrlKey?d():U()),e.preventDefault(),e.stopPropagation()}integrateVelocityChange(e){const{viewport:g}=e,t=g.getCamera(),I=performance.now();if(this.prevVelocityIntegrationTime>0){const l=(I-this.prevVelocityIntegrationTime)/1e3,C=this.walkSpeedParam.value;if(C>0){const n=new v;n.tr=this.velocity.normalize().scale(C*l);const a=t.globalXfoParam.value.multiply(n);if(this.walkModeCollisionDetection.value){const A=new v(a.tr),B=new Ag(a.tr,new b(0,0,-1)),Q=g.getRenderer().raycastCluster(A,B,1.5,.5,dg.OPAQUE);if(Q.length>0){let r=0;Q.forEach(R=>{r+=R.dist}),r/=Q.length,a.tr=B.start.add(B.dir.scale(r-1.5))}}t.globalXfoParam.value=a}}this.prevVelocityIntegrationTime=I}onKeyDown(e){if(!this.enabledWASDWalkMode)return;const g=e.key.toLowerCase();if(!this.keysPressed.includes(g)){switch(g){case"w":this.velocity.z-=1;break;case"s":this.velocity.z+=1;break;case"a":this.velocity.x-=1;break;case"d":this.velocity.x+=1;break;default:return}if(e.stopPropagation(),this.keysPressed.push(g),!this.keyboardMovement){this.keyboardMovement=!0,this.prevVelocityIntegrationTime=performance.now();const t=()=>{this.integrateVelocityChange(e),this.keyboardMovement&&window.requestAnimationFrame(t)};window.requestAnimationFrame(t)}}}onKeyUp(e){const g=e.key.toLowerCase();if(!this.keysPressed.includes(g))return;switch(g){case"w":this.velocity.z+=1;break;case"s":this.velocity.z-=1;break;case"a":this.velocity.x+=1;break;case"d":this.velocity.x-=1;break;default:return}e.stopPropagation();const t=this.keysPressed.indexOf(g);this.keysPressed.splice(t,1),this.keysPressed.length==0&&(this.keyboardMovement=!1)}__startTouch(e){this.ongoingTouches[e.identifier]={identifier:e.identifier,pos:new f(e.clientX,e.clientY)}}__endTouch(e){delete this.ongoingTouches[e.identifier]}_onTouchStart(e){const g=e.changedTouches;for(let t=0;t<g.length;t++)this.__startTouch(g[t]);this.initDrag(e)}onTouchEnd(e){e.preventDefault(),e.stopPropagation();const g=e.changedTouches;for(let t=0;t<g.length;t++)this.__endTouch(g[t]);Object.keys(this.ongoingTouches).length==0&&this.endDrag(e)}onTouchCancel(e){e.preventDefault();const g=e.touches;for(let t=0;t<g.length;t++)this.__endTouch(g[t]);Object.keys(this.ongoingTouches).length==0&&this.endDrag(e)}static get MANIPULATION_MODES(){return ze}}const Gd=function(i,e){let g=null;if(e.webglContextType!=null)try{g=i.getContext(e.webglContextType,e),g.name=e.webglContextType}catch{}else{const t=["webgl2","webgl"];for(let I=0;I<t.length;I++){const l=t[I];try{g=i.getContext(l,e),g.name=l}catch{}if(g)break}}if(!g)throw new Error("WebGL not supported on your system");return g.sizeInBytes=function(t){switch(t){case this.BYTE:case this.UNSIGNED_BYTE:return 1;case this.SHORT:case this.UNSIGNED_SHORT:return 2;case this.INT:case this.UNSIGNED_INT:case this.FLOAT:return 4;default:throw new Error("unknown type")}},g.name=="webgl2"?(g.floatTexturesSupported=!0,g.__ext_float_linear=g.getExtension("OES_texture_float_linear"),g.__ext_texture_half_float_linear=g.getExtension("OES_texture_half_float_linear"),g.__ext_color_buffer_float=g.getExtension("EXT_color_buffer_float")):(g.__ext_float=g.getExtension("OES_texture_float"),g.__ext_float?(g.floatTexturesSupported=!0,g.__ext_float_linear=g.getExtension("OES_texture_float_linear")):console.warn("OES_texture_float is not available"),g.__ext_half_float=g.getExtension("OES_texture_half_float"),g.__ext_half_float&&(g.HALF_FLOAT=g.__ext_half_float.HALF_FLOAT_OES,g.floatTexturesSupported=!0,g.__ext_texture_half_float_linear=g.getExtension("OES_texture_half_float_linear")),g.__ext_color_buffer_float=g.getExtension("EXT_color_buffer_float"),g.__ext_std_derivatives=g.getExtension("OES_standard_derivatives"),g.__ext_Inst=g.getExtension("ANGLE_instanced_arrays"),g.__ext_Inst&&(g.vertexAttribDivisor=g.__ext_Inst.vertexAttribDivisorANGLE.bind(g.__ext_Inst),g.drawArraysInstanced=g.__ext_Inst.drawArraysInstancedANGLE.bind(g.__ext_Inst),g.drawElementsInstanced=g.__ext_Inst.drawElementsInstancedANGLE.bind(g.__ext_Inst)),g.__ext_VAO=g.getExtension("OES_vertex_array_object"),g.__ext_VAO&&(g.createVertexArray=g.__ext_VAO.createVertexArrayOES.bind(g.__ext_VAO),g.deleteVertexArray=g.__ext_VAO.deleteVertexArrayOES.bind(g.__ext_VAO),g.bindVertexArray=g.__ext_VAO.bindVertexArrayOES.bind(g.__ext_VAO)),g.__ext_element_index_uint=g.getExtension("OES_element_index_uint"),g.__ext_WEBGL_depth_texture=g.getExtension("WEBGL_depth_texture"),g.__ext_WEBGL_depth_texture&&(g.UNSIGNED_INT_24_8=g.__ext_WEBGL_depth_texture.UNSIGNED_INT_24_8_WEBGL),g.DRAW_FRAMEBUFFER=g.FRAMEBUFFER),g.__ext_frag_depth=g.getExtension("EXT_frag_depth"),g.setupInstancedQuad=function(){const t=new Float32Array([0,1,2,3]),I=new Uint16Array([0,1,2,2,1,3]);this.__quadVertexIdsBuffer=this.createBuffer(),this.bindBuffer(this.ARRAY_BUFFER,this.__quadVertexIdsBuffer),this.bufferData(this.ARRAY_BUFFER,t,this.STATIC_DRAW),this.__quadIndexBuffer=this.createBuffer(),this.bindBuffer(this.ELEMENT_ARRAY_BUFFER,this.__quadIndexBuffer),this.bufferData(this.ELEMENT_ARRAY_BUFFER,I,this.STATIC_DRAW),this.__quadattrbuffers={vertexIDs:{buffer:this.__quadVertexIdsBuffer,dataType:"Float32",dimension:1,count:t.length,shared:!0}}},g.drawQuad=function(){this.drawElements(this.TRIANGLES,6,this.UNSIGNED_SHORT,0)},g},pa=function(i,e){if(!e.width||!e.height){if(!e.width)throw new Error("Invalid texture params. 'width' not provided");if(!e.height)throw new Error("Invalid texture params. 'height' not provided")}const g=i.getParameter(i.MAX_TEXTURE_SIZE);if(e.width<=0||e.width>g||e.height<=0||e.height>g)throw new Error("GLTextureParams: Invalid texture size. width:"+e.width+" height:"+e.height+" maxSize:"+g);const t={width:e.width,height:e.height},I=C=>isNaN(C)?i[C]:C,l=(C,n)=>{C in e?t[C]=I(e[C]):n&&(t[C]=I(n))};if(l("format"),l("internalFormat",t.format),l("type",i.UNSIGNED_BYTE),l("minFilter",e.filter?e.filter:i.LINEAR),l("magFilter",e.filter?e.filter:i.LINEAR),l("wrapS",e.wrapS?e.wrapS:i.CLAMP_TO_EDGE),l("wrapT",e.wrapT?e.wrapT:i.CLAMP_TO_EDGE),l("flipY",!1),l("mipMapped",!1),l("depthInternalFormat"),l("depthFormat"),l("depthType"),e.createDepthTexture&&(i.name!="webgl2"&&!i.__ext_WEBGL_depth_texture?t.depthType=i.UNSIGNED_SHORT:(i.name=="webgl2",t.depthFormat=i.DEPTH_COMPONENT,t.depthType=i.UNSIGNED_INT)),t.format==i.FLOAT)if(i.name=="webgl2")t.filter==i.LINEAR&&!i.__ext_float_linear&&(console.warn("Floating point texture filtering not supported on result device"),t.filter=i.NEAREST);else if(i.__ext_float)t.filter==i.LINEAR&&!i.__ext_float_linear&&(console.warn("Floating point texture filtering not supported on result device"),t.filter=i.NEAREST);else if(i.__ext_half_float)t.format=i.HALF_FLOAT,t.filter==i.LINEAR&&!i.__ext_texture_half_float_linear&&(console.warn("Half Float texture filtering not supported on result device"),t.filter=i.NEAREST);else throw new Error("OES_texture_half_float is not available");else if(t.format==i.HALF_FLOAT){if(i.name!="webgl2"){if(i.__ext_half_float)t.filter==i.LINEAR&&!i.__ext_texture_half_float_linear&&(console.warn("Half Float texture filtering not supported on result device"),t.filter=i.NEAREST);else throw new Error("OES_texture_half_float is not available");if(t.channels==i.RGB)throw new Error("OES_texture_half_float onlysupports RGBA textures")}}else if(t.format=="sRGB"&&!i.__ext_sRGB)throw new Error("EXT_sRGB is not available");return t.format!=null&&i.name=="webgl2"&&t.internalFormat==t.format&&(t.type==i.FLOAT?t.format==i.RED?t.internalFormat=i.R32F:t.format==i.RG?t.internalFormat=i.RG32F:t.format==i.RGB?t.internalFormat=i.RGB32F:t.format==i.RGBA&&(t.internalFormat=i.RGBA32F):t.type==i.HALF_FLOAT?t.format==i.RED?t.internalFormat=i.R16F:t.format==i.RGB?t.internalFormat=i.RGB16F:t.format==i.RGBA&&(t.internalFormat=i.RGBA16F):t.type==i.UNSIGNED_BYTE&&(t.format==i.RED&&(t.internalFormat=i.R8),t.format==i.RGB?t.internalFormat=i.RGB8:t.format==i.RGBA&&(t.internalFormat=i.RGBA8))),t.depthFormat!=null&&(i.name=="webgl2"?t.depthType==i.UNSIGNED_SHORT?t.depthInternalFormat=i.DEPTH_COMPONENT16:t.depthType==i.UNSIGNED_INT&&(t.depthInternalFormat=i.DEPTH_COMPONENT24):t.depthInternalFormat=t.depthFormat),t};class Te extends Va{constructor(e,g){super();if(this.__image=null,this.__internalFormat=0,this.__type=0,this.__format=0,this.__wrapParam=0,this.params={},this.__minFilter=0,this.__magFilter=0,this.__wrapS=0,this.__wrapT=0,this.__flipY=!1,this.__mipMapped=!1,this.invert=!1,this.alphaFromLuminance=!1,this.__gltex=null,this.__typeParam="",this.__formatParam="",this.__gl=e,this.ready=!1,this.width=0,this.height=0,this.textureType=1,this.textureDesc=[0,0,0,0],this.__loaded=!1,this.__bound=!1,g!=null)if(g instanceof ug){this.__image=g;const t=()=>{const I=this.__image.getParams(),l=I.width,C=I.height,n=I.data;this.bufferData(n,l,C)};this.__image.on("updated",t),this.__image.isLoaded()?this.configure(this.__image.getParams()):this.__image.on("loaded",()=>{this.configure(this.__image.getParams())})}else this.configure(g)}isLoaded(){return this.__loaded}getImage(){return this.__image}getInternalFormat(){return this.__internalFormat}getType(){return this.__type}getFormat(){return this.__format}getWrap(){return this.__wrapParam}getMipMapped(){return this.__mipMapped}configure(e){const g=this.__gl,t=pa(g,e);this.params=t,this.__format=t.format,this.__internalFormat=t.internalFormat,this.__type=t.type,this.__minFilter=t.minFilter,this.__magFilter=t.magFilter,this.__wrapS=t.wrapS,this.__wrapT=t.wrapT,this.__flipY="flipY"in e?e.flipY:!1,this.__mipMapped="mipMapped"in e?e.mipMapped:!1,this.invert="invert"in e?e.invert:!1,this.alphaFromLuminance="alphaFromLuminance"in e?e.alphaFromLuminance:!1,this.textureType=1,this.textureDesc[0]=this.width,this.textureDesc[1]=this.height,this.textureType==1&&this.__format==g.RGBA&&(this.textureType=2),this.__gltex&&g.deleteTexture(this.__gltex),this.__gltex=g.createTexture(),this.__updateGLTexParams();const I=t.width,l=t.height,C=e.data;C?this.bufferData(C,I,l,!1,!1):this.resize(I,l,!1,!1),this.__loaded||(this.emit("ready"),this.__loaded=!0)}__updateGLTexParams(){const e=this.__gl;e.bindTexture(e.TEXTURE_2D,this.__gltex),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,this.__minFilter),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,this.__magFilter),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,this.__wrapS),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,this.__wrapT)}bufferData(e,g=-1,t=-1,I=!0,l=!0){const C=this.__gl;if(e!=null){if(e instanceof WebGLTexture)this.__gltex=e;else if(e instanceof HTMLImageElement||e instanceof ImageData||e instanceof HTMLCanvasElement||e instanceof HTMLImageElement||e instanceof HTMLVideoElement)I&&C.bindTexture(C.TEXTURE_2D,this.__gltex),C.texImage2D(C.TEXTURE_2D,0,this.__internalFormat,this.__format,this.__type,e),this.width=e.width,this.height=e.height;else{g==-1&&(g=this.width),t==-1&&(t=this.height);const n=g*t;let F;switch(this.__format){case C.RED:case C.RED_INTEGER:case C.ALPHA:case C.LUMINANCE:case C.LUMINANCE_ALPHA:F=1;break;case C.RG:F=2,C.pixelStorei(C.UNPACK_ALIGNMENT,2);break;case C.RGB:F=3;break;case C.RGBA:F=4;break;default:console.warn("Reaching default case: numChannels:=1"),F=1;break}e.length!=n*F&&console.warn("Invalid data for Image width:"+g+" height:"+t+" format:"+this.__formatParam+" type:"+this.__typeParam+" Data Length:"+e.length+" Expected:"+n*F);let a=e;this.__type==C.HALF_FLOAT&&e instanceof Float32Array&&(a=q.convertFloat32ArrayToUInt16Array(e)),I&&C.bindTexture(C.TEXTURE_2D,this.__gltex),C.name=="webgl2"?C.texImage2D(C.TEXTURE_2D,0,this.__internalFormat,g,t,0,this.__format,this.__type,a,0):C.texImage2D(C.TEXTURE_2D,0,this.__internalFormat,g,t,0,this.__format,this.__type,a),this.width=g,this.height=t}this.__mipMapped&&C.generateMipmap(C.TEXTURE_2D)}else I&&C.bindTexture(C.TEXTURE_2D,this.__gltex),C.texImage2D(C.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,null),this.width=g,this.height=t;l&&this.emit("updated")}clear(){const e=this.__gl,g=this.width*this.height;let t;switch(this.__format){case e.RED:case e.RED_INTEGER:case e.ALPHA:case e.LUMINANCE:case e.LUMINANCE_ALPHA:t=1;break;case e.RG:t=2;break;case e.RGB:t=3;break;case e.RGBA:t=4;break;default:throw new Error("Invalid Format")}let I;switch(this.__type){case e.UNSIGNED_BYTE:I=new Uint8Array(g*t);break;case e.HALF_FLOAT:I=new Uint16Array(g*t);break;case e.FLOAT:I=new Float32Array(g*t);break;default:throw new Error("Invalid Type")}e.name=="webgl2"?e.texImage2D(e.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,I,0):e.texImage2D(e.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,I)}resize(e,g,t=!1,I=!0){const l=this.__gl;if(this.width!=e||this.height!=g){const n=l.getParameter(l.MAX_TEXTURE_SIZE);if(e<0||e>n||g<0||g>n)throw new Error("gl-texture2d: Invalid texture size. width:"+e+" height:"+g+" maxSize:"+n);if(t){const F=l.createTexture();l.bindTexture(l.TEXTURE_2D,F),l.texImage2D(l.TEXTURE_2D,0,this.__internalFormat,e,g,0,this.__format,this.__type,null);const a=l.createFramebuffer();l.bindFramebuffer(l.FRAMEBUFFER,a),l.framebufferTexture2D(l.FRAMEBUFFER,l.COLOR_ATTACHMENT0,l.TEXTURE_2D,this.__gltex,0),l.bindTexture(l.TEXTURE_2D,F),l.copyTexImage2D(l.TEXTURE_2D,0,this.__internalFormat,0,0,this.width,this.height,0),l.bindFramebuffer(l.FRAMEBUFFER,null),l.deleteFramebuffer(a),this.__gl.deleteTexture(this.__gltex),this.__gltex=F,this.__updateGLTexParams()}else this.width>0&&this.height>0,l.bindTexture(l.TEXTURE_2D,this.__gltex),l.texImage2D(l.TEXTURE_2D,0,this.__internalFormat,e,g,0,this.__format,this.__type,null);if(this.width=e,this.height=g,I){const F=new Hg(e,g);this.emit("resized",F)}}}populate(e,g,t,I=0,l=0,C=!0){const n=this.__gl;C&&n.bindTexture(n.TEXTURE_2D,this.__gltex),n.texSubImage2D(n.TEXTURE_2D,0,I,l,g,t,this.__format,this.__type,e)}getSize(){return[this.width,this.height]}get glTex(){return this.__gltex}getTexHdl(){return this.__gltex}preBind(e,g){return{textureTypeUnif:g[e.name+"Type"],textureDescUnif:g[e.name+"Desc"]}}bindToUniform(e,g,t){if(!this.__loaded)return!1;if(!this.__gltex)throw new Error("Unable to bind non-initialized or deleted texture.");const I=e.boundTextures++,l=this.__gl;return l.activeTexture(l.TEXTURE0+I),l.bindTexture(l.TEXTURE_2D,this.__gltex),l.uniform1i(g.location,I),t&&(t.textureTypeUnif&&l.uniform1i(t.textureTypeUnif.location,this.textureType),t.textureDescUnif&&l.uniform4fv(t.textureDescUnif.location,this.textureDesc)),!0}destroy(){super.destroy(),this.__gl.deleteTexture(this.__gltex),this.__gltex=null}static getCachedGLTexture2D(e){return on[e.getId()]}static setCachedGLTexture2D(e,g){on[e.getId()]=g}}const on={},ud={bool:"Boolean",int:"SInt32",uint:"UInt32",float:"Float32",ivec2:"Vec2",ivec3:"Vec3",ivec4:"Vec4",vec2:"Vec2",vec3:"Vec3",vec4:"Vec4",color:"Color",mat3:"Mat3",mat4:"Mat4",sampler2D:"BaseImage",samplerCube:"BaseImage"},hg=8;let lI=ud;const Sd=/\s+/;class Nd{constructor(){this.__shaderModules={},this.materialTemplates={}}setShaderModule(e,g){if(!(e in this.__shaderModules)){this.__shaderModules[e]=g;return}}getShaderModule(e){return this.__shaderModules[e]}getShaderModuleNames(){const e=[];for(const g in this.__shaderModules)e.push(g);return e}parseAttr(e,g,t,I){if(!(e[1]in lI))throw new Error(`Error while parsing 
Type not recognized:`+e[1]);const l=e[2].slice(0,e[2].length-1);t.attributes[l]={type:lI[e[1]],instanced:g},e[1]=="color"&&(e[1]="vec4",e.join(" "))}handleImport(e,g,t,I,l){if(t in this.__shaderModules){const C=this.__shaderModules[t];if(!C)throw Error("snippet not loaded or does not exists!");const n=this.parseShaderHelper(g,C,I,l);I.push(t),e.glsl=e.glsl+n.glsl,e.numLines+=n.numLines,e.uniforms=Object.assign(Object.assign({},e.uniforms),n.uniforms),e.attributes=Object.assign(Object.assign({},e.attributes),n.attributes)}else console.log("shaderName: "+g),console.log("SNIPPET NOT FOUND: "+t)}parseShader(e,g){return this.parseShaderHelper(e,g,[],0)}parseShaderHelper(e,g,t,I){const l=(F,a)=>{F.glsl=F.glsl+a+`
`,F.numLines++};t.push(e);const C={glsl:"",numLines:0,uniforms:{},attributes:{}};g=g.toString();const n=g.split(`
`);for(let F=0;F<n.length;F++){let a=n[F];const U=a.trim(),d=U.split(Sd);switch(d[0]){case"<%include":case"import":{const o=U.split(/'|"|`/)[1].split("/").pop();t.includes(o)||this.handleImport(C,e,o,t,I);break}case"attribute":{this.parseAttr(d,!1,C,a),l(C,a);break}case"instancedattribute":{this.parseAttr(d,!0,C,a),d[0]="attribute",a=d.join(" "),l(C,a);break}case"uniform":{let o=1;d.length==4&&(o=2);const A=d[o];if(!(A in lI))throw new Error("Error while parsing :"+e+` 
Type not recognized:`+d[1]);const B=d[o+1].slice(0,d[o+1].length-1);B.includes("[")?C.uniforms[B.substring(0,B.indexOf("["))]=lI[A]:C.uniforms[B]=lI[A],C.uniforms[B]=="struct"&&console.log(d),d[1]=="color"&&(d[1]="vec4",a=d.join(" ")),l(C,a);break}default:{l(C,a);break}}}return C}}const ue=new Nd;let pd=0;class Pe extends jg{constructor(e,g){super(g);e&&(this.__gl=e),this.__shaderStagesGLSL={},this.__shaderStages={},this.__shaderProgramHdls={},this.__gltextures={},this.__id=pd++}setGLContext(e){this.__gl=e}setShaderStage(e,g){this.__shaderStagesGLSL[e]=g,this.clearProgramsCache()}getShaderStage(e){return this.__shaderStagesGLSL[e]}clearProgramsCache(){const e=this.__gl;for(const g in this.__shaderProgramHdls){const t=this.__shaderProgramHdls[g];for(const I in t.shaderHdls)e.deleteShader(t.shaderHdls[I]);e.deleteProgram(t.shaderProgramHdl)}}static isOpaque(){return!0}static isOverlay(){return!1}__compileShaderStage(e,g,t,I){const l=this.__gl;if(I||(I=l.shaderopts),I){if(I.repl)for(const F in I.repl)e=tg.replaceAll(e,F,I.repl[F]);I.directives&&(e=I.directives.join(`
`)+`
`+e)}let C;l.name=="webgl2"&&(e=tg.replaceAll(e,"attribute","in"),t=="vertexShader"?e=tg.replaceAll(e,"varying","out"):e=tg.replaceAll(e,"varying","in"),e=tg.replaceAll(e,"texture2D","texture"),C=`#version 300 es
`,e=C+e);const n=l.createShader(g);if(!n)throw Error("shaderHdl not defined");if(l.shaderSource(n,e),l.compileShader(n),!l.getShaderParameter(n,l.COMPILE_STATUS)){console.log("Errors in :"+this.constructor.name);const F=l.getShaderInfoLog(n).split(`
`),a={};for(let s=0;s<F.length;s++){if(F[s].startsWith("'")){F[s-1]=F[s-1]+F[s],delete F[s],s--;continue}const o=F[s].split(":");if(o.length>=2){const A=parseInt(o[2]);isNaN(A)||(a[A]?a[A].push(F[s]):a[A]=[F[s]])}}const U=[],d=e.split(`
`);for(const s in a){const o=Number.parseInt(s)-1;for(let B=Math.max(0,o-4);B<o;B++)U.push((o+1+" ").padStart(3)+d[B]);U.push((o+1+">").padStart(3)+d[o]);for(let B=o+1;B<Math.min(d.length-1,o+5);B++)U.push((o+1+" ").padStart(3)+d[B]);const A=a[s];for(const B of A)U.push(B)}throw new Error(`An error occurred compiling the shader 
=================
`+this.constructor.name+"."+t+`: 

`+U.join(`
`))}return n}__createProgram(e){const g=this.__gl;this.__shaderCompilationAttempted=!0;const t=g.createProgram();if(!t)throw Error("shaderProgramHdl not defined");const I={};this.__shaderStages.VERTEX_SHADER||(this.__shaderStages.VERTEX_SHADER=ue.parseShader("VERTEX_SHADER",this.__shaderStagesGLSL.VERTEX_SHADER));const l=this.__shaderStages.VERTEX_SHADER.glsl;if(l!=null){const F=this.__compileShaderStage(l,g.VERTEX_SHADER,"vertexShader",e);if(!F)return!1;g.attachShader(t,F),I[g.VERTEX_SHADER]=F}this.__shaderStages.FRAGMENT_SHADER||(this.__shaderStages.FRAGMENT_SHADER=ue.parseShader("FRAGMENT_SHADER",this.__shaderStagesGLSL.FRAGMENT_SHADER));const C=this.__shaderStages.FRAGMENT_SHADER.glsl;if(C!=null){const F=Object.assign({},g.shaderopts,e);F.frag&&(F.defines=F.frag.defines+F.defines);const a=this.__compileShaderStage(C,g.FRAGMENT_SHADER,"fragmentShader",F);if(!a)return!1;g.attachShader(t,a),I[g.FRAGMENT_SHADER]=a}if(g.linkProgram(t),!g.getProgramParameter(t,g.LINK_STATUS)){const F=g.getProgramInfoLog(t);if(!F)throw Error("info not defined");if(F.includes("D3D shader compilation failed")){const a=g.getExtension("WEBGL_debug_shaders");if(a){const U=a.getTranslatedShaderSource(I[g.VERTEX_SHADER]);console.log(U)}}throw console.log("vertexShaderGLSL:"+l),console.log("fragmentShaderGLSL:"+C),new Error("Unable to link the shader program:"+this.constructor.name+`
==================
`+F)}const n=this.__extractAttributeAndUniformLocations(t,e);return n.shaderHdls=I,n.shaderProgramHdl=t,n}__extractAttributeAndUniformLocations(e,g){const t=this.__gl,I=this.getAttributes(),l={attrs:{},unifs:{}};for(const n in I){const F=t.getAttribLocation(e,n);if(F==null){console.warn("Shader attribute not found:"+n);continue}const a=I[n];l.attrs[n]={name:n,location:F,type:a.type,instanced:a.instanced}}const C=this.getUniforms();for(let n in C){const F=C[n];if(g&&g.repl)for(const U in g.repl)n=n.replace(U,g.repl[U]);const a=t.getUniformLocation(e,n);a!=null&&(l.unifs[n]={name:n,location:a,type:F})}return l}getAttributes(){const e={};for(const g in this.__shaderStages){const t=this.__shaderStages[g];for(const I in t.attributes)e[I]=t.attributes[I]}return e}getUniforms(){const e={};for(const g in this.__shaderStages){const t=this.__shaderStages[g];for(const I in t.uniforms)e[I]=t.uniforms[I]}return e}isCompiledForTarget(e){const g=e||this.getId();return this.__shaderProgramHdls[g]!=null}compileForTarget(e,g){const t=e||this.getId();let I=this.__shaderProgramHdls[t];return I||(I=this.__createProgram(g||{}),I.shaderkey=t,this.__shaderProgramHdls[t]=I,I)}compile(){this.compileForTarget()}bind(e,g){const t=this.__gl;if(e.glShader!=this){const I=this.compileForTarget(g,e.shaderopts);if(!I)return console.warn(this.constructor.name+" is not compiled for "+g),!1;const l=I.shaderProgramHdl;t.useProgram(l),e.glShader=this,e.shaderkey=I.shaderkey,e.unifs=I.unifs,e.attrs=I.attrs,e.boundTextures=0,e.glGeom=void 0,e.bindRendererUnifs&&e.bindRendererUnifs(I.unifs)}return e.supportsInstancing=!0,!0}unbind(e){return e.glShader=null,e.shaderkey="",e.unifs={},e.attrs={},!0}getGeomDataShaderName(){return""}getSelectedShaderName(){return""}static supportsInstancing(){return!0}static getPackedMaterialData(e){return new Float32Array(4)}static getMaterialTemplate(){throw new Error("Shader does not provide a material template.")}destroy(){const e=this.__gl;for(const g in this.__shaderProgramHdls){const t=this.__shaderProgramHdls[g];e.deleteProgram(t.shaderProgramHdl)}this.__shaderProgramHdls={}}}class Bi{constructor(e,g,t=!1){this.colorTextureResizeEventId=-1,this.__depthTexture=null,this.__fbo=null,this.__prevBoundFbo=null,_e.isIOSDevice&&e.name=="webgl"&&(g.getType()==e.FLOAT||g.getType()==e.HALF_FLOAT)&&console.error("IOS devices are unable to render to float textures."),this.__gl=e,this.__colorTexture=g,this.__createDepthTexture=t,this.__clearColor=new E(0,0,0,0),this.__colorTexture&&(this.colorTextureResizeEventId=this.__colorTexture.on("resized",I=>{this.resize(this.__colorTexture.width,this.__colorTexture.height,!1)})),this.setup()}textureResized(e){this.resize(this.__colorTexture.width,this.__colorTexture.height,!1)}setClearColor(e){this.__clearColor=e}getWidth(){return this.__colorTexture.width}getHeight(){return this.__colorTexture.height}getSize(){return[this.__colorTexture.width,this.__colorTexture.height]}getColorTexture(){return this.__colorTexture}getDepthTextureGL(){return this.__depthTexture}get width(){return this.__colorTexture.width}get height(){return this.__colorTexture.height}get size(){return[this.__colorTexture.width,this.__colorTexture.height]}get colorTexture(){return this.__colorTexture}setColorTexture(e){const g=this.__gl;this.__colorTexture=e,g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,this.__colorTexture.glTex,0)}get depthTextureGL(){return this.__depthTexture}setup(){const e=this.__gl;if(this.__fbo=e.createFramebuffer(),e.name=="webgl2"?e.bindFramebuffer(e.DRAW_FRAMEBUFFER,this.__fbo):e.bindFramebuffer(e.FRAMEBUFFER,this.__fbo),this.__colorTexture&&(e.name=="webgl2"?e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,this.__colorTexture.glTex,0):e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,this.__colorTexture.glTex,0)),this.__createDepthTexture)if(e.name!="webgl2"&&!e.__ext_WEBGL_depth_texture){const g=e.createRenderbuffer();e.bindRenderbuffer(e.RENDERBUFFER,g),e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_COMPONENT16,this.width,this.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,g)}else e.activeTexture(e.TEXTURE0),this.__depthTexture=e.createTexture(),e.bindTexture(e.TEXTURE_2D,this.__depthTexture),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.name=="webgl2"?(e.texImage2D(e.TEXTURE_2D,0,e.DEPTH_COMPONENT24,this.width,this.height,0,e.DEPTH_COMPONENT,e.UNSIGNED_INT,null),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,this.__depthTexture,0)):(e.texImage2D(e.TEXTURE_2D,0,e.DEPTH_COMPONENT,this.width,this.height,0,e.DEPTH_COMPONENT,e.UNSIGNED_INT,null),e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,this.__depthTexture,0));hl(e,this.width,this.height),e.name=="webgl2"?e.bindFramebuffer(e.DRAW_FRAMEBUFFER,null):e.bindFramebuffer(e.FRAMEBUFFER,null)}resize(e,g,t){const I=this.__gl;t&&this.__colorTexture.resize(e,g,!1,!1),I.name=="webgl2"?I.bindFramebuffer(I.DRAW_FRAMEBUFFER,this.__fbo):I.bindFramebuffer(I.FRAMEBUFFER,this.__fbo),I.framebufferTexture2D(I.FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_2D,this.__colorTexture.glTex,0),this.__depthTexture&&(I.activeTexture(I.TEXTURE0),I.bindTexture(I.TEXTURE_2D,this.__depthTexture),I.name=="webgl2"?I.texImage2D(I.TEXTURE_2D,0,I.DEPTH_COMPONENT24,this.width,this.height,0,I.DEPTH_COMPONENT,I.UNSIGNED_INT,null):I.texImage2D(I.TEXTURE_2D,0,I.DEPTH_COMPONENT,this.width,this.height,0,I.DEPTH_COMPONENT,I.UNSIGNED_INT,null)),hl(I,this.width,this.height)}bindForWriting(e){e&&(this.__prevBoundFbo=e.boundRendertarget,e.boundRendertarget=this.__fbo);const g=this.__gl;g.name=="webgl2"?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.__fbo):g.bindFramebuffer(g.FRAMEBUFFER,this.__fbo),g.viewport(0,0,this.width,this.height)}unbindForWriting(e){e&&(e.boundRendertarget=this.__prevBoundFbo);const g=this.__gl;g.name=="webgl2"?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.__prevBoundFbo):g.bindFramebuffer(g.FRAMEBUFFER,this.__prevBoundFbo)}bind(e){this.bindForWriting(e)}unbind(e){if(e)this.unbindForWriting(e);else{const g=this.__gl;g.bindFramebuffer(g.FRAMEBUFFER,null)}}bindForReading(e){const g=this.__gl;g.name=="webgl2"?g.bindFramebuffer(g.READ_FRAMEBUFFER,this.__fbo):g.bindFramebuffer(g.FRAMEBUFFER,this.__fbo)}unbindForReading(){const e=this.__gl;e.name=="webgl2"?e.bindFramebuffer(e.READ_FRAMEBUFFER,null):e.bindFramebuffer(e.FRAMEBUFFER,null)}clear(){const e=this.__gl;e.colorMask(!0,!0,!0,!0);const g=this.__clearColor.asArray();e.clearColor(g[0],g[1],g[2],g[3]),this.__createDepthTexture?e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT):e.clear(e.COLOR_BUFFER_BIT)}bindAndClear(e){this.bind(e),this.clear()}destroy(){const e=this.__gl;e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteFramebuffer(this.__fbo),this.__fbo=null,this.__colorTexture.removeListenerById("resized",this.colorTextureResizeEventId)}}function hl(i,e,g){let t;if(i.name=="webgl2"?t=i.checkFramebufferStatus(i.DRAW_FRAMEBUFFER):t=i.checkFramebufferStatus(i.FRAMEBUFFER),t!==i.FRAMEBUFFER_COMPLETE)switch(i.bindTexture(i.TEXTURE_2D,null),i.name=="webgl2"?i.bindFramebuffer(i.DRAW_FRAMEBUFFER,null):i.bindFramebuffer(i.FRAMEBUFFER,null),console.warn("Error creating Fbo width:",e,", height:",g),t){case i.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case i.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case i.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case i.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}class ZI extends Xe{constructor(e,g){super();this.params={},this.flipY=!1,this.width=0,this.height=0,this.__gl=e,this.textureTargets=[],this.depthTexture=null,this.textureDesc=[0,0,0,0],this.clearColor=new E(0,0,0,0),this.colorMask=[!0,!0,!0,!0],g&&this.configure(g)}configure(e){const g=this.__gl,t=pa(g,e);this.textureTargets.forEach(l=>{g.deleteTexture(l)}),this.textureTargets=[],this.depthTexture&&(g.deleteTexture(this.depthTexture),this.depthTexture=null),this.frameBuffer&&g.deleteFramebuffer(this.frameBuffer),this.params=t,this.type=t.type,this.format=t.format,this.internalFormat=t.internalFormat,this.minFilter=t.minFilter?t.minFilter:t.filter,this.minFilter=t.magFilter?t.magFilter:t.filter,this.wrap=t.wrap,this.flipY=t.flipY,this.width=t.width,this.height=t.height,this.textureType=1,this.textureDesc[0]=this.width,this.textureDesc[1]=this.height;const I=e.numColorChannels!=null?e.numColorChannels:t.format!=null?1:0;for(let l=0;l<I;l++){g.activeTexture(g.TEXTURE0+1);const C=g.createTexture();g.bindTexture(g.TEXTURE_2D,C),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_S,t.wrapS),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_T,t.wrapT),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,t.minFilter),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,t.magFilter),g.texImage2D(g.TEXTURE_2D,0,this.internalFormat,t.width,t.height,0,this.format,this.type,null),this.textureTargets.push(C)}if(t.depthFormat){if(g.name=="webgl"&&!g.__ext_WEBGL_depth_texture)throw new Error("Depth textures not support on this device");g.activeTexture(g.TEXTURE0),this.depthTexture=g.createTexture(),g.bindTexture(g.TEXTURE_2D,this.depthTexture),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_S,t.wrapS),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_T,t.wrapT),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,t.minFilter),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,t.magFilter),g.texImage2D(g.TEXTURE_2D,0,t.depthInternalFormat,t.width,t.height,0,t.depthFormat,t.depthType,null)}if(this.frameBuffer=g.createFramebuffer(),this.bindForWriting(),this.textureTargets.length>0){this.textureTargets.length>1&&g.name=="webgl"&&g.drawBuffers;const l=[];for(let C=0;C<this.textureTargets.length;C++)g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0+C,g.TEXTURE_2D,this.textureTargets[C],0),l.push(g.COLOR_ATTACHMENT0+C);this.textureTargets.length>1&&g.drawBuffers(l)}this.depthTexture&&g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,this.depthTexture,0),this.checkFramebuffer()}checkFramebuffer(){this.bindForWriting();const e=this.__gl,g=e.checkFramebufferStatus(e.DRAW_FRAMEBUFFER);if(g!=e.FRAMEBUFFER_COMPLETE)switch(g){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}this.unbindForWriting()}bindForWriting(e,g=!1){e&&(this.__prevBoundFbo=e.boundRendertarget,e.boundRendertarget=this.frameBuffer);const t=this.__gl;t.name=="webgl2"?t.bindFramebuffer(t.DRAW_FRAMEBUFFER,this.frameBuffer):t.bindFramebuffer(t.FRAMEBUFFER,this.frameBuffer),t.viewport(0,0,this.width,this.height),g&&this.clear()}unbindForWriting(e){e&&(e.boundRendertarget=this.__prevBoundFbo);const g=this.__gl;g.bindFramebuffer(g.name=="webgl2"?g.DRAW_FRAMEBUFFER:g.FRAMEBUFFER,this.__prevBoundFbo),this.__prevBoundFbo=null}clear(e=!0){const g=this.__gl,t=this.colorMask;g.colorMask(t[0],t[1],t[2],t[3]);const I=this.clearColor.asArray();g.clearColor(I[0],I[1],I[2],I[3]);let l=0;this.textureTargets.length>0&&(l|=g.COLOR_BUFFER_BIT),this.depthTexture&&(l|=g.DEPTH_BUFFER_BIT),g.clear(l)}bindForReading(){const e=this.__gl;e.name=="webgl2"?e.bindFramebuffer(e.READ_FRAMEBUFFER,this.frameBuffer):e.bindFramebuffer(e.FRAMEBUFFER,this.frameBuffer)}unbindForReading(){const e=this.__gl;e.name=="webgl2"?e.bindFramebuffer(e.READ_FRAMEBUFFER,null):e.bindFramebuffer(e.FRAMEBUFFER,null)}bindColorTexture(e,g,t=0){const I=this.__gl,l=e.boundTextures++;return I.uniform1i(g.location,l),I.activeTexture(I.TEXTURE0+l),I.bindTexture(I.TEXTURE_2D,this.textureTargets[t]),!0}bindDepthTexture(e,g){const t=this.__gl,I=e.boundTextures++;return t.uniform1i(g.location,I),t.activeTexture(t.TEXTURE0+I),t.bindTexture(t.TEXTURE_2D,this.depthTexture),!0}unbind(e){this.unbindForWriting(e)}resize(e,g,t=!1){const I=this.__gl;if(this.width!=e||this.height!=g){const C=I.getParameter(I.MAX_TEXTURE_SIZE);if(e<0||e>C||g<0||g>C)throw new Error(`GLRenderTarget: Invalid texture size. width: ${e} height: ${g} maxSize: ${C}`);t&&this.bindForReading();const n=this.params;for(let F=0;F<this.textureTargets.length;F++){const a=I.createTexture();I.bindTexture(I.TEXTURE_2D,a),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_WRAP_S,n.wrapS),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_WRAP_T,n.wrapT),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_MIN_FILTER,n.minFilter),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_MAG_FILTER,n.magFilter),I.texImage2D(I.TEXTURE_2D,0,this.internalFormat,e,g,0,this.format,this.type,null),t&&I.copyTexImage2D(I.TEXTURE_2D,0,this.internalFormat,0,0,Math.min(e,this.width),Math.min(g,this.height),0),I.deleteTexture(this.textureTargets[F]),this.textureTargets[F]=a}if(n.depthFormat){if(I.name=="webgl"&&!I.__ext_WEBGL_depth_texture)throw new Error("Depth textures not support on this device");I.activeTexture(I.TEXTURE0);const F=I.createTexture();I.bindTexture(I.TEXTURE_2D,F),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_WRAP_S,n.wrapS),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_WRAP_T,n.wrapT),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_MIN_FILTER,n.minFilter),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_MAG_FILTER,n.magFilter),I.texImage2D(I.TEXTURE_2D,0,n.depthInternalFormat,e,g,0,n.depthFormat,n.depthType,null),t&&I.copyTexImage2D(I.TEXTURE_2D,0,this.internalFormat,0,0,Math.min(e,this.width),Math.min(g,this.height),0),I.deleteTexture(this.depthTexture),this.depthTexture=F}if(t&&this.unbindForReading(),this.width=e,this.height=g,this.frameBuffer&&I.deleteFramebuffer(this.frameBuffer),this.frameBuffer=I.createFramebuffer(),this.bindForWriting(),this.textureTargets.length>0){this.textureTargets.length>1&&I.name=="webgl"&&I.drawBuffers;const F=[];for(let a=0;a<this.textureTargets.length;a++)I.framebufferTexture2D(I.DRAW_FRAMEBUFFER,I.COLOR_ATTACHMENT0+a,I.TEXTURE_2D,this.textureTargets[a],0),F.push(I.COLOR_ATTACHMENT0+a);this.textureTargets.length>1&&I.drawBuffers(F)}this.depthTexture&&I.framebufferTexture2D(I.DRAW_FRAMEBUFFER,I.DEPTH_ATTACHMENT,I.TEXTURE_2D,this.depthTexture,0),this.checkFramebuffer()}}bindToUniform(e,g,t){const I=e.boundTextures++,l=this.__gl.TEXTURE0+I,C=this.__gl;return C.activeTexture(l),C.bindTexture(C.TEXTURE_2D,this.textureTargets[0]),C.uniform1i(g.location,I),t&&(t.textureTypeUnif&&C.uniform1i(t.textureTypeUnif.location,this.textureType),t.textureDescUnif&&this.__gl.uniform4fv(t.textureDescUnif.location,this.textureDesc)),!0}destroy(){const e=this.__gl;this.textureTargets.forEach(g=>{e.deleteTexture(g)}),this.textureTargets=[],this.depthTexture&&(e.deleteTexture(this.depthTexture),this.depthTexture=null),this.frameBuffer&&e.deleteFramebuffer(this.frameBuffer)}}var yd=`#define GLSLIFY 1
  
#ifdef ENABLE_ES3
vec3 computeViewNormal(vec3 viewPos) {
  vec3 fdx = dFdx(viewPos);
  vec3 fdy = dFdy(viewPos);
  return normalize(cross(fdx, fdy));
}
#else 
vec3 computeViewNormal(vec3 viewPos) {
  return vec3(0.0, 0.0, 0.0);
}
#endif
`,Xd=`#define GLSLIFY 1
import 'GLSLUtils.glsl'
vec3 calcFatLinesViewPos(int vertexID, mat4 modelViewMatrix, inout vec3 viewNormal, inout vec2 texCoord, inout vec3 pos) {

  int seqentialIndex_0 = int(mod(segmentIndices.x, 2.));
  int seqentialIndex_1 = int(mod(segmentIndices.y, 2.));
  int index_0 = int(segmentIndices.x) / 2;
  int index_1 = int(segmentIndices.y) / 2;

  vec3 viewPos;
  vec4 data_0 = fetchTexel(positionsTexture, positionsTextureSize, index_0);
  vec4 data_1 = fetchTexel(positionsTexture, positionsTextureSize, index_1);

  // During XR sessions, there is a scaling applied to the view matrix
  // which causes a distortion to the line width. We extract that scale here
  // and use to correct the distortion.
  // See also: FatPointsShader
  vec3 viewZ = modelViewMatrix[2].xyz;
  float viewScale = length(viewZ);

  vec4 pos_0 = modelViewMatrix * vec4(data_0.xyz, 1.0);
  vec4 pos_1 = modelViewMatrix * vec4(data_1.xyz, 1.0);
  // Note: multiply the per-vertex line thickness with the line thickness uniform value;
  float lineThickness_0 = LineThickness * data_0.w * viewScale;
  float lineThickness_1 = LineThickness * data_1.w * viewScale;

  if (vertexID < 2) {
    pos = data_0.xyz;
    viewPos = pos_0.xyz;
  }
  else {
    pos = data_1.xyz;
    viewPos = pos_1.xyz;
  }
  if (pos_1 != pos_0) {
    vec3 segmentDir = normalize(pos_1.xyz - pos_0.xyz);
    vec3 viewVector = normalize(viewPos);

    if (vertexID < 2) {
      vec3 segmentStartDir = segmentDir;
      if (seqentialIndex_0 != 0) {
        //if index_0 == 0, get the last index in the line as previous
        int index_prev = (index_0 > 0) ? (index_0-1) : (positionsTextureSize-1);
        vec4 data_prev = fetchTexel(positionsTexture, positionsTextureSize, index_prev);
        vec4 pos_prev = modelViewMatrix * vec4(data_prev.xyz, 1.0);
        segmentStartDir = normalize(segmentDir + normalize(pos_0.xyz - pos_prev.xyz));
        // segmentStartDir = segmentDir;
      }
      // vec3 startBiTangent = normalize(cross(segmentStartDir, viewVector));
      // viewNormal = normalize(cross(segmentStartDir, startBiTangent));
      vec3 startBiTangent = normalize(vec3(-segmentStartDir.y, segmentStartDir.x, 0.0));
      viewNormal = normalize(-viewVector);
      // Move the endpoints to overlap a bit more.
      //viewPos -= vec3(segmentStartDir * lineThickness_0 * 0.25);
      if (mod(vertexIDs, 2.0) == 0.0) {
        viewPos += vec3(startBiTangent * lineThickness_0);
        texCoord.x = 1.0;
      }
      else {
        viewPos -= vec3(startBiTangent * lineThickness_0);
        texCoord.x = 0.0;
      }
      texCoord.y = 0.0;
    }
    else {
      vec3 segmentEndDir = segmentDir;
      if (seqentialIndex_1 != 0) {
        //if index_1 == numPoints-1, get the first index in the line as next
        int index_next = (index_1 < (positionsTextureSize-1)) ? (index_1+1) : 0;
        vec4 data_next = fetchTexel(positionsTexture, positionsTextureSize, index_next);
        vec4 pos_next = modelViewMatrix * vec4(data_next.xyz, 1.0);
        segmentEndDir = normalize(segmentDir + normalize(pos_next.xyz - pos_1.xyz));
        // segmentEndDir = segmentDir;
      }
      // vec3 endBiTangent = normalize(cross(segmentEndDir, viewVector));
      // viewNormal = normalize(cross(segmentEndDir, endBiTangent));
      vec3 endBiTangent = normalize(vec3(-segmentEndDir.y, segmentEndDir.x, 0.0));
      viewNormal = normalize(-viewVector);
      // Move the endpoints to overlap a bit more.
      //viewPos += vec3(segmentEndDir * lineThickness_1 * 0.25);
      if (mod(vertexIDs, 2.0) == 0.0) {
        viewPos += vec3(endBiTangent * lineThickness_1);
        texCoord.x = 1.0;
      }
      else {
        viewPos -= vec3(endBiTangent * lineThickness_1);
        texCoord.x = 0.0;
      }
      texCoord.y = 1.0;
    }

    // Move the line towards the viewer by the line thickness.
    // this is to avoid depth issues when lines are rendered over meshes. 
    viewPos.z += (lineThickness_0 + lineThickness_1) * 0.5;
  }

  return viewPos;
}

`,kd=`#define GLSLIFY 1
#define PI 3.141592653589793
#define TwoPI (2.0 * PI)
#define HalfPI (0.5 * PI)

`,fd=`#define GLSLIFY 1

#ifdef ENVMAP_CUBE

uniform samplerCube envMap;

vec4 sampleEnvMap(vec3 dir) {
  return texture(envMap, dir);
}

#else 

uniform sampler2D   envMap;

import 'envmap-octahedral.glsl'

vec4 sampleEnvMap(vec3 dir) {
  vec2 uv = dirToSphOctUv(dir);
  vec4 texel = texture2D(envMap, vec2(uv.x, 1.0 - uv.y));
  return vec4(texel.rgb/texel.a, 1.0); // TODO: Check this line. Do we need it?
}

#endif 

vec3 cubeFaceUvToDir(float u, float v, int faceId) {

  // normalize into [-1, 1] range
  float n_u = 2.0 * u - 1.0;
  float n_v = 2.0 * v - 1.0;

  vec3 dir;
  switch (faceId)
  {
  case 0: //TEXTURE_CUBE_MAP_POSITIVE_X:
    dir.x = 1.0f;
    dir.y = n_v;
    dir.z = -n_u;
    break;
  case 1: //TEXTURE_CUBE_MAP_NEGATIVE_X:
    dir.x = -1.0f;
    dir.y = n_v;
    dir.z = n_u;
    break;
  case 3: //TEXTURE_CUBE_MAP_POSITIVE_Y:
    dir.x = n_u;
    dir.y = 1.0f;
    dir.z = -n_v;
    break;
  case 2: //TEXTURE_CUBE_MAP_NEGATIVE_Y:
    dir.x = n_u;
    dir.y = -1.0f;
    dir.z = n_v;
    break;
  case 4: //TEXTURE_CUBE_MAP_POSITIVE_Z:
    dir.x = n_u;
    dir.y = n_v;
    dir.z = 1.0f;
    break;
  case 5: //TEXTURE_CUBE_MAP_NEGATIVE_Z:
    dir.x = -n_u;
    dir.y = n_v;
    dir.z = -1.0f;
    break;
  }
  return normalize(dir);
}

`,Ed=`#define GLSLIFY 1
const int GEOMITEM_FLAG_CUTAWAY = 1; // 1<<0;
const int GEOMITEM_INVISIBLE_IN_GEOMDATA = 2; // 1<<1;
const int GEOMITEM_TRANSPARENT = 4; // 1<<1;

uniform color cutColor;

#ifdef ENABLE_FLOAT_TEXTURES
  vec4 getCutaway(int id) {
    return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);
  }

#else

  uniform vec4 cutawayData;

  vec4 getCutaway(int id) {
    return cutawayData;
  }

#endif

#define RAY_EPS 0.0000001
struct Ray {
  vec3 start;
  vec3 dir;
};

float intersectRayPlane(Ray ray, Ray plane) {
  vec3 w = ray.start - plane.start;
  float D = dot(plane.dir, ray.dir);
  float N = dot(-plane.dir, w);

  if (abs(D) < RAY_EPS) {
    // segment is parallel to plane
    if (N == 0.0)
      return -1.0; // segment lies in plane
    else
      return -1.0; // no intersection
  }
  // they are not parallel
  // compute intersect param
  float sI = N / D;
  if (sI < -RAY_EPS) {
    return -1.0; // no intersection
  }
  return sI;
}

bool cutaway(vec3 worldPos, vec3 planeNormal, float planeDist) {

  vec3 planePos = planeNormal * planeDist;
  vec3 planeDir = worldPos + planePos;
  float planeOffset = dot(planeDir, planeNormal);
  if (planeOffset > 0.0) {
    return true;
  }
  return false;
}
`,Td=`#define GLSLIFY 1
import 'GLSLUtils.glsl'

vec3 getDebugColor(float id) {
  int sel = int(round(mod(round(id), 16.0)));
  
  if (sel==0)
    return vec3(0.0, 1.0, 1.0);
  else if (sel==1)
    return vec3(0.0, 1.0, 0.0);
  else if (sel==2)
    return vec3(1.0, 0.0, 1.0);
  else if (sel==3)
    return vec3(0.75, 0.75, 0.0);
  else if (sel==4)
    return vec3(0.0, 0.75, 0.75);
  else if (sel==5)
    return vec3(0.75, 0.0, 0.75);
  else if (sel==6)
    return vec3(0.45, 0.95, 0.0);
  else if (sel==7)
    return vec3(0.0, 0.45, 0.95);
  else if (sel==8)
    return vec3(0.95, 0.0, 0.45);
  else if (sel==9)
    return vec3(0.95, 0.45, 0.0);
  else if (sel==10)
    return vec3(0.0, 0.95, 0.45);
  else if (sel==11)
    return vec3(0.45, 0.0, 0.95);
  else if (sel==12)
    return vec3(0.45, 0.45, 0.95);
  else if (sel==13)
    return vec3(0.0, 0.0, 0.45);
  else if (sel==14)
    return vec3(0.0, 0.45, 0.45);
  else if (sel==15)
    return vec3(0.45, 0.0, 0.45);
  else return vec3(0.2, 0.2, 0.2);
}

`,ya=`#define GLSLIFY 1

#ifdef ENABLE_MULTI_DRAW

#ifdef EMULATE_MULTI_DRAW

uniform int geomItemId;
int getGeomItemId() {
  return geomItemId;
}

vec4 getDrawItemIds() {
  return vec4(float(geomItemId), 0.0, -1.0, -1.0);
}

#else // EMULATE_MULTI_DRAW

uniform sampler2D drawIdsTexture;

int getGeomItemId() {
  ivec2 drawIdsTextureSize = textureSize(drawIdsTexture, 0);
  ivec2 drawIdsArrayCoords = ivec2(gl_DrawID % drawIdsTextureSize.x, gl_DrawID / drawIdsTextureSize.x);
  return int(texelFetch(drawIdsTexture, drawIdsArrayCoords, 0).r + 0.5);
}

vec4 getDrawItemIds() {
  ivec2 drawIdsTextureSize = textureSize(drawIdsTexture, 0);
  ivec2 drawIdsArrayCoords = ivec2(gl_DrawID % drawIdsTextureSize.x, gl_DrawID / drawIdsTextureSize.x);
  vec4 color = texelFetch(drawIdsTexture, drawIdsArrayCoords, 0);
  // Note: a 0 value in the texture means no sub-geom index is being rendered.
  // subtract off 1 to get the true sub-geom index.
  return vec4(color.r, color.g - 1.0, color.b, color.a);
}

#endif // EMULATE_MULTI_DRAW

#else // ENABLE_MULTI_DRAW

uniform int geomItemId;

#ifdef ENABLE_FLOAT_TEXTURES

attribute float instancedIds;    // instanced attribute..
uniform int instancedDraw;

int getGeomItemId() {
  if (instancedDraw == 0) {
    return geomItemId;
  }
  else {
    return int(instancedIds);
  }
}

vec4 getDrawItemIds() {
  if (instancedDraw == 0) {
    return vec4(float(geomItemId), 0.0, -1.0, -1.0);
  }
  else {
    return vec4(float(instancedIds), 0.0, -1.0, -1.0);
  }
}

#else

int getGeomItemId() {
  return geomItemId;
}

vec4 getDrawItemIds() {
    return vec4(float(geomItemId), 0.0, -1.0, -1.0);
}

#endif // ENABLE_FLOAT_TEXTURES
#endif // ENABLE_MULTI_DRAW

// For backwards compatibility with older plugins (UX.HandleShader)
int getDrawItemId() {
  return getGeomItemId();
}
`,Yd=`#define GLSLIFY 1

const int TRIANGLES = 0;
const int LINES = 1;
const int POINTS = 2;`,vd=`#define GLSLIFY 1
import 'GLSLUtils.glsl'

#ifdef ENABLE_FLOAT_TEXTURES

uniform sampler2D instancesTexture;
uniform highp int instancesTextureSize;

// See also: src\\Renderer\\GLSLConstants.js
// const pixelsPerGLGeomItem = 8
const int pixelsPerItem = 8;

vec4 getInstanceData(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 0);
}

#else

uniform vec4 drawItemData;

vec4 getInstanceData(int id) {
  return drawItemData;
}

#endif

`,Md=`#define GLSLIFY 1

vec2 dualfisheyeUVsFromDir(vec3 dir) {
  vec2 result;
  float angle = 0.465;
  if (dir.x < 0.0) {
    result = vec2(((dir.z * -angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);
  }
  else {
    result = vec2( 0.5 + ((dir.z * angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);
  }
  return result;
}

`,Hd=`#define GLSLIFY 1 
import 'constants.glsl'

vec2 latLongUVsFromDir(vec3 dir) {
  // Math function taken from...
  // http://gl.ict.usc.edu/Data/HighResProbes/
  // Note: Scaling from u=[0,2], v=[0,1] to u=[0,1], v=[0,1]
  float phi = acos(dir.z);
  float theta = atan(dir.x, dir.y);
  return vec2((1.0 + theta / PI) / 2.0, phi / PI);
}

// Note: when u == 0.5 z = 1.0
vec3 dirFromLatLongUVs(float u, float v) {
  // http://gl.ict.usc.edu/Data/HighResProbes/
  float theta = PI*((u * 2.0) - 1.0);
  float phi = PI*v;
  return vec3(sin(phi)*sin(theta), sin(phi)*cos(theta), cos(phi));
}

vec3 dirFromPolar(vec2 polar) {
  float u = polar.x / (PI * 2.0);
  float v = polar.y / PI;
  return dirFromLatLongUVs(u, v);
}

`,xd=`#define GLSLIFY 1
import 'constants.glsl'
import 'GLSLUtils.glsl'
#define sectorize(value) step(0.0, (value))*2.0-1.0
#define sum(value) dot(clamp((value), 1.0, 1.0), (value))

vec2 dirToSphOctUv(vec3 normal) {
  normal = normalize(normal);
  vec3 aNorm = abs(normal);
  vec3 sNorm = sectorize(normal);
  
  vec2 dir = aNorm.xy;
  float orient = atan(dir.x, max(dir.y,0.0000000000000001))/HalfPI;

  dir = vec2(aNorm.z, length(aNorm.xy));
  float pitch = atan(dir.y, dir.x)/HalfPI;

  vec2 uv = vec2(sNorm.x*orient, sNorm.y*(1.0-orient))*pitch;

  if (normal.z < 0.0) {
    uv = sNorm.xy - abs(uv.ts)*sNorm.xy;
  }
  vec2 res = uv*0.5+0.5;
  // Flip-v
  // return res;
  return vec2(res.x, 1.0 - res.y);
}

vec3 sphOctUvToDir(vec2 uv) {
  uv = uv*2.0-1.0;
  // Flip-v
  uv.y = -uv.y;
  vec2 suv = sectorize(uv);
  float sabsuv = sum(abs(uv));
  float pitch = sabsuv*HalfPI;

  if (pitch <= 0.0) {
    return vec3(0.0, 0.0, 1.0);
  }
  if (abs(pitch - PI) < 0.000001) {
    return vec3(0.0, 0.0, -1.0);
  }
  if (sabsuv > 1.0) {
    uv = (1.0-abs(uv.ts))*suv;
  }

  float orient = (abs(uv.s)/sabsuv)*HalfPI;
  float sOrient = sin(orient);
  float cOrient = cos(orient);
  float sPitch = sin(pitch);
  float cPitch = cos(pitch);

  return vec3(
    sOrient*suv.s*sPitch,
    cOrient*suv.t*sPitch,
    cPitch
  );
}

`,wd=`#define GLSLIFY 1
    
/////////////////////////////////////////////////////////////////
// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js
float shift_right(float v, float amt) {
  v = floor(v) + 0.5;
  return floor(v / exp2(amt));
}
float shift_left(float v, float amt) {
  return floor(v * exp2(amt) + 0.5);
}

float mask_last(float v, float bits) {
  return mod(v, shift_left(1.0, bits));
}
float extract_bits(float num, float from, float to) {
  from = floor(from + 0.5);
  to = floor(to + 0.5);
  return mask_last(shift_right(num, from), to - from);
}

/////////////////////////////////////////////////////////////////
// https://stackoverflow.com/questions/18453302/how-do-you-pack-one-32bit-int-into-4-8bit-ints-in-glsl-webgl

const vec4 bitEnc = vec4(1.,255.,65025.,16581375.);
const vec4 bitDec = 1./bitEnc;
vec4 EncodeFloatRGBA (float v) {
  vec4 enc = bitEnc * v;
  enc = fract(enc);
  enc -= enc.yzww * vec2(1./255., 0.).xxxy;
  return enc;
}
float DecodeFloatRGBA (vec4 v) {
  return dot(v, bitDec);
}

/////////////////////////////////////////////////////////////////
// https://gist.github.com/Flexi23/1713774
// 
vec2 encode16BitFloatInto2xUInt8(float v) {
  vec2 c = vec2(0.);

  int signum = (v >= 0.) ? 128 : 0;
  v = abs(v);
  int exponent = 15;
  float limit = 1024.; // considering the bias from 2^-5 to 2^10 (==1024)
  for(int exp = 15; exp > 0; exp--) {
    if ( v < limit) {
      limit /= 2.;
      exponent--;
    }
  }

  float rest;
  if (exponent == 0) {
    rest = v / limit / 2.;      // "subnormalize" implicite preceding 0. 
  } 
  else {
    rest = (v - limit)/limit;   // normalize accordingly to implicite preceding 1.
  }

  int mantissa = int(rest * 2048.);   // 2048 = 2^11 for the (split) 11 bit mantissa
  int msb = mantissa / 256;           // the most significant 3 bits go into the lower part of the first byte
  int lsb = mantissa - msb * 256;     // there go the other 8 bit of the lower significance

  c.x = float(signum + exponent * 8 + msb) / 255.;    // color normalization for texture2D
  c.y = float(lsb) / 255.;

  if (v >= 2048.) {
    c.y = 1.;
  }

  return c;
}

float decode16BitFloatFrom2xUInt8(vec2 c) {
  float v = 0.;

  int ix = int(c.x*255.); // 1st byte: 1 bit signum, 4 bits exponent, 3 bits mantissa (MSB)
  int iy = int(c.y*255.); // 2nd byte: 8 bit mantissa (LSB)

  int s = (c.x >= 0.5) ? 1 : -1;
  ix = (s > 0) ? ix - 128 : ix;   // remove the signum bit from exponent
  int iexp = ix / 8;              // cut off the last 3 bits of the mantissa to select the 4 exponent bits
  int msb = ix - iexp * 8;        // subtract the exponent bits to select the 3 most significant bits of the mantissa

  int norm = (iexp == 0) ? 0 : 2048;          // distinguish between normalized and subnormalized numbers
  int mantissa = norm + msb * 256 + iy;       // implicite preceding 1 or 0 added here
  norm = (iexp == 0) ? 1 : 0;                 // normalization toggle
  float exponent = pow( 2., float(iexp + norm) - 16.); // -5 for the the exponent bias from 2^-5 to 2^10 plus another -11 for the normalized 12 bit mantissa 
  v = float( s * mantissa ) * exponent;

  return v;
}

// TODO : Encoding Float32 to 4x UInt8
// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js
// http://ultraist.hatenablog.com/entry/20110608/1307539319

`,Dd=`#define GLSLIFY 1

int ftoi(float val) {
  return int(floor(val + 0.5));
}
ivec2 ftoi(vec2 v2) {
  return ivec2(ftoi(v2.x), ftoi(v2.y));
}
ivec3 ftoi(vec3 v4) {
  return ivec3(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z));
}
ivec4 ftoi(vec4 v4) {
  return ivec4(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z), ftoi(v4.w));
}

#ifdef ENABLE_ES3

int imod(int x, int y) {
  return x % y;
}

void setFlag(inout int flags, int flag) {
  flags |= flag;
}

void clearFlag(inout int flags, int flag) {
  flags &= ~flag;
}

bool testFlag(int flags, int flag) {
  return (flags & flag) != 0;
}

// private function: Mangle me...
ivec2 _pixelIndexToUV(int index, int textureWidth) {
  return ivec2(index % textureWidth, index / textureWidth);
}

vec4 fetchTexel(sampler2D texture, int textureWidth, int index) {
  return texelFetch(texture, _pixelIndexToUV(index, textureWidth), 0);
}

vec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {
  return texelFetch(texture, texCoord, 0);
}

vec4 fetchTexel(sampler2D texture, ivec2 textureSize, int index) {
    return texelFetch(texture, _pixelIndexToUV(index, textureSize.x), 0);
}

#else

// TODO: integrate: https://gist.github.com/mattatz/70b96f8c57d4ba1ad2cd

int max(int a, int b) {
  return a > b ? a : b;
}
int min(int a, int b) {
  return a < b ? a : b;
}

float round(float val) {
  return floor(val + 0.4);
}

int imod(int x, int y) {
  return x-y*(x/y);
}

void setFlag(inout int flags, int flag) {
  flags += flag;
}
void clearFlag(inout int flags, int flag) {
  flags -= flag;
}

bool testFlag(int flags, int flag) {
  return imod(flags / flag, 2) != 0;
}

// private function: Mangle me...
vec2 _pixelIndexToUV(int index, int textureSize) {
  float flTexSize = float(textureSize);
  float x = (float(imod(index, textureSize))+0.5)/flTexSize;
  float y = (floor(float(index / textureSize))+0.5)/flTexSize;
  return vec2(x, y);
}

vec4 fetchTexel(sampler2D texture, int textureSize, int index) {
  vec2 texCoord = _pixelIndexToUV(index, textureSize);
  return texture2D(texture, texCoord);
}

vec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {
  vec2 ftextureSize = vec2(textureSize);
  return texture2D(texture, (vec2(texCoord) + 0.5) / ftextureSize);
}

#endif // ENABLE_ES3

int uvToPixelIndex(vec2 uv, int textureSize) {
  return int(uv.x * float(textureSize)) + (int(floor(uv.y * float(textureSize))) * textureSize);
}

`,Kd=`#define GLSLIFY 1
float RadicalInverse_VdC(uint bits) 
{
  bits = (bits << 16u) | (bits >> 16u);
  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
  return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
vec2 Hammersley(uint i, uint N)
{
  return vec2(float(i)/float(N), RadicalInverse_VdC(i));
} 
`,Ld=`#define GLSLIFY 1
import 'constants.glsl'

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
  float a = roughness*roughness;

  float phi = 2.0 * PI * Xi.x;
  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
  float sinTheta = sqrt(1.0 - cosTheta*cosTheta);

  // from spherical coordinates to cartesian coordinates
  vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

  // from tangent-space vector to world-space sample vector
  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
  vec3 tangent   = normalize(cross(up, N));
  vec3 bitangent = cross(N, tangent);

  vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
  return normalize(sampleVec);
} 
`,zd=`#define GLSLIFY 1
import 'GLSLUtils.glsl'
import 'gamma.glsl'

#ifdef ENABLE_MULTI_DRAW
 
uniform sampler2D materialsTexture;
uniform highp ivec2 materialsTextureSize;

vec4 getMaterialValue(vec2 materialCoords, int valueIndex) {
  int index = ftoi(materialCoords.x) + valueIndex;
  ivec2 texelCoords = ivec2(imod(index, materialsTextureSize.x), index / materialsTextureSize.x);
  
  return fetchTexel(materialsTexture, materialsTextureSize, texelCoords);
}

#else // ENABLE_MULTI_DRAW

////////////////////////
// Material Param Helpers.

vec4 getColorParamValue(vec4 value, sampler2D tex, int texType, vec2 texCoord) {
  if (texType == 0) {
    return value;
  }
  else if (texType == 1 || texType == 2) {
    // Note: we assume textures are always in gamma space, and must be converted
    // to linear. I cann't find evidence that 8-bit textures can be in linear space.
    // TODO: Use SRGB textures.
    return toLinear(texture2D(tex, texCoord));
  }
  else if (texType == 3) {
    // Float HDR Texture. We assume these textures are in linear space.
    return texture2D(tex, texCoord);
  }
  else
    return value;
}

float luminanceFromRGB(vec3 rgb) {
  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;
}

float getLuminanceParamValue(float value, sampler2D tex, int texType, vec2 texCoord) {
  if (texType == 0)
    return value;
  else
    return luminanceFromRGB(texture2D(tex, texCoord).rgb);
}

#endif // ENABLE_MULTI_DRAW
`,_d=`#define GLSLIFY 1
#ifdef ENABLE_FLOAT_TEXTURES
import 'GLSLUtils.glsl'
import 'transpose.glsl'
mat4 getMatrix(sampler2D texture, int textureSize, int index) {
  // Unpack 3 x 4 matrix columns into a 4 x 4 matrix.
  vec4 col0 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 1);
  vec4 col1 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 2);
  vec4 col2 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 3);
  mat4 result = transpose(mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0)));
  return result;
}

mat4 getModelMatrix(int id) {
  return getMatrix(instancesTexture, instancesTextureSize, id);
}

#else

uniform mat4 modelMatrix;

mat4 getModelMatrix(int id) {
  return modelMatrix;
}

#endif

`,Od=`#define GLSLIFY 1
import 'GLSLUtils.glsl'
const int ENVMAP_FLAG_HEADLIGHT =  1; // 1<<0;

struct MaterialParams {
  vec3 baseColor;
  float ambientOcclusion;
  float metallic;
  float roughness;
  float reflectance;
  float opacity;
  float emission;
};

#ifndef ENABLE_PBR

vec4 pbrSurfaceRadiance(in MaterialParams material, vec3 normal, in vec3 viewVector) {
  vec3 irradiance = vec3(dot(normal, viewVector));
  float ao = material.ambientOcclusion; 
  return vec4(material.baseColor * ao * irradiance + (material.emission * material.baseColor), material.opacity);

  // return vec4(material.baseColor * ao * irradiance , material.opacity);
}

#else

uniform int envMapFlags;
uniform samplerCube irradianceMap;
uniform samplerCube prefilterMap;
uniform sampler2D brdfLUT;

vec3 sampleIrradiance(vec3 dir) {
  return texture(irradianceMap, dir).rgb;
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {
  return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}

float luminance(vec3 color) {
  return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
}

vec4 pbrSurfaceRadiance(in MaterialParams material, vec3 normal, in vec3 viewVector) {
  if (envMapFlags == -1) {
    vec3 irradiance = vec3(dot(normal, viewVector));
    float ao = material.ambientOcclusion; 
    return vec4(material.baseColor * ao * irradiance + (material.emission * material.baseColor), material.opacity);
  }

  vec3 N = normal;
  vec3 V = viewVector;
  vec3 R = reflect(-V, N);
  float roughness = material.roughness * material.roughness;
  vec3 diffuseColor = (1.0 - material.metallic) * material.baseColor;

  // Note: The specular reflectance of metallic surfaces is chromatic
  // https://google.github.io/filament/Filament.html#listing_fnormal
  vec3 F0 = 0.16 * material.reflectance * material.reflectance * (1.0 - material.metallic) + material.baseColor * material.metallic;

  float NdotV = dot(N, V);

  vec3 F = fresnelSchlickRoughness(max(NdotV, 0.0), F0, roughness);

  vec3 kS = F;
  vec3 kD = 1.0 - kS;
  kD *= 1.0 - material.metallic;
  float ao = material.ambientOcclusion; 
  
  vec3 irradiance;
  vec3 irradianceSampleDir = normal;
  
  bool headLightMode = testFlag(envMapFlags, ENVMAP_FLAG_HEADLIGHT);
  if (headLightMode) {
    irradianceSampleDir = viewVector;
  }
  irradiance = sampleIrradiance(irradianceSampleDir);
  // vec3 irradiance = shGetIrradianceAt(shCoefficients, N);
  vec3 diffuse    = irradiance * diffuseColor;
  
  const float MAX_REFLECTION_LOD = 4.0;
  vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;   
  vec2 envBRDF  = texture(brdfLUT, vec2(max(NdotV, 0.0), roughness)).rg;
  vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);
  
  vec3 radiance = (kD * diffuse + specular) * ao;
  
  // Now handle semi-transparent objects. We need to be able to linearly interpolate
  // opacity to make objects disappear, so we need a continuous change.
  float opacity = material.opacity;
  vec4 transparent = vec4((radiance * opacity) + specular, opacity + luminance(specular) + luminance(F));
  vec4 result = mix(transparent, vec4(radiance, 1.0), opacity);

  // Add emission on as the final component.
  // Note: emission allows a material to blend off its specular component, 
  // which can also be used to make an object completely disappear if also transparent.
  return mix(result, vec4(material.baseColor, opacity), material.emission);
}

#endif // ENABLE_PBR
`,Pd=`#define GLSLIFY 1
uniform vec3 shCoeffs[9];

vec3 sampleSHCoeffs(vec3 dir) {
  // dir is assumed to have unit length
  float x = dir.x, y = dir.y, z = dir.z;
  // band 0
  vec3 result = shCoeffs[ 0 ] * 0.886227;
  // band 1
  result += shCoeffs[ 1 ] * 2.0 * 0.511664 * y;
  result += shCoeffs[ 2 ] * 2.0 * 0.511664 * z;
  result += shCoeffs[ 3 ] * 2.0 * 0.511664 * x;
  // band 2
  result += shCoeffs[ 4 ] * 2.0 * 0.429043 * x * y;
  result += shCoeffs[ 5 ] * 2.0 * 0.429043 * y * z;
  result += shCoeffs[ 6 ] * ( 0.743125 * z * z - 0.247708 );
  result += shCoeffs[ 7 ] * 2.0 * 0.429043 * x * z;
  result += shCoeffs[ 8 ] * 0.429043 * ( x * x - y * y );
  return result;
}
`,jd=`#define GLSLIFY 1
const float gamma_const = 2.2;

float toLinear(float v) {
  return pow(v, gamma_const);
}

vec2 toLinear(vec2 v) {
  return pow(v, vec2(gamma_const));
}

vec3 toLinear(vec3 v) {
  return pow(v, vec3(gamma_const));
}

vec4 toLinear(vec4 v) {
  return vec4(toLinear(v.rgb), v.a);
}

float toGamma(float v) {
  return pow(v, 1.0 / gamma_const);
}

vec2 toGamma(vec2 v) {
  return pow(v, vec2(1.0 / gamma_const));
}

vec3 toGamma(vec3 v) {
  return pow(v, vec3(1.0 / gamma_const));
}

vec4 toGamma(vec4 v) {
  return vec4(toGamma(v.rgb), v.a);
}

float toGamma(float v, float gamma) {
  return pow(v, 1.0 / gamma);
}

vec2 toGamma(vec2 v, float gamma) {
  return pow(v, vec2(1.0 / gamma));
}

vec3 toGamma(vec3 v, float gamma) {
  return pow(v, vec3(1.0 / gamma));
}

vec4 toGamma(vec4 v, float gamma) {
  return vec4(toGamma(v.rgb, gamma), v.a);
}

`,qd=`#define GLSLIFY 1

#ifndef ENABLE_ES3

float inverse(float m) {
  return 1.0 / m;
}

mat2 inverse(mat2 m) {
  return mat2(m[1][1],-m[0][1],
             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);
}

mat3 inverse(mat3 m) {
  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];
  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];
  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];

  float b01 = a22 * a11 - a12 * a21;
  float b11 = -a22 * a10 + a12 * a20;
  float b21 = a21 * a10 - a11 * a20;

  float det = a00 * b01 + a01 * b11 + a02 * b21;

  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),
              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),
              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;
}

mat4 inverse(mat4 m) {
  float
      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],
      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],
      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],
      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],

      b00 = a00 * a11 - a01 * a10,
      b01 = a00 * a12 - a02 * a10,
      b02 = a00 * a13 - a03 * a10,
      b03 = a01 * a12 - a02 * a11,
      b04 = a01 * a13 - a03 * a11,
      b05 = a02 * a13 - a03 * a12,
      b06 = a20 * a31 - a21 * a30,
      b07 = a20 * a32 - a22 * a30,
      b08 = a20 * a33 - a23 * a30,
      b09 = a21 * a32 - a22 * a31,
      b10 = a21 * a33 - a23 * a31,
      b11 = a22 * a33 - a23 * a32,

      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  return mat4(
      a11 * b11 - a12 * b10 + a13 * b09,
      a02 * b10 - a01 * b11 - a03 * b09,
      a31 * b05 - a32 * b04 + a33 * b03,
      a22 * b04 - a21 * b05 - a23 * b03,
      a12 * b08 - a10 * b11 - a13 * b07,
      a00 * b11 - a02 * b08 + a03 * b07,
      a32 * b02 - a30 * b05 - a33 * b01,
      a20 * b05 - a22 * b02 + a23 * b01,
      a10 * b10 - a11 * b08 + a13 * b06,
      a01 * b08 - a00 * b10 - a03 * b06,
      a30 * b04 - a31 * b02 + a33 * b00,
      a21 * b02 - a20 * b04 - a23 * b00,
      a11 * b07 - a10 * b09 - a12 * b06,
      a00 * b09 - a01 * b07 + a02 * b06,
      a31 * b01 - a30 * b03 - a32 * b00,
      a20 * b03 - a21 * b01 + a22 * b00) / det;
}

#endif

`,$d=`#define GLSLIFY 1

#ifndef ENABLE_ES3

float transpose(float m) {
  return m;
}

mat2 transpose(mat2 m) {
  return mat2(m[0][0], m[1][0],
              m[0][1], m[1][1]);
}

mat3 transpose(mat3 m) {
  return mat3(m[0][0], m[1][0], m[2][0],
              m[0][1], m[1][1], m[2][1],
              m[0][2], m[1][2], m[2][2]);
}

mat4 transpose(mat4 m) {
  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],
              m[0][1], m[1][1], m[2][1], m[3][1],
              m[0][2], m[1][2], m[2][2], m[3][2],
              m[0][3], m[1][3], m[2][3], m[3][3]);
}

#endif

`,es=`#define GLSLIFY 1
attribute float vertexIDs;

vec2 getQuadVertexPositionFromID() {
  int vertexID = int(vertexIDs);
  if (vertexID == 0)
    return vec2(-0.5, -0.5);
  else if (vertexID == 1)
    return vec2(0.5, -0.5);
  else if (vertexID == 2)
    return vec2(-0.5, 0.5);
  else if (vertexID == 3)
    return vec2(0.5, 0.5);
  return vec2(0,0);
}
`,gs=`#define GLSLIFY 1

vec3 decodeHDR(const in vec3 ldrPixel, const in float cdmAlpha) {
  float avg = (cdmAlpha * 16.0 - 8.0);
  float scl = 1.0;
  vec3 color;
  color.x = (tan((ldrPixel.x-0.5)*1.5)/scl)+avg;
  color.y = (tan((ldrPixel.y-0.5)*1.5)/scl)+avg;
  color.z = (tan((ldrPixel.z-0.5)*1.5)/scl)+avg;

  // convert from logarithmic curve to linear curve.
  // subtract the epsilon that was added during encoding.
  const float eps = 0.001;
  color.x = pow(10.0, color.x) - eps;
  color.y = pow(10.0, color.y) - eps;
  color.z = pow(10.0, color.z) - eps;
  return color;
}

vec3 decodeHDR(sampler2D ldrSampler, sampler2D cdmSampler, vec2 texCoord) {
#ifdef ENABLE_ES3
  float cdm = texture2D(cdmSampler, texCoord).r;
#else
  float cdm = texture2D(cdmSampler, texCoord).a;
#endif
  return decodeHDR(texture2D(ldrSampler, texCoord).rgb, cdm);
}

`,ts=`#define GLSLIFY 1
  uniform int floatGeomBuffer;
  uniform int passId;
  uniform int occlusionCulling;

  import 'GLSLBits.glsl'
  
  vec4 setFragColor_geomData(vec3 v_viewPos, int floatGeomBuffer, int passId, float geomItemId, float elemItemId, int isOrthographic){
    vec4 fragColor;

    float viewDist;
    if (isOrthographic > 0) {
      viewDist = abs(v_viewPos.z);
    } else {
      viewDist = length(v_viewPos);
    }
    if (floatGeomBuffer != 0) {
      fragColor.r = float(passId); 
      fragColor.g = float(geomItemId);
      fragColor.b = elemItemId;
      fragColor.a = viewDist;
    }
    else {
      ///////////////////////////////////
      // UInt8 buffer
      fragColor.r = mod(geomItemId, 256.) / 255.;
      fragColor.g = (floor(geomItemId / 256.) + float(passId) * 32.) / 255.;

      // encode the dist as a 16 bit float
      vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);
      fragColor.b = float16bits.x;
      fragColor.a = float16bits.y;
    }

#ifdef ENABLE_ES3
    if (occlusionCulling != 0) {
      // Calculate a simple stochastic transparency to reduce the cost of the reduction shader.
      // We only need one pixel to be visible to consider the geometry visible, so here we 
      // keep only one in 7x7 (49) pixels. This signficatly reduces the cost of reducing the scene
      // to the reduction data buffer.
      // Note: this is not a stochastic transparency, as we are simply setting black pixels to 
      // reduce the number of reduction points for this geometry. The black pixels (not discarded)
      // still occlude other geometries, but during reduction count to nothing.
      int x = int(gl_FragCoord.x * 1000.0);
      int y = int(gl_FragCoord.y * 1000.0);
      if (x % 7 != 0 || y % 7 != 0) {
        fragColor = vec4(0.0, 0.0, 0.0, 1.0);
      };
    }
#endif // ENABLE_ES3

    return fragColor;
  }

  // Note: the older code imported drawItemId.glsl and newer code is importing geomItemId.glsl
  // This code keeps compatibility with the older shaders.
  vec4 setFragColor_geomData(vec3 v_viewPos, int floatGeomBuffer, int passId, float geomItemId, int isOrthographic){
    return setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, geomItemId, -1.0, isOrthographic);
  }`,Is=`#define GLSLIFY 1
import 'GLSLUtils.glsl'
import 'drawItemTexture.glsl'

#ifdef ENABLE_FLOAT_TEXTURES
vec4 getHighlightColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);
}
#else

uniform vec4 highlightColor;

vec4 getHighlightColor(int id) {
    return highlightColor;
}

#endif

vec4 setFragColor_highlight(float v_geomItemId){
  vec4 fragColor; 
  int geomItemId = int(v_geomItemId + 0.5);
  fragColor = getHighlightColor(geomItemId);
  return fragColor;
}
`,ls=`#define GLSLIFY 1
// Note: On mobile, I can't seem to pass around a stuct containing sampler2D.
// I have to unpack the struct and pass its members. :(
// struct ImageAtlas {
//     sampler2D layout;
//     sampler2D image;
//     vec4 desc;
// };

import 'GLSLUtils.glsl'

vec4 getSubImageLayout(int index, in sampler2D atlasLayout, in vec4 atlasDesc){
    return fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);
}
vec2 calcSubImageTexCoords(vec2 texCoord, int index, in sampler2D atlasLayout, in vec4 atlasDesc){
    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);
    // The following line is a hack to fix artifacts in our PBR lighting
    // We were seeing loads of lighting garbage on some sufaces that were orthogonal
    // to the world. The UV coordinates would have been landing right on the edges
    // of our subimages and were often sampling outside the image. This couuld
    // have been because of filtering, or an error in the uv coords. 
    texCoord = clamp(texCoord, vec2(0.01, 0.01), vec2(0.99, 0.99));
    vec2 subimageTexel = texCoord * layoutData.zw;
    // subimageTexel = clamp(subimageTexel, vec2(0.0, 0.0), vec2(1.0, 1.0));
    return subimageTexel + layoutData.xy;
}
vec4 sampleSubImage(vec2 texCoord, int index, in sampler2D atlasLayout, in sampler2D atlasImage, in vec4 atlasDesc){
    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);
    vec2 atlasCoords = calcSubImageTexCoords(texCoord, index, atlasLayout, atlasDesc);
    return texture2D(atlasImage, atlasCoords);
}`;ue.setShaderModule("imageAtlas.glsl",ls);ue.setShaderModule("surfaceGeomData.glsl",ts);ue.setShaderModule("surfaceHighlight.glsl",Is);ue.setShaderModule("computeViewNormal.glsl",yd);ue.setShaderModule("calcFatLinesViewPos.glsl",Xd);ue.setShaderModule("constants.glsl",kd);ue.setShaderModule("convolve-helpers.glsl",fd);ue.setShaderModule("cutaways.glsl",Ed);ue.setShaderModule("debugColors.glsl",Td);ue.setShaderModule("drawItemId.glsl",ya);ue.setShaderModule("geomItemId.glsl",ya);ue.setShaderModule("geomType.glsl",Yd);ue.setShaderModule("drawItemTexture.glsl",vd);ue.setShaderModule("envmap-dualfisheye.glsl",Md);ue.setShaderModule("envmap-equirect.glsl",Hd);ue.setShaderModule("envmap-octahedral.glsl",xd);ue.setShaderModule("GLSLBits.glsl",wd);ue.setShaderModule("GLSLUtils.glsl",Dd);ue.setShaderModule("Hammersley.glsl",Kd);ue.setShaderModule("ImportanceSampleGGX.glsl",Ld);ue.setShaderModule("materialparams.glsl",zd);ue.setShaderModule("modelMatrix.glsl",_d);ue.setShaderModule("PBRSurfaceRadiance.glsl",Od);ue.setShaderModule("SHCoeffs.glsl",Pd);ue.setShaderModule("gamma.glsl",jd);ue.setShaderModule("inverse.glsl",qd);ue.setShaderModule("transpose.glsl",$d);ue.setShaderModule("quadVertexFromID.glsl",es);ue.setShaderModule("unpackHDR.glsl",gs);var Cs=` 
precision highp float;
#define GLSLIFY 1

varying vec2 v_texCoord;
uniform sampler2D ldrSampler;
uniform sampler2D cdmSampler;
uniform vec4 srcRegion; // pos, and size of the source region

import 'unpackHDR.glsl'

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {

#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  vec2 srcUv = srcRegion.xy + (v_texCoord * srcRegion.zw);

  fragColor = vec4(decodeHDR(ldrSampler, cdmSampler, srcUv), 1.0);

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}

`,is=`
precision highp float;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID();
  v_texCoord = position+0.5;
  gl_Position = vec4(position*2.0, 0.0, 1.0);
}
`;class ns extends Pe{constructor(e){super(e,"UnpackHDRShader");this.setShaderStage("VERTEX_SHADER",is),this.setShaderStage("FRAGMENT_SHADER",Cs)}}const Qi=(i,e)=>{let g,t,I;switch(e){case"UInt8":g=1,t=4,I=i.UNSIGNED_BYTE;break;case"SInt8":g=1,t=4,I=i.BYTE;break;case"UInt16":g=1,t=4,I=i.UNSIGNED_SHORT;break;case"SInt16":g=1,t=4,I=i.SHORT;break;case"UInt32":g=1,t=4,I=i.UNSIGNED_INT;break;case"SInt32":g=1,t=4,I=i.INT;break;case"Float32":g=1,t=4,I=i.FLOAT;break;case"Vec2":g=2,t=4,I=i.FLOAT;break;case"Vec3":g=3,t=4,I=i.FLOAT;break;case"Vec4":case"Color":g=4,t=4,I=i.FLOAT;break;case"RGBA":g=4,t=1,I=i.UNSIGNED_BYTE;break;default:throw"Unhandled Type"}return{dimension:g,elementSize:t,dataType:I}};class Xa{}class as extends Xa{constructor(e,g,t,I){super();this.gl=e,this.shaderAttrs=g,this.glattrbuffers=t,this.indexBuffer=I}bind(e){const g=this.gl;for(const t in this.shaderAttrs){if(t=="instancedIds")continue;const I=this.shaderAttrs[t],l=I.location;if(l==-1)continue;const C=this.glattrbuffers[t];if(!C){g.disableVertexAttribArray(l);continue}const n=Qi(this.gl,C.dataType),F=n.dimension*n.elementSize,a=C.offset!=null?C.offset*n.dimension*n.elementSize:0,U=C.normalized==!0,d=I.instanced;g.enableVertexAttribArray(l),g.bindBuffer(g.ARRAY_BUFFER,C.buffer),g.vertexAttribPointer(l,n.dimension,n.dataType,U,F,a),g.vertexAttribDivisor&&(d==!0?g.vertexAttribDivisor(l,1):g.vertexAttribDivisor(l,0))}return g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.indexBuffer),!0}unbind(){const e=this.gl;for(const g in this.shaderAttrs){const t=this.shaderAttrs[g],I=t.location;I==-1&&e.enableVertexAttribArray(I),t.instanced&&e.vertexAttribDivisor(I,0)}e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)}destroy(){}}class Fs extends Xa{constructor(e,g,t,I){super();this.gl=e,this.vao=e.createVertexArray(),e.bindVertexArray(this.vao);for(const l in g){if(l=="instancedIds")continue;const C=g[l],n=C.location;if(n==-1)continue;let F=t[l];if(!F&&(l.endsWith("Next")&&(F=t[l.substring(0,l.length-4)],C.offset=1),!F)){e.disableVertexAttribArray(n);continue}const a=Qi(e,F.dataType),U=a.dimension*a.elementSize,d=C.offset!=null?C.offset*a.dimension*a.elementSize:0,s=F.normalized==!0,o=C.instanced;e.enableVertexAttribArray(n),e.bindBuffer(e.ARRAY_BUFFER,F.buffer),e.vertexAttribPointer(n,a.dimension,a.dataType,s,U,d),e.vertexAttribDivisor&&(o==!0?e.vertexAttribDivisor(n,1):e.vertexAttribDivisor(n,0))}this.indexBuffer=I,this.indexBuffer&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indexBuffer)}bind(e){const g=this.gl;return g.bindVertexArray(this.vao),this.indexBuffer&&g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.indexBuffer),!0}unbind(){const e=this.gl;e.bindVertexArray(null),this.indexBuffer&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)}destroy(){const e=this.gl;this.indexBuffer&&(e.bindVertexArray(this.vao),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),e.deleteVertexArray(this.vao)}}function og(i,e,g,t){return i.createVertexArray==null?new as(i,e,g,t):new Fs(i,e,g,t)}class DI extends Te{constructor(e,g){super(e);this.listenerIDs={},this.fbo=null,this.srcLDRTex=null,this.srcCDMTex=null,this.unpackHDRShader=null,this.shaderBinding=null,this.hdrImage=g;const t=()=>{this.__unpackHDRImage(this.hdrImage.getParams())};this.listenerIDs.updated=this.hdrImage.on("updated",t),this.hdrImage.isLoaded()?t():this.listenerIDs.loaded=this.hdrImage.on("loaded",t)}getImage(){return this.hdrImage}__unpackHDRImage(e){const g=this.__gl,t=e.data.ldr,I=e.data.cdm;if(this.fbo)this.srcLDRTex.bufferData(t),this.srcCDMTex.bufferData(I);else{this.configure({format:"RGBA",type:"FLOAT",width:t.width,height:t.height,filter:"LINEAR",wrap:"CLAMP_TO_EDGE"}),this.fbo=new Bi(this.__gl,this),this.fbo.setClearColor(new E(0,0,0,0)),this.srcLDRTex=new Te(this.__gl,{format:"RGB",type:"UNSIGNED_BYTE",width:t.width,height:t.height,filter:"NEAREST",mipMapped:!1,wrap:"CLAMP_TO_EDGE",data:t}),this.srcCDMTex=new Te(this.__gl,{format:g.name=="webgl2"?"RED":"ALPHA",type:"UNSIGNED_BYTE",width:t.width,height:t.height,filter:"NEAREST",mipMapped:!1,wrap:"CLAMP_TO_EDGE",data:I}),this.unpackHDRShader=new ns(this.__gl);const n=this.unpackHDRShader.compileForTarget("GLHDRImage",{directives:["#define ENABLE_ES3"]});this.shaderBinding=og(this.__gl,n.attrs,g.__quadattrbuffers,g.__quadIndexBuffer)}this.fbo.bindAndClear();const l={};this.unpackHDRShader.bind(l,"GLHDRImage"),this.shaderBinding.bind(l);const C=l.unifs;this.srcLDRTex.bindToUniform(l,C.ldrSampler),this.srcCDMTex.bindToUniform(l,C.cdmSampler),g.uniform4fv(C.srcRegion.location,[0,0,1,1]),g.drawQuad(),this.fbo.unbind(),this.emit("updated")}bindToUniform(e,g,t){return super.bindToUniform(e,g,t)}destroy(){super.destroy(),this.fbo&&(this.fbo.destroy(),this.srcLDRTex.destroy(),this.srcCDMTex.destroy()),this.unpackHDRShader&&this.unpackHDRShader.destroy(),this.shaderBinding&&this.shaderBinding.destroy(),"loaded"in this.listenerIDs&&this.hdrImage.removeListenerById("loaded",this.listenerIDs.loaded),this.hdrImage.removeListenerById("updated",this.listenerIDs.updated)}}var Us=`
precision highp float;
#define GLSLIFY 1

varying vec2 v_texCoord;

import 'GLSLUtils.glsl'
import 'Hammersley.glsl'
import 'ImportanceSampleGGX.glsl'

float GeometrySchlickGGX(float NdotV, float roughness)
{
  float a = roughness;
  float k = (a * a) / 2.0;

  float nom   = NdotV;
  float denom = NdotV * (1.0 - k) + k;

  return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
  float NdotV = max(dot(N, V), 0.0);
  float NdotL = max(dot(N, L), 0.0);
  float ggx2 = GeometrySchlickGGX(NdotV, roughness);
  float ggx1 = GeometrySchlickGGX(NdotL, roughness);

  return ggx1 * ggx2;
}

vec2 IntegrateBRDF(float NdotV, float roughness)
{
  vec3 V;
  V.x = sqrt(1.0 - NdotV*NdotV);
  V.y = 0.0;
  V.z = NdotV;

  float A = 0.0;
  float B = 0.0;

  vec3 N = vec3(0.0, 0.0, 1.0);

  for(uint i = 0u; i < SAMPLE_COUNT; ++i)
  {
    vec2 Xi = Hammersley(i, SAMPLE_COUNT);
    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
    vec3 L  = normalize(2.0 * dot(V, H) * H - V);

    float NdotL = max(L.z, 0.0);
    float NdotH = max(H.z, 0.0);
    float VdotH = max(dot(V, H), 0.0);

    if (NdotL > 0.0)
    {
      float G = GeometrySmith(N, V, L, roughness);
      float G_Vis = (G * VdotH) / (NdotH * NdotV);
      float Fc = pow(1.0 - VdotH, 5.0);

      A += (1.0 - Fc) * G_Vis;
      B += Fc * G_Vis;
    }
  }
  A /= float(SAMPLE_COUNT);
  B /= float(SAMPLE_COUNT);
  return vec2(A, B);
}

out vec2 fragColor;
void main(void) {
  vec2 integratedBRDF = IntegrateBRDF(v_texCoord.x, v_texCoord.y);
  fragColor = integratedBRDF;
}

`,ds=`
precision highp float;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID();
  v_texCoord = position+0.5;
  gl_Position = vec4(position*2.0, 0.0, 1.0);
}
`;class ss extends Pe{constructor(e){super(e,"PreComputeBRDFShader");this.setShaderStage("VERTEX_SHADER",ds),this.setShaderStage("FRAGMENT_SHADER",Us)}}var os=`
precision highp float;
#define GLSLIFY 1
import 'constants.glsl'
import 'convolve-helpers.glsl'

uniform float roughness;
uniform int faceId;
varying vec2 v_texCoord;

out vec4 fragColor;
void main(void) {

  vec3 N = cubeFaceUvToDir(v_texCoord.x, v_texCoord.y, faceId);   

  vec3 irradiance = vec3(0.0);

  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
  vec3 tangent   = normalize(cross(up, N));
  vec3 bitangent = cross(N, tangent);

  float nrSamples = 0.0; 
  for(float phi = 0.0; phi < 2.0 * PI; phi += SAMPLE_DELTA)
  {
    for(float theta = 0.0; theta < 0.5 * PI; theta += SAMPLE_DELTA)
    {
      // spherical to cartesian (in tangent space)
      // from spherical coordinates to cartesian coordinates
      vec3 H = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));
      // tangent space to world
      vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;

      irradiance += sampleEnvMap(normalize(sampleVec)).rgb * cos(theta) * sin(theta);
      nrSamples++;
    }
  }
  irradiance = PI * irradiance * (1.0 / float(nrSamples));

  fragColor = vec4(irradiance, 1.0);
}
`,As=`
precision highp float;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID();
  v_texCoord = position+0.5;
  gl_Position = vec4(position*2.0, 0.0, 1.0);
}
`;class Bs extends Pe{constructor(e){super(e,"ConvolveIrradianceShader");this.setShaderStage("VERTEX_SHADER",As),this.setShaderStage("FRAGMENT_SHADER",os)}}var Qs=`
precision highp float;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID();
  v_texCoord = position+0.5;
  gl_Position = vec4(position*2.0, 0.0, 1.0);
}
`,Vs=`precision highp float;
#define GLSLIFY 1

import 'GLSLUtils.glsl'
import 'ImportanceSampleGGX.glsl'
import 'convolve-helpers.glsl'
import 'Hammersley.glsl'
  
  
uniform float roughness;
uniform int faceId;
varying vec2 v_texCoord;

out vec4 fragColor;
void main(void) {

  vec3 N = cubeFaceUvToDir(v_texCoord.x, v_texCoord.y, faceId);   

  vec3 R = N;
  vec3 V = R;

  float totalWeight = 0.0;   
  vec3 prefilteredColor = vec3(0.0);     
  for(uint i = 0u; i < SAMPLE_COUNT; ++i)
  {
    vec2 Xi = Hammersley(i, SAMPLE_COUNT);
    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
    vec3 L  = normalize(2.0 * dot(V, H) * H - V);

    float NdotL = max(dot(N, L), 0.0);
    if (NdotL > 0.0)
    {
      prefilteredColor += sampleEnvMap(L).rgb * NdotL;
      totalWeight      += NdotL;
    }
  }
  prefilteredColor = prefilteredColor / totalWeight;

  fragColor = vec4(prefilteredColor, 1.0);
}
`;class rs extends Pe{constructor(e){super(e,"ConvolveSpecularShader");this.setShaderStage("VERTEX_SHADER",Qs),this.setShaderStage("FRAGMENT_SHADER",Vs)}}class Rs extends Xe{constructor(e,g){super();this.__gl=e;const t=e;this.maxFragmentShaderTextureUnits=e.getParameter(this.__gl.MAX_TEXTURE_IMAGE_UNITS),t.__quadVertexIdsBuffer||t.setupInstancedQuad(),this.textureType=1,this.textureDesc=[0,0,0,0],this.__convolved=!1,this.__fbos=[]}convolveProbe(e){const g=this.__gl,t={};t.shaderopts={directives:["#define ENABLE_ES3","#define ENABLE_FLOAT_TEXTURES"]},_e.deviceCategory=="Low"?(t.shaderopts.directives.push("#define SAMPLE_DELTA 0.1"),t.shaderopts.directives.push("#define SAMPLE_COUNT 64u")):_e.deviceCategory=="Medium"?(t.shaderopts.directives.push("#define SAMPLE_DELTA 0.08"),t.shaderopts.directives.push("#define SAMPLE_COUNT 256u")):(t.shaderopts.directives.push("#define SAMPLE_DELTA 0.025"),t.shaderopts.directives.push("#define SAMPLE_COUNT 1024u")),this.brdfLUTTexture=g.createTexture(),g.bindTexture(g.TEXTURE_2D,this.brdfLUTTexture),g.texImage2D(g.TEXTURE_2D,0,g.RG16F,512,512,0,g.RG,g.FLOAT,null),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_S,g.CLAMP_TO_EDGE),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_T,g.CLAMP_TO_EDGE),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,g.LINEAR),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,g.LINEAR);const I=new ss(this.__gl),l=I.compileForTarget("GLProbe",t.shaderopts),C=og(this.__gl,l.attrs,g.__quadattrbuffers,g.__quadIndexBuffer),n=g.createFramebuffer();g.bindFramebuffer(g.DRAW_FRAMEBUFFER,n),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,this.brdfLUTTexture,0),I.bind(t),C.bind(t),g.clear(g.COLOR_BUFFER_BIT|g.DEPTH_BUFFER_BIT),g.viewport(0,0,512,512),g.drawQuad(),g.bindFramebuffer(g.DRAW_FRAMEBUFFER,null),g.deleteFramebuffer(n),I.unbind(t),I.destroy();{const F=new Bs(this.__gl),a=F.compileForTarget("GLProbe",t.shaderopts),U=og(this.__gl,a.attrs,g.__quadattrbuffers,g.__quadIndexBuffer);F.bind(t,"GLProbe"),U.bind(t);const d=t.unifs;e.bindToUniform(t,d.envMap);const s=64;this.irradianceCubeTex=g.createTexture(),g.bindTexture(g.TEXTURE_CUBE_MAP,this.irradianceCubeTex),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MAG_FILTER,g.LINEAR),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MIN_FILTER,g.LINEAR_MIPMAP_LINEAR),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_WRAP_S,g.CLAMP_TO_EDGE),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_WRAP_T,g.CLAMP_TO_EDGE),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_WRAP_R,g.CLAMP_TO_EDGE);for(let A=0;A<6;A++)g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+A,0,g.RGBA32F,s,s,0,g.RGBA,g.FLOAT,null);const o=g.createFramebuffer();g.bindFramebuffer(g.DRAW_FRAMEBUFFER,o);for(let A=0;A<6;++A)g.uniform1i(d.faceId.location,A),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_CUBE_MAP_POSITIVE_X+A,this.irradianceCubeTex,0),g.viewport(0,0,s,s),g.clearColor(1,0,0,1),g.clear(g.COLOR_BUFFER_BIT|g.DEPTH_BUFFER_BIT),g.drawQuad();g.bindFramebuffer(g.DRAW_FRAMEBUFFER,null),g.deleteFramebuffer(o),g.generateMipmap(g.TEXTURE_CUBE_MAP)}{const F=new rs(this.__gl),a=F.compileForTarget("GLProbe",t.shaderopts),U=og(this.__gl,a.attrs,g.__quadattrbuffers,g.__quadIndexBuffer);F.bind(t,"GLProbe"),U.bind(t);const d=t.unifs;e.bindToUniform(t,d.envMap),this.specularCubetex=g.createTexture(),g.bindTexture(g.TEXTURE_CUBE_MAP,this.specularCubetex),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MAG_FILTER,g.LINEAR),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MIN_FILTER,g.LINEAR_MIPMAP_LINEAR),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_WRAP_S,g.CLAMP_TO_EDGE),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_WRAP_T,g.CLAMP_TO_EDGE),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_WRAP_R,g.CLAMP_TO_EDGE);const s=256;for(let A=0;A<6;A++)g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+A,0,g.RGBA32F,s,s,0,g.RGBA,g.FLOAT,null);g.generateMipmap(g.TEXTURE_CUBE_MAP);const o=5;for(let A=0;A<o;++A){const B=s*Math.pow(.5,A),Q=s*Math.pow(.5,A),r=g.createFramebuffer();g.bindFramebuffer(g.DRAW_FRAMEBUFFER,r),g.viewport(0,0,B,Q);const R=A/(o-1);g.uniform1f(d.roughness.location,R);for(let V=0;V<6;++V)g.uniform1i(d.faceId.location,V),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_CUBE_MAP_POSITIVE_X+V,this.specularCubetex,A),g.drawQuad();g.bindFramebuffer(g.DRAW_FRAMEBUFFER,null),g.deleteFramebuffer(r)}F.destroy()}this.__convolved=!0}bind(e){const g=this.__gl,{irradianceMap:t,prefilterMap:I,brdfLUT:l,envMapFlags:C}=e.unifs;if(!this.__convolved)return t&&g.uniform1i(t.location,this.maxFragmentShaderTextureUnits-1),I&&g.uniform1i(I.location,this.maxFragmentShaderTextureUnits-1),C&&g.uniform1i(C.location,-1),!1;if(l){const n=e.boundTextures++;g.activeTexture(this.__gl.TEXTURE0+n),g.bindTexture(g.TEXTURE_2D,this.brdfLUTTexture),g.uniform1i(l.location,n)}if(t){const n=e.boundTextures++,F=this.__gl.TEXTURE0+n;g.activeTexture(F),g.bindTexture(g.TEXTURE_CUBE_MAP,this.irradianceCubeTex),g.uniform1i(t.location,n)}if(I){const n=e.boundTextures++,F=this.__gl.TEXTURE0+n;g.activeTexture(F),g.bindTexture(g.TEXTURE_CUBE_MAP,this.specularCubetex),g.uniform1i(I.location,n)}return C&&g.uniform1i(C.location,0),!0}destroy(){}}var hs=`
precision highp float;
#define GLSLIFY 1

import 'GLSLUtils.glsl'
import 'gamma.glsl'
import 'constants.glsl'

uniform float focus;
uniform float exposure;

/* VS Outputs */
varying vec3 v_worldDir;
varying vec2 v_texCoord;

#define ENABLE_INLINE_GAMMACORRECTION

#define ENV_MAP_LATLONG 0
#define ENV_MAP_OCT 1
#define ENV_MAP_CUBE 2
#define ENV_MAP_irradianceMap 8
#define ENV_MAP_prefilterMap 3
#define ENV_MAP_STEREO_LATLONG 4
#define ENV_MAP_DUALFISHEYE 5
#define ENV_MAP_SH 6
#define ENV_MAP_BRDF_LUT 7

#define ENV_MAPTYPE ENV_MAP_OCT

#if (ENV_MAPTYPE == ENV_MAP_LATLONG)  

import 'envmap-equirect.glsl'

uniform sampler2D backgroundImage;

vec4 sampleEnvMap(vec3 dir) {
  vec2 uv = latLongUVsFromDir(normalize(dir));
  vec4 texel = texture2D(backgroundImage, uv) * exposure;
  return vec4(texel.rgb/texel.a, 1.0);
}

#elif (ENV_MAPTYPE == ENV_MAP_OCT)  

import 'envmap-octahedral.glsl'

uniform sampler2D   envMap;

vec4 sampleEnvMap(vec3 dir) {
  vec2 uv = dirToSphOctUv(normalize(dir));
  if (false) {
    vec4 texel = texture2D(envMap, uv);
    return vec4(texel.rgb/texel.a, 1.0);
  }
  else {
    return texture2D(envMap, uv) * exposure;
  }
}

#elif (ENV_MAPTYPE == ENV_MAP_CUBE)

uniform samplerCube cubeMap;

vec4 sampleEnvMap(vec3 dir) {
  return texture(cubeMap, dir, 0.0);// * exposure;
  // return textureLod(cubeMap, dir, exposure);
}

#elif (ENV_MAPTYPE == ENV_MAP_irradianceMap)

uniform samplerCube irradianceMap;

vec4 sampleEnvMap(vec3 dir) {
  return textureLod(irradianceMap, dir, exposure);
}

#elif (ENV_MAPTYPE == ENV_MAP_prefilterMap)

uniform samplerCube prefilterMap;

vec4 sampleEnvMap(vec3 dir) {
  return textureLod(prefilterMap, dir, exposure);
}

#elif (ENV_MAPTYPE == ENV_MAP_STEREO_LATLONG)  

import 'envmap-equirect.glsl'
uniform int eye;// L = 0, R = 1;
uniform sampler2D backgroundImage;

vec4 sampleEnvMap(vec3 dir) {
  vec2 uv = latLongUVsFromDir(normalize(v_worldDir));
  uv.y *= 0.5;
  if (eye == 1) {
    uv.y += 0.5;
  }
  vec4 texel = texture2D(backgroundImage, uv) * exposure;
  fragColor = vec4(texel.rgb/texel.a, 1.0);
}

#elif (ENV_MAPTYPE == ENV_MAP_DUALFISHEYE)

import 'envmap-dualfisheye.glsl'

vec4 sampleEnvMap(vec3 dir) {
  vec2 uv = dualfisheyeUVsFromDir(dir);
  return texture2D(backgroundImage, uv) * exposure;
}

#elif (ENV_MAPTYPE == ENV_MAP_SH)

import 'SHCoeffs.glsl'

vec4 sampleEnvMap(vec3 dir) {
	return vec4(sampleSHCoeffs(dir) * exposure, 1.0);
}

#elif (ENV_MAPTYPE == ENV_MAP_BRDF_LUT)

uniform sampler2D brdfLUT;

vec4 sampleEnvMap(vec3 dir) {
  return texture2D(brdfLUT, v_texCoord);
}
#endif

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  fragColor = sampleEnvMap(normalize(v_worldDir));

#ifdef ENABLE_INLINE_GAMMACORRECTION
  fragColor.rgb = toGamma(fragColor.rgb);
#endif

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,cs=`
precision highp float;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

import 'inverse.glsl'
import 'transpose.glsl'

/* VS Outputs */
varying vec3 v_worldDir;
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID() * 2.0;
  v_texCoord = position * 0.5 + 0.5;

  mat4 inverseProjection = inverse(projectionMatrix);
  mat3 inverseModelview = transpose(mat3(viewMatrix));

  // transform from the normalized device coordinates back to the view space
  vec3 unprojected = (inverseProjection * vec4(position, 0, 1)).xyz;

  // transfrom from the view space back to the world space
  // and use it as a sampling vector
  v_worldDir = inverseModelview * unprojected;

  gl_Position = vec4(position, 0, 1);
}
`;class ka extends Pe{constructor(e){super(e,"EnvMapShader");this.setShaderStage("VERTEX_SHADER",cs),this.setShaderStage("FRAGMENT_SHADER",hs)}}class Zs extends Rs{constructor(e,g){super(e.gl,"EnvMap");this.__srcGLTex=null,this.__envMapShader=null,this.__envMapShaderBinding=null,this.__renderer=e,this.__envMap=g,this.__backgroundFocus=0,this.__envMap.isLoaded()?this.init():this.__envMap.once("loaded",t=>{this.init()})}init(){const e=this.__renderer.gl;e.__quadVertexIdsBuffer||e.setupInstancedQuad(),this.__srcGLTex=new DI(e,this.__envMap),this.__envMapShader=new ka(e);const g=this.__envMapShader.compileForTarget("GLEnvMap",{directives:["#define ENABLE_ES3"]});this.__envMapShaderBinding=og(e,g.attrs,e.__quadattrbuffers,e.__quadIndexBuffer);const t=this.__envMap.headlightModeParam,I=()=>{t.value?this.textureDesc[3]|=1:this.textureDesc[3]&=-2};I(),t.on("valueChanged",()=>{I(),this.emit("updated")}),this.convolveProbe(this.__srcGLTex),this.emit("updated")}getEnvMap(){return this.__envMap}getBackgroundFocus(){return this.__backgroundFocus}setBackgroundFocus(e){this.__backgroundFocus=e,this.__renderer.requestRedraw()}draw(e){if(this.__envMap.isLoaded()){const g=this.__gl;{this.__envMapShader.bind(e,"GLEnvMap");const t=e.unifs,{envMap:I,focus:l,exposure:C}=e.unifs;I&&this.__srcGLTex.bindToUniform(e,I),l&&g.uniform1f(l.location,this.__backgroundFocus),C&&g.uniform1f(C.location,e.exposure),this.__envMapShaderBinding.bind(e),g.depthMask(!1),e.bindViewports(t,()=>{g.drawQuad()})}}}destroy(){super.destroy(),this.__srcGLTex&&this.__srcGLTex.destroy()}}function cl(i){var e=typeof i;return i!=null&&(e=="object"||e=="function")}var gl=typeof global!="undefined"?global:typeof self!="undefined"?self:typeof window!="undefined"?window:{},ms=typeof gl=="object"&&gl&&gl.Object===Object&&gl,Ws=ms,bs=typeof self=="object"&&self&&self.Object===Object&&self,Js=Ws||bs||Function("return this")(),fa=Js,Gs=function(){return fa.Date.now()},VC=Gs,us=/\s/;function Ss(i){for(var e=i.length;e--&&us.test(i.charAt(e)););return e}var Ns=/^\s+/;function ps(i){return i&&i.slice(0,Ss(i)+1).replace(Ns,"")}var ys=fa.Symbol,Zl=ys,Ea=Object.prototype,Xs=Ea.hasOwnProperty,ks=Ea.toString,CI=Zl?Zl.toStringTag:void 0;function fs(i){var e=Xs.call(i,CI),g=i[CI];try{i[CI]=void 0;var t=!0}catch{}var I=ks.call(i);return t&&(e?i[CI]=g:delete i[CI]),I}var Es=Object.prototype,Ts=Es.toString;function Ys(i){return Ts.call(i)}var vs="[object Null]",Ms="[object Undefined]",An=Zl?Zl.toStringTag:void 0;function Hs(i){return i==null?i===void 0?Ms:vs:An&&An in Object(i)?fs(i):Ys(i)}function xs(i){return i!=null&&typeof i=="object"}var ws="[object Symbol]";function Ds(i){return typeof i=="symbol"||xs(i)&&Hs(i)==ws}var Bn=0/0,Ks=/^[-+]0x[0-9a-f]+$/i,Ls=/^0b[01]+$/i,zs=/^0o[0-7]+$/i,_s=parseInt;function Qn(i){if(typeof i=="number")return i;if(Ds(i))return Bn;if(cl(i)){var e=typeof i.valueOf=="function"?i.valueOf():i;i=cl(e)?e+"":e}if(typeof i!="string")return i===0?i:+i;i=ps(i);var g=Ls.test(i);return g||zs.test(i)?_s(i.slice(2),g?2:8):Ks.test(i)?Bn:+i}var Os="Expected a function",Ps=Math.max,js=Math.min;function qs(i,e,g){var t,I,l,C,n,F,a=0,U=!1,d=!1,s=!0;if(typeof i!="function")throw new TypeError(Os);e=Qn(e)||0,cl(g)&&(U=!!g.leading,d="maxWait"in g,l=d?Ps(Qn(g.maxWait)||0,e):l,s="trailing"in g?!!g.trailing:s);function o(Z){var c=t,W=I;return t=I=void 0,a=Z,C=i.apply(W,c),C}function A(Z){return a=Z,n=setTimeout(r,e),U?o(Z):C}function B(Z){var c=Z-F,W=Z-a,u=e-c;return d?js(u,l-W):u}function Q(Z){var c=Z-F,W=Z-a;return F===void 0||c>=e||c<0||d&&W>=l}function r(){var Z=VC();if(Q(Z))return R(Z);n=setTimeout(r,B(Z))}function R(Z){return n=void 0,s&&t?o(Z):(t=I=void 0,C)}function V(){n!==void 0&&clearTimeout(n),a=0,t=F=I=n=void 0}function h(){return n===void 0?C:R(VC())}function m(){var Z=VC(),c=Q(Z);if(t=arguments,I=this,F=Z,c){if(n===void 0)return A(F);if(d)return clearTimeout(n),n=setTimeout(r,e),o(F)}return n===void 0&&(n=setTimeout(r,e)),C}return m.cancel=V,m.flush=h,m}var $s="Expected a function";function eo(i,e,g){var t=!0,I=!0;if(typeof i!="function")throw new TypeError($s);return cl(g)&&(t="leading"in g?!!g.leading:t,I="trailing"in g?!!g.trailing:I),qs(i,e,{leading:t,maxWait:e,trailing:I})}var go=`
precision highp float;
#define GLSLIFY 1

uniform sampler2D image;

varying vec2 v_texCoord;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif
  fragColor = texture2D(image, v_texCoord);

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,to=`
precision highp float;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

uniform vec2 pos;
uniform vec2 size;

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID();
  v_texCoord = position+0.5;
  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * abs(size) * 2.0), 0.0, 1.0);
  if (size.x < 0.0)
    v_texCoord.x = 1.0 - v_texCoord.x;
  if (size.y < 0.0)
    v_texCoord.y = 1.0 - v_texCoord.y;
}
`;class Io extends Pe{constructor(e){super(e,"ScreenQuadShader");this.setShaderStage("VERTEX_SHADER",to),this.setShaderStage("FRAGMENT_SHADER",go)}}class lo{constructor(e,g){this.__gl=e,this.__pos=[0,0],this.__size=[1,1],this.flipY=!0,this.__glshader=new Io(e),e.__quadVertexIdsBuffer||e.setupInstancedQuad();const t=this.__glshader.compileForTarget("GLScreenQuad",g);this.__quadBinding=og(this.__gl,t.attrs,e.__quadattrbuffers,e.__quadIndexBuffer),this.ready=!0}bind(e,g,t,I){const l=e.unifs;g&&g.bindToUniform(e,e.unifs.image);const C=this.__gl;{const n=l.pos;if(n){let F=t?t instanceof f?t.asArray():t:this.__pos;C.uniform2fv(n.location,F)}}{const n=l.size;if(n){let F=I?I instanceof f?I.asArray():I:this.__size;C.uniform2fv(n.location,F)}}this.__quadBinding.bind(e)}bindShader(e){return this.__glshader.bind(e,"GLScreenQuad")}draw(e,g,t,I){this.bind(e,g,t,I);const l=this.__gl;l.drawElements(l.TRIANGLES,6,l.UNSIGNED_SHORT,0)}}class Vi extends Va{constructor(e,g){super();this.genBufferOpts={},this.__indexBuffer=null,this.__gl=e,this.__geom=g,this.__glattrbuffers={},this.__shaderBindings={},this.buffersDirty=!0;const t=l=>{this.dirtyBuffers(l)};this.__geom.on("geomDataChanged",t);const I=l=>{this.clearBuffers(),this.dirtyBuffers(l)};this.__geom.on("geomDataTopologyChanged",I)}getGeom(){return this.__geom}dirtyBuffers(e){this.genBufferOpts=e,this.buffersDirty=!0,this.emit("updated")}genBuffers(e){}updateBuffers(e){this.genBuffers(e),this.buffersDirty=!1}bind(e){if(this.__destroyed)throw new Error("Error binding a destroyed geom");this.buffersDirty&&this.updateBuffers();let g=this.__shaderBindings[e.shaderkey];if(!g){const t=this.__gl;g=og(t,e.attrs,this.__glattrbuffers,this.__indexBuffer),this.__shaderBindings[e.shaderkey]=g}g.bind(e)}unbind(e){const g=this.__shaderBindings[e.shaderkey];g&&g.unbind(e)}draw(e){throw new Error("Not implemented. Implement this method in a derived class.")}drawInstanced(e,g){throw new Error("Not implemented. Implement this method in a derived class.")}bindAndDraw(e){this.bind(e),this.draw(e)}clearBuffers(){const e=this.__gl;for(const g in this.__glattrbuffers){const t=this.__glattrbuffers[g];t.shared||e.deleteBuffer(t.buffer)}this.__glattrbuffers={};for(const g in this.__shaderBindings)this.__shaderBindings[g].destroy();this.__shaderBindings={}}destroy(){this.__geom.deleteMetadata("glgeom"),this.clearBuffers(),this.__destroyed=!0,this.emit("destructing")}}class ql extends Vi{constructor(e,g){super(e,g);this.__numTriIndices=0,this.__indexDataType=0,this.__numVertices=0,this.__numTriangles=0,this.__numRenderVerts=0}genBuffers(){super.genBuffers();const e=this.__gl,g=this.__geom.genBuffers(),t=g.indices;this.__numTriIndices=g.indices.length,t instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),t instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),t instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT),this.__numVertices=this.__geom.getNumVertices(),this.__numTriangles=t.length/3,this.__numRenderVerts=g.numRenderVerts,this.__indexBuffer&&e.deleteBuffer(this.__indexBuffer),this.__indexBuffer=e.createBuffer(),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),e.bufferData(e.ELEMENT_ARRAY_BUFFER,g.indices,e.STATIC_DRAW);for(const I in g.attrBuffers){const l=g.attrBuffers[I];this.__glattrbuffers[I]&&this.__glattrbuffers[I].buffer&&e.deleteBuffer(this.__glattrbuffers[I].buffer);const C=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,C),e.bufferData(e.ARRAY_BUFFER,l.values,e.STATIC_DRAW),this.__glattrbuffers[I]={buffer:C,dataType:l.dataType,normalized:l.normalized},I=="textureCoords"&&(this.__glattrbuffers.texCoords=this.__glattrbuffers.textureCoords)}}updateBuffers(e){const g=this.__gl;if(this.__numVertices!=this.__geom.getNumVertices()){this.genBuffers();return}const t=this.__geom.genBuffers({includeIndices:!1});for(const I in t.attrBuffers){const l=t.attrBuffers[I],C=this.__glattrbuffers[I];g.bindBuffer(g.ARRAY_BUFFER,C.buffer),g.bufferData(g.ARRAY_BUFFER,l.values,g.STATIC_DRAW)}this.buffersDirty=!1}clearBuffers(){this.__gl.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null,super.clearBuffers()}draw(e){this.__gl.drawElements(this.__gl.TRIANGLES,this.__numTriIndices,this.__indexDataType,0)}drawInstanced(e,g){this.__gl.drawElementsInstanced(this.__gl.TRIANGLES,this.__numTriIndices,this.__indexDataType,0,g)}destroy(){super.destroy(),this.__gl.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null}}const lg={MSAA_RENDERBUFFER:0,COLORBUFFER:1,DEPTHBUFFER:2};class Ta extends xt{constructor(e){super();this.__fbo=null,this.offscreenBuffer=null,this.depthTexture=null,this.__backgroundTexture=null,this.__backgroundGLTexture=null,this.offscreenBufferFbo=null,this.__width=0,this.__height=0,this.__canvasWidth=0,this.__canvasHeight=0,this.fb=null,this.depthBuffer=null,this.EXT_frag_depth=null,this.depthRange=[0,0],this.backgroundColorParam=new Fg("BackgroundColor",new E("#eeeeee")),this.doubleClickTimeParam=new k("DoubleClickTimeMS",200),this.renderer=e,this.__renderer=e,this.addParameter(this.doubleClickTimeParam);const g=this.__renderer.gl;this.__gl=g,this.quad=new ql(g,new Dt(1,1)),g.name=="webgl2"&&(this.offscreenBuffer=new Te(g,{type:"UNSIGNED_BYTE",format:"RGBA",filter:"LINEAR",width:4,height:4}),this.depthTexture=new Te(g,{type:g.UNSIGNED_INT_24_8,format:g.DEPTH_STENCIL,internalFormat:g.name=="webgl2"?g.DEPTH24_STENCIL8:g.DEPTH_COMPONENT,filter:g.NEAREST,wrap:g.CLAMP_TO_EDGE,width:4,height:4})),this.highlightedGeomsBuffer=new Te(g,{type:"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:4,height:4}),this.highlightedGeomsBufferFbo=new Bi(g,this.highlightedGeomsBuffer,!0),this.highlightedGeomsBufferFbo.setClearColor(new E(0,0,0,0));const t=()=>{const I=this.backgroundColorParam.value;I instanceof ug?I instanceof ni?(this.__backgroundTexture=I,this.__backgroundGLTexture=new DI(g,I)):(this.__backgroundTexture=I,this.__backgroundGLTexture=new Te(g,I)):I instanceof E?(this.__backgroundGLTexture&&(this.__backgroundGLTexture.destroy(),this.__backgroundGLTexture=null,this.__backgroundTexture=null),this.offscreenBufferFbo&&this.offscreenBufferFbo.setClearColor(new E(I.asArray()))):console.warn("Invalid background:"+I),this.emit("updated")};t(),this.backgroundColorParam.on("valueChanged",t)}getRenderer(){return this.renderer}getWidth(){return this.__width}getHeight(){return this.__height}resize(e,g){if(this.__canvasWidth==e&&this.__canvasHeight==g)return;this.__canvasWidth=e,this.__canvasHeight=g,this.__width=e,this.__height=g,this.resizeRenderTargets(e,g);const t=new Hg(this.__width,this.__height);this.emit("resized",t)}resizeRenderTargets(e,g){const t=this.__renderer.gl;if(this.renderer.outlineThickness>0&&t.name=="webgl2"){this.fb&&(t.deleteFramebuffer(this.fb[lg.MSAA_RENDERBUFFER]),t.deleteFramebuffer(this.fb[lg.COLORBUFFER]),t.deleteFramebuffer(this.fb[lg.DEPTHBUFFER]),this.colorRenderbuffer&&t.deleteRenderbuffer(this.colorRenderbuffer),this.depthBuffer&&t.deleteRenderbuffer(this.depthBuffer)),this.offscreenBuffer.resize(e,g),this.depthTexture.resize(e,g),this.fb=[],this.fb[lg.MSAA_RENDERBUFFER]=t.createFramebuffer(),t.bindFramebuffer(t.FRAMEBUFFER,this.fb[lg.MSAA_RENDERBUFFER]),this.colorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,this.colorRenderbuffer),t.renderbufferStorageMultisample(t.RENDERBUFFER,4,t.RGBA8,e,g),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,this.colorRenderbuffer),this.depthBuffer=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,this.depthBuffer),t.renderbufferStorageMultisample(t.RENDERBUFFER,4,t.DEPTH24_STENCIL8,e,g),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.RENDERBUFFER,this.depthBuffer),this.fb[lg.COLORBUFFER]=t.createFramebuffer(),t.bindFramebuffer(t.FRAMEBUFFER,this.fb[lg.COLORBUFFER]),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,this.offscreenBuffer.glTex,0),t.bindFramebuffer(t.FRAMEBUFFER,null),this.fb[lg.DEPTHBUFFER]=t.createFramebuffer(),t.bindFramebuffer(t.FRAMEBUFFER,this.fb[lg.DEPTHBUFFER]),t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,this.depthTexture.glTex,0),t.bindFramebuffer(t.FRAMEBUFFER,null);const I=t.checkFramebufferStatus(t.name=="webgl2"?t.DRAW_FRAMEBUFFER:t.FRAMEBUFFER);if(I!==t.FRAMEBUFFER_COMPLETE)switch(I){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}this.highlightedGeomsBuffer&&this.highlightedGeomsBuffer.resize(e,g)}draw(e){const g=this.__renderer.gl,t=e.boundRendertarget;if(this.renderer.outlineThickness>0&&g.name=="webgl2"){this.fb||this.resizeRenderTargets(this.__width,this.__height);const l=this.fb[lg.MSAA_RENDERBUFFER];g.bindFramebuffer(g.name=="webgl2"?g.DRAW_FRAMEBUFFER:g.FRAMEBUFFER,l),e.boundRendertarget=l}else e.boundRendertarget||g.bindFramebuffer(g.FRAMEBUFFER,null);g.viewport(0,0,this.__width,this.__height);const I=this.backgroundColorParam.value.asArray();if(g.clearColor(I[0],I[1],I[2],I[3]),g.colorMask(!0,!0,!0,!1),g.clear(g.COLOR_BUFFER_BIT|g.DEPTH_BUFFER_BIT),g.enable(g.DEPTH_TEST),this.__renderer.drawScene(e),this.drawHighlights(e),this.fb&&g.name=="webgl2"){const l=g;l.bindFramebuffer(l.READ_FRAMEBUFFER,this.fb[lg.MSAA_RENDERBUFFER]),l.bindFramebuffer(l.DRAW_FRAMEBUFFER,this.fb[lg.COLORBUFFER]),l.clearBufferfv(l.COLOR,0,[0,0,0,0]),l.blitFramebuffer(0,0,this.__width,this.__height,0,0,this.__width,this.__height,l.COLOR_BUFFER_BIT,l.LINEAR),g.bindFramebuffer(g.DRAW_FRAMEBUFFER,t),e.boundRendertarget=t,g.viewport(0,0,this.__width,this.__height),g.disable(g.DEPTH_TEST);const C=this.__renderer.screenQuad;C.bindShader(e),C.draw(e,this.offscreenBuffer)}this.renderer.emit("redrawOccurred")}drawSilhouettes(e){const g=this.__renderer.gl;if(this.renderer.outlineThickness==0||g.name!="webgl2"||!this.fb)return;const t=g;if(t.bindFramebuffer(t.READ_FRAMEBUFFER,this.fb[lg.MSAA_RENDERBUFFER]),t.bindFramebuffer(t.DRAW_FRAMEBUFFER,this.fb[lg.DEPTHBUFFER]),t.clearBufferfv(t.COLOR,0,[1,1,1,1]),t.blitFramebuffer(0,0,this.__width,this.__height,0,0,this.__width,this.__height,t.DEPTH_BUFFER_BIT,t.NEAREST),t.bindFramebuffer(t.DRAW_FRAMEBUFFER,this.fb[lg.MSAA_RENDERBUFFER]),e.boundRendertarget=this.fb[lg.MSAA_RENDERBUFFER],t.viewport(0,0,this.__width,this.__height),this.renderer.outlineThickness==0)return;t.enable(t.BLEND),t.blendEquation(t.FUNC_ADD),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),t.disable(t.DEPTH_TEST),t.depthMask(!1),this.renderer.silhouetteShader.bind(e);const I=e.unifs;this.depthTexture.bindToUniform(e,I.depthTexture),t.uniform2f(I.screenSize.location,this.__width,this.__height),t.uniform1f(I.outlineThickness.location,this.renderer.outlineThickness);const l=this.renderer.outlineColor.asArray();t.uniform4f(I.outlineColor.location,l[0],l[1],l[2],l[3]),t.uniform1f(I.outlineSensitivity.location,this.renderer.outlineSensitivity),t.uniform1f(I.outlineDepthBias.location,this.renderer.outlineDepthBias),t.uniform2f(I.depthRange.location,this.depthRange[0],this.depthRange[1]),this.quad.bindAndDraw(e),t.enable(t.DEPTH_TEST),t.depthMask(!0)}drawHighlights(e){if(this.highlightedGeomsBufferFbo){const g=this.__renderer.gl;this.highlightedGeomsBufferFbo.bindForWriting(e),this.highlightedGeomsBufferFbo.clear(),g.disable(g.CULL_FACE),g.disable(g.BLEND),g.enable(g.DEPTH_TEST),g.depthFunc(g.LESS),g.depthMask(!0),e.glShader=null,this.__renderer.drawHighlightedGeoms(e),this.highlightedGeomsBufferFbo.unbindForWriting(e),g.viewport(0,0,this.__width,this.__height);{this.renderer.highlightsShader.bind(e),g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA);const t=e.unifs;g.uniform1f(t.outlineThickness.location,this.renderer.highlightOutlineThickness),this.highlightedGeomsBuffer.bindToUniform(e,t.highlightDataTexture),g.uniform2f(t.highlightDataTextureSize.location,e.region[2],e.region[3]),this.quad.bindAndDraw(e),g.disable(g.BLEND)}g.enable(g.CULL_FACE)}}getManipulator(){return this.manipulator}setManipulator(e){this.manipulator!=e&&(this.manipulator&&this.manipulator.deactivateTool&&this.manipulator.deactivateTool(),this.manipulator=e,this.manipulator.activateTool&&this.manipulator.activateTool())}onPointerDown(e){console.warn("@GLBaseViewport#onPointerDown - Implement me!")}onPointerUp(e){console.warn("@GLBaseViewport#onPointerUp - Implement me!")}onPointerMove(e){console.warn("@GLBaseViewport#onPointerMove - Implement me!")}onPointerEnter(e){console.warn("@GLBaseViewport#onPointerEnter - Implement me!")}onPointerLeave(e){console.warn("@GLBaseViewport#onPointerLeave - Implement me!")}onMouseLeave(e){}onKeyDown(e){}onKeyUp(e){}}class Co extends Ta{constructor(e,g,t,I){super(e);this.__geomDataBufferSizeFactor=1,this.debugGeomDataBuffer=!1,this.debugOcclusionBuffer=!1,this.debugReductionBuffer=!1,this.debugHighlightedGeomsBuffer=!1,this.__x=0,this.__y=0,this.region=[0,0,0,0],this.__cameraXfo=new v,this.__cameraMat=new Ee,this.__viewMat=new Ee,this.__geomDataBufferInvalid=!0,this.__screenPos=null,this.__name=g,this.__projectionMatrix=new Ee,this.__frustumDim=new f,this.__bl=new f(0,0),this.__tr=new f(1,1),this.__prevDownTime=0;const l=this.__renderer.gl;this.__geomDataBuffer=new Te(l,{type:e.floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:t<=1?1:Math.floor(t/this.__geomDataBufferSizeFactor),height:I<=1?1:Math.floor(I/this.__geomDataBufferSizeFactor)}),this.__geomDataBufferFbo=new Bi(l,this.__geomDataBuffer,!0),this.__geomDataBufferFbo.setClearColor(new E(0,0,0,0)),this.__camera=new Ja("DefaultCamera"),this.setCamera(this.__camera),this.setManipulator(new Jd({renderer:e})),this.resize(t,I)}getBl(){return this.__bl}setBl(e){this.__bl.x=e,this.__bl.y=e,this.resize(this.__canvasWidth,this.__canvasHeight)}getTr(){return this.__tr}setTr(e){this.__tr.x=e,this.__tr.y=e,this.resize(this.__canvasWidth,this.__canvasHeight)}getPosX(){return this.__x}getPosY(){return this.__y}resize(e,g){if(this.__canvasWidth==e&&this.__canvasHeight==g)return;this.__canvasWidth=e,this.__canvasHeight=g,this.__x=e*this.__bl.x,this.__y=e*this.__bl.y,this.__width=e*this.__tr.x-e*this.__bl.x,this.__height=g*this.__tr.y-g*this.__bl.y,this.region=[this.__x,this.__y,this.__width,this.__height],this.__camera&&this.__updateProjectionMatrix(),this.resizeRenderTargets(this.__width,this.__height);const t=new Hg(this.__width,this.__height);this.emit("resized",t)}resizeRenderTargets(e,g){super.resizeRenderTargets(e,g),this.__geomDataBufferFbo&&(this.__geomDataBuffer.resize(Math.floor(this.__width/this.__geomDataBufferSizeFactor),Math.floor(this.__height/this.__geomDataBufferSizeFactor)),this.renderGeomDataFbo())}getCamera(){return this.__camera}setCamera(e){this.__camera=e,this.depthRange=[this.__camera.getNear(),this.__camera.getFar()];const g=e.globalXfoParam,t=()=>{this.__cameraXfo=g.value,this.__cameraMat=this.__cameraXfo.toMat4(),this.__viewMat=this.__cameraMat.inverse()};t(),g.on("valueChanged",()=>{t(),this.invalidateGeomDataBuffer(),this.emit("updated");const I=new zC("CameraAndPointer",this.__cameraXfo);this.emit("viewChanged",I)}),this.__camera.on("projectionParamChanged",()=>{this.__updateProjectionMatrix(),this.depthRange=[this.__camera.getNear(),this.__camera.getFar()],this.emit("updated")}),this.__updateProjectionMatrix()}__updateProjectionMatrix(){const e=this.__width/this.__height;this.__camera.updateProjectionMatrix(this.__projectionMatrix,e);const g=Math.tan(this.__camera.getFov()/2)*this.__camera.getNear()*2,t=g*e;this.__frustumDim.set(t,g)}getProjectionMatrix(){return this.__projectionMatrix}getViewMatrix(){return this.__viewMat}frameView(e){this.__width>0&&this.__height>0?this.__camera.frameView(this,e):this.once("resized",()=>this.frameView())}calcScreenPosFromWorldPos(e){const t=this.__projectionMatrix.multiply(this.__viewMat).transformVec4(new Be(e.x,e.y,e.z,1));return t.x/=t.w,t.y/=t.w,new f((t.x*.5+.5)*this.__width,(t.y*-.5+.5)*this.__height)}calcRayFromScreenPos(e){const g=this.__canvasHeight*(1-this.__tr.y);let t=(e.x-this.__x)/this.__width,I=(e.y-g)/this.__height;t=t*2-1,I=I*2-1;const l=this.__cameraMat,C=this.__projectionMatrix.inverse();if(C==null)return console.warn(`Unable to generate Ray from screen pos:${e.toString()} in region ${this.region}`),new Ag;let n,F;if(this.__camera.isOrthographic()){const a=C.transformVec3(new b(t,-I,-1));a.z=0,n=l.transformVec3(a),F=new b(0,0,-1)}else n=l.translation,F=C.transformVec3(new b(t,-I,-1));return F=l.rotateVec3(F).normalize(),new Ag(n,F)}renderGeomDataFbo(){if(this.__geomDataBufferFbo){const e={};this.initRenderState(e),e.geomDataFbo=this.__geomDataBufferFbo,this.__geomDataBufferFbo.bindAndClear(e),this.__renderer.drawSceneGeomData(e),this.__geomDataBufferInvalid=!1,this.__geomDataBufferFbo.unbind()}}invalidateGeomDataBuffer(){this.__geomDataBufferInvalid=!0}getGeomDataAtPos(e,g){if(this.__geomDataBufferFbo){if(this.__geomDataBufferInvalid&&(this.renderGeomDataFbo(),this.__screenPos=null),e===this.__screenPos)return this.__intersectionData;this.__screenPos=e,this.__intersectionData=null;const t=this.__renderer.gl;t.finish(),this.__geomDataBufferFbo.bindForReading();const I=this.__geomDataBufferFbo.width,l=this.__geomDataBufferFbo.height,C=Math.floor(e.x*(I/this.__width)),n=Math.floor(e.y*(l/this.__height));let F,a;if(this.__renderer.floatGeomBuffer){if(a=new Float32Array(4),t.readPixels(C,l-n-1,1,1,t.RGBA,t.FLOAT,a),a[3]==0)return null;F=Math.round(a[0])&64-1}else{if(a=new Uint8Array(4),t.readPixels(C,l-n-1,1,1,t.RGBA,t.UNSIGNED_BYTE,a),t.bindFramebuffer(t.FRAMEBUFFER,null),a[0]==0&&a[1]==0)return;F=Math.floor(a[1]/32)}this.__geomDataBufferFbo.unbind();const U=this.__renderer.getPass(F);if(!U)return console.warn("Geom data buffer returns invalid pass id:",F),null;const d=U.getGeomItemAndDist(a);if(d){if(!d.geomItem.isSelectable())return null;g||(g=this.calcRayFromScreenPos(e));const s=g.start.add(g.dir.scale(d.dist));this.__intersectionData=new tU(e,g,s,a,d)}return this.__intersectionData}return null}getGeomItemsInRect(e,g){var t;if(this.__geomDataBufferFbo){const I=this.__renderer.gl;I.finish();const l=this.__geomDataBufferFbo.width,C=this.__geomDataBufferFbo.height,n=l/this.__width,F=C/this.__height,a=Math.round(e.x*n),U=Math.round(e.y*F),d=Math.round(g.x*n),s=Math.round(g.y*F),o=Math.round(C-s),A=Math.round(a),B=Math.round(d-a),Q=Math.round(s-U),r=B*Q;this.__geomDataBufferFbo.bindForReading();let R;this.__renderer.floatGeomBuffer?(R=new Float32Array(4*r),I.readPixels(A,o,B,Q,I.RGBA,I.FLOAT,R)):(R=new Uint8Array(4*r),I.readPixels(A,o,B,Q,I.RGBA,I.UNSIGNED_BYTE,R)),I.bindFramebuffer(I.FRAMEBUFFER,null);const V=new Set;for(let h=0;h<r;h++){let m;const Z=R.subarray(h*4,(h+1)*4);if(this.__renderer.floatGeomBuffer){if(Z[3]==0)continue;m=Math.round(Z[0])}else{if(Z[0]==0&&Z[1]==0)continue;m=Math.floor(Z[1]/64)}const c=(t=this.__renderer.getPass(m))===null||t===void 0?void 0:t.getGeomItemAndDist(Z);if(c){if(!c.geomItem.isSelectable())continue;V.add(c.geomItem)}}return V}return new Set}__getPointerPos(e,g){return new f(e-this.getPosX(),g-this.getPosY())}prepareUIEvent(e){e.viewport=this}onPointerDown(e){if(this.prepareUIEvent(e),e.pointerType===ve.mouse){const t=e;t.pointerPos=this.__getPointerPos(t.rendererX,t.rendererY),t.pointerRay=this.calcRayFromScreenPos(t.pointerPos),t.intersectionData=this.getGeomDataAtPos(t.pointerPos,t.pointerRay)}else if(e.pointerType===ve.touch){const t=e;if(t.touches.length==1){const I=t.touches[0];t.pointerPos=this.__getPointerPos(I.rendererX,I.rendererY),t.pointerRay=this.calcRayFromScreenPos(t.pointerPos),t.intersectionData=this.getGeomDataAtPos(t.pointerPos,t.pointerRay)}}const g=Date.now();if(g-this.__prevDownTime<this.doubleClickTimeParam.value){if(this.manipulator&&(this.manipulator.onPointerDoublePress(e),!e.propagating)||(this.emit("pointerDoublePressed",e),!e.propagating))return}else this.__prevDownTime=g;e.getCapture()&&(e.getCapture().onPointerDown(e),!e.propagating)||e.intersectionData!=null&&(e.intersectionData.geomItem.onPointerDown(e),!e.propagating)||(this.emit("pointerDown",e),!!e.propagating&&this.manipulator&&(this.manipulator.onPointerDown(e),e.propagating))}onPointerUp(e){if(this.prepareUIEvent(e),e.pointerType===ve.mouse){const g=e;g.pointerPos=this.__getPointerPos(g.rendererX,g.rendererY),g.pointerRay=this.calcRayFromScreenPos(g.pointerPos),g.intersectionData=this.getGeomDataAtPos(g.pointerPos,g.pointerRay)}else if(e.pointerType===ve.touch){const g=e;if(g.touches.length==0&&g.changedTouches.length==1){const t=g.changedTouches[0];g.pointerPos=this.__getPointerPos(t.rendererX,t.rendererY),g.pointerRay=this.calcRayFromScreenPos(g.pointerPos),g.intersectionData=this.getGeomDataAtPos(g.pointerPos,g.pointerRay)}}e.getCapture()&&(e.getCapture().onPointerUp(e),!e.propagating)||e.intersectionData!=null&&(e.intersectionData.geomItem.onPointerUp(e),!e.propagating)||(this.emit("pointerUp",e),!!e.propagating&&this.manipulator&&(this.manipulator.onPointerUp(e),e.propagating))}onPointerMove(e){if(this.prepareUIEvent(e),e.pointerType===ve.mouse){const g=e,t=this.__getPointerPos(g.rendererX,g.rendererY);g.pointerPos=t,g.pointerRay=this.calcRayFromScreenPos(t)}else if(e.pointerType===ve.touch){const g=e;for(let t=0;t<g.touches.length;t++){const I=g.touches[t];I.touchPos=this.__getPointerPos(I.rendererX,I.rendererY),I.touchRay=this.calcRayFromScreenPos(I.touchPos)}g.pointerPos=g.touches[0].touchPos,g.pointerRay=g.touches[0].touchRay}if(!(e.getCapture()&&(e.getCapture().onPointerMove(e),!e.propagating))){if(e.intersectionData=this.getGeomDataAtPos(e.pointerPos,e.pointerRay),e.intersectionData){if(e.intersectionData.geomItem!=this.pointerOverItem){if(this.pointerOverItem&&(e.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(e),e.propagating&&this.emit("pointerLeaveGeom",e)),e.propagating=!0,this.pointerOverItem=e.intersectionData.geomItem,this.pointerOverItem.onPointerEnter(e),!e.propagating)return;this.emit("pointerOverGeom",e)}if(e.propagating=!0,e.intersectionData.geomItem.onPointerMove(e),!e.propagating)return}else if(this.pointerOverItem){if(e.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(e),this.pointerOverItem=null,!e.propagating)return;this.emit("pointerLeaveGeom",e)}this.emit("pointerMove",e),!!e.propagating&&this.manipulator&&(this.manipulator.onPointerMove(e),e.propagating)}}onPointerEnter(e){this.prepareUIEvent(e),this.emit("pointerEnter",e),!!e.propagating&&this.manipulator&&this.manipulator.onPointerEnter&&(this.manipulator.onPointerEnter(e),e.propagating)}onPointerLeave(e){this.prepareUIEvent(e),this.emit("pointerLeave",e),!!e.propagating&&this.manipulator&&this.manipulator.onPointerLeave&&(this.manipulator.onPointerLeave(e),e.propagating)}onKeyDown(e){this.prepareUIEvent(e),!(this.manipulator&&(this.manipulator.onKeyDown(e),!e.propagating))&&this.emit("keyDown",e)}onKeyUp(e){this.prepareUIEvent(e),!(this.manipulator&&(this.manipulator.onKeyUp(e),!e.propagating))&&this.emit("keyUp",e)}onWheel(e){if(this.prepareUIEvent(e),e.pointerPos=this.__getPointerPos(e.rendererX,e.rendererY),e.pointerRay=this.calcRayFromScreenPos(e.pointerPos),e.intersectionData=this.getGeomDataAtPos(e.pointerPos,e.pointerRay),!(e.intersectionData!=null&&(e.intersectionData.geomItem.onWheel(e),!e.propagating))){if(this.manipulator){this.manipulator.onWheel(e);return}this.emit("mouseWheel",e)}}onTouchCancel(e){this.prepareUIEvent(e),!(e.getCapture()&&(e.getCapture().onTouchCancel(e),!e.propagating))&&(this.manipulator&&(this.manipulator.onTouchCancel(e),!e.propagating)||this.emit("touchCancel",e))}initRenderState(e){e.viewXfo=this.__cameraXfo,e.viewScale=1,e.region=this.region,e.cameraMatrix=this.__cameraMat,e.viewport=this,e.viewports=[{region:this.region,viewMatrix:this.__viewMat,projectionMatrix:this.__projectionMatrix,viewportFrustumSize:this.__frustumDim,isOrthographic:this.__camera.isOrthographic(),fovY:this.__camera.getFov()}]}draw(){const e={};if(this.initRenderState(e),super.draw(e),this.debugGeomDataBuffer){this.renderGeomDataFbo();const g={},t=this.__renderer.screenQuad;t.bindShader(g),t.draw(g,this.__geomDataBuffer,new f(0,0),new f(1,1))}if(this.debugHighlightedGeomsBuffer){const g={},t=this.__renderer.screenQuad;t.bindShader(g);const I=this.__renderer.gl;I.enable(I.BLEND),I.blendEquation(I.FUNC_ADD),I.blendFunc(I.SRC_ALPHA,I.ONE_MINUS_SRC_ALPHA),t.draw(g,this.highlightedGeomsBuffer,new f(0,0),new f(1,1)),I.disable(I.BLEND)}if(this.debugOcclusionBuffer){const g=this.__renderer.glGeomItemLibrary.occlusionDataBuffer,t=this.__renderer.screenQuad;t.bindShader(e);const I=e.unifs.image;g.bindColorTexture(e,I);const l=this.__renderer.gl;l.enable(l.BLEND),l.blendEquation(l.FUNC_ADD),l.blendFunc(l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA),t.draw(e,null,new f(0,0),new f(1,1)),l.disable(l.BLEND)}if(this.debugReductionBuffer){const g=this.__renderer.glGeomItemLibrary.reductionDataBuffer,t=this.__renderer.screenQuad;t.bindShader(e);const I=e.unifs.image;g.bindColorTexture(e,I);const l=this.__renderer.gl;l.enable(l.BLEND),l.blendEquation(l.FUNC_ADD),l.blendFunc(l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA),t.draw(e,null,new f(0,0),new f(1,1)),l.disable(l.BLEND)}}}class io{constructor(e,g){this.__xrvp=e,this.__treeItem=new H("XRHead"),g.addChild(this.__treeItem),this.__mat4=new Ee,this.__localXfo=new v}setVisible(e){if(e&&!this.hmdGeomItem){const g=this.__xrvp.getAsset();if(!g)return;const t=g.getChildByName("HMD");if(!t)return;this.hmdGeomItem=t.clone({assetItem:g}),this.hmdGeomItem&&(this.hmdGeomItem.localXfoParam.value=new v(new b(0,-.035,-.03),new de(0,1,0,Math.PI),new b(.001,.001,.001)),this.__treeItem.addChild(this.hmdGeomItem,!1))}this.hmdGeomItem&&(this.hmdGeomItem.visibleParam.value=e)}update(e){this.__mat4.setDataArray(e.transform.matrix),this.__localXfo.setFromMat4(this.__mat4),this.__treeItem.localXfoParam.value=this.__localXfo}getTreeItem(){return this.__treeItem}getXfo(){return this.__localXfo}}class no extends Xe{constructor(e,g,t){super();if(this.pressedButtons=[],this.raycastTick=5,this.raycastArea=.005,this.raycastDist=.04,this.pointerRay=new Ag,this.raycastAreaCache=0,this.raycastDistCache=0,this.rayCastRenderTargetProjMatrix=new Ee,this.capturedItem=null,this.xrvp=e,this.inputSource=g,this.id=t,this.buttonPressed=!1,this.inputSource.gamepad.buttons.forEach((I,l)=>{l!=0&&(this.pressedButtons[l]=I.pressed)}),this.mat4=new Ee,this.xfo=new v,this.treeItem=new H("XRController:"+g.handedness+t),!_e.isMobileDevice){this.tipItem=new H("Tip");const I=new v;if(I.tr.set(0,-.05,-.13),this.tipItem.localXfoParam.value=I,this.treeItem.addChild(this.tipItem,!1),e.getTreeItem().addChild(this.treeItem),g.targetRayMode=="tracked-pointer"){switch(g.profiles[0]){case"htc-vive":localStorage.setItem("ZeaEngine_XRDevice","Vive");break;case"oculus-touch":case"oculus-touch-v2":case"oculus-touch-v3":localStorage.setItem("ZeaEngine_XRDevice","Oculus");break}e.loadHMDResources().then(l=>{if(!l)return;const C=new v;C.ori.setFromAxisAndAngle(new b(0,1,0),Math.PI),C.sc.set(.001,.001,.001);let n;if(g.profiles[0]=="htc-vive")n=l.getChildByName("Controller"),C.tr.set(0,-.035,-.085);else switch(g.handedness){case"left":n=l.getChildByName("LeftController"),C.tr.set(0,-.035,-.085),C.sc.scaleInPlace(.85);break;case"right":n=l.getChildByName("RightController"),C.tr.set(0,-.035,-.085),C.sc.scaleInPlace(.85);break;case"none":case"left-right":case"left-right-none":n=l.getChildByName("Controller");break}if(n){const F=n.clone({assetItem:l});F.localXfoParam.value=C,this.treeItem.addChild(F,!1)}})}}this.tick=0}getHandedness(){return this.inputSource.handedness}getId(){return this.id}getTreeItem(){return this.treeItem}getTipItem(){return this.tipItem}getTipXfo(){return this.tipItem.globalXfoParam.value}getTouchPadValue(){return this.touchpadValue}isButtonPressed(){return this.buttonPressed}getControllerStageLocalXfo(){return this.xfo}getControllerTipStageLocalXfo(){return this.xfo.multiply(this.tipItem.localXfoParam.value)}updatePose(e,g,t){const I=g.getPose(t.gripSpace,e);if(!(!I||!I.transform)){if(this.mat4.setDataArray(I.transform.matrix),this.xfo.setFromMat4(this.mat4),this.treeItem.localXfoParam.value=this.xfo,this.hitTested=!1,this.raycastDist>0&&this.raycastTick>0&&this.tick%this.raycastTick==0){const l=this.getGeomItemAtTip();if(l!=null){const C=new it(this.xrvp,this,0,this.buttonPressed?1:0);C.intersectionData=l,C.pointerRay=this.pointerRay,l.geomItem!=this.pointerOverItem&&(this.pointerOverItem&&(C.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(C),C.propagating&&this.xrvp.emit("pointerLeaveGeom",C)),C.propagating=!0,this.pointerOverItem=l.geomItem,this.pointerOverItem.onPointerEnter(C),C.propagating&&this.xrvp.emit("pointerOverGeom",C)),l.geomItem.onPointerMove(C)}else if(this.pointerOverItem){const C=new it(this.xrvp,this,0,this.buttonPressed?1:0);C.pointerRay=this.pointerRay,C.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(C),this.pointerOverItem=null}}this.inputSource.gamepad.buttons.forEach((l,C)=>{if(C!=0){if(l.pressed&&!this.pressedButtons[C]){this.pressedButtons[C]=!0;const n=new it(this.xrvp,this,C,1);n.intersectionData=this.getGeomItemAtTip(),n.pointerRay=this.pointerRay,this.emit("buttonPressed",n)}else if(!l.pressed&&this.pressedButtons[C]){this.pressedButtons[C]=!1;const n=new it(this.xrvp,this,C,0);this.emit("buttonReleased",n)}}}),this.tick++}}getGeomItemAtTip(){if(this.hitTested)return this.intersectionData;if(this.hitTested=!0,this.raycastDist==0)return null;const e=this.xrvp.getRenderer(),g=this.tipItem.globalXfoParam.value.clone();g.sc.set(1,1,1),this.pointerRay.start=g.tr,this.pointerRay.dir=g.ori.getZaxis().negate();const t=this.raycastDist*this.xrvp.stageScale,I=this.raycastArea*this.xrvp.stageScale;return(t!=this.raycastDistCache||I!=this.raycastAreaCache)&&(this.rayCastRenderTargetProjMatrix.setOrthographicMatrix(I*-.5,I*.5,I*-.5,I*.5,0,t),this.raycastDistCache=t,this.raycastAreaCache=I),this.intersectionData=e.raycastWithProjection(g,this.rayCastRenderTargetProjMatrix,this.pointerRay),this.intersectionData}}class ao extends Na{constructor(e){super();this.listenerIDs={},this.__controllerTriggersHeld=[],this.xrvp=e,this.vrControllerToolTip=new Kt(.02*.75),this.vrControllerToolTipMat=new Ve("Cross","FlatSurfaceShader"),this.vrControllerToolTipMat.getParameter("BaseColor").value=new E("#03E3AC"),this.listenerIDs={}}addIconToController(e){const g=new ge("HandleToolTip",this.vrControllerToolTip,this.vrControllerToolTipMat);g.setSelectable(!1),e.getTipItem().removeAllChildren(),e.getTipItem().addChild(g,!1)}activateTool(){super.activateTool();for(const e of this.xrvp.getControllers())this.addIconToController(e);this.listenerIDs.controllerAdded=this.xrvp.on("controllerAdded",e=>{this.addIconToController(e.controller)})}deactivateTool(){super.deactivateTool();for(const e of this.xrvp.getControllers())e.getTipItem().removeAllChildren();this.xrvp.removeListenerById("controllerAdded",this.listenerIDs.controllerAdded)}__initMoveStage(){if(this.__controllerTriggersHeld.length==1)this.__grabPos=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr.clone(),this.stageXfo__GrabStart=this.xrvp.getXfo().clone(),this.__invOri=this.stageXfo__GrabStart.ori.inverse();else if(this.__controllerTriggersHeld.length==2){const e=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,g=this.__controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr;this.__grabDir=g.subtract(e),this.__grabPos=e.lerp(g,.5),this.__grabDir.y=0,this.__grabDist=this.__grabDir.length(),this.__grabDir.scaleInPlace(1/this.__grabDist),this.stageXfo__GrabStart=this.xrvp.getXfo().clone(),this.__grab_to_stage=this.__grabPos.subtract(this.stageXfo__GrabStart.tr)}}onVRControllerButtonDown(e){if(e.button!=0)return;this.__controllerTriggersHeld.indexOf(e.controller)==-1&&(this.__controllerTriggersHeld.push(e.controller),this.__initMoveStage(),e.stopPropagation())}onVRControllerButtonUp(e){if(e.button!=0)return;const g=this.__controllerTriggersHeld.indexOf(e.controller);g!=-1&&(this.__controllerTriggersHeld.splice(g,1),this.__initMoveStage(),e.stopPropagation())}onVRControllerDoubleClicked(e){console.log("onVRControllerDoubleClicked:",this.__controllerTriggersHeld.length);const g=this.xrvp.getXfo().clone();g.sc.set(1,1,1),this.xrvp.setXfo(g)}onVRPoseChanged(e){if(this.__controllerTriggersHeld.length==1){const g=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,t=new v;t.tr=this.__grabPos.subtract(g);const I=this.stageXfo__GrabStart.multiply(t);this.xrvp.setXfo(I)}else if(this.__controllerTriggersHeld.length==2){const g=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,t=this.__controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr,I=g.lerp(t,.5),l=t.subtract(g);l.y=0;const C=l.length();if(C<1e-4)return;l.scaleInPlace(1/C);const n=new v,F=Math.max(Math.min(this.__grabDist/C,10),.1);n.sc.set(F,F,F);let a=this.__grabDir.angleTo(l);this.__grabDir.cross(l).y>0&&(a=-a),n.ori.rotateY(a);const U=n.ori.rotateVec3(this.__grabPos);n.tr.addInPlace(this.__grabPos.subtract(U));const d=this.__grabPos.scale(1-F);n.tr.addInPlace(n.ori.rotateVec3(d));const s=this.__grabPos.subtract(I).scale(F);n.tr.addInPlace(n.ori.rotateVec3(s));const o=this.stageXfo__GrabStart.multiply(n);this.xrvp.setXfo(o)}}onPointerDown(e){e.pointerType===ve.xr&&this.onVRControllerButtonDown(e)}onPointerMove(e){e.pointerType===ve.xr&&this.onVRPoseChanged(e)}onPointerUp(e){e.pointerType===ve.xr&&this.onVRControllerButtonUp(e)}onPointerDoublePress(e){e.pointerType===ve.xr&&this.onVRControllerDoubleClicked(e)}}class Fo extends Ta{constructor(e){super(e);this.viewXfo=new v,this.stageXfo=new v,this.invStageMatrix=new Ee,this.session=null,this.hmd="",this.region=[],this.projectionMatrices=[],this.viewMatrices=[],this.cameraMatrices=[],this.doubleClickTimeParam.value=300,this.__projectionMatricesUpdated=!1,this.__stageTreeItem=new H("VRStage"),this.__stageTreeItem.setVisible(!1),this.__renderer.addTreeItem(this.__stageTreeItem),this.__xrhead=new io(this,this.__stageTreeItem),this.controllersMap={},this.controllers=[],this.controllerPointerDownTime=[],this.spectatorMode=!1,this.tick=0;const g=new v;g.ori.setFromAxisAndAngle(new b(1,0,0),Math.PI*.5),this.setXfo(g),this.setManipulator(new ao(this))}getRenderer(){return this.renderer}getAsset(){return this.__vrAsset}getTreeItem(){return this.__stageTreeItem}getVRHead(){return this.__xrhead}getXfo(){return this.stageXfo}setXfo(e){this.stageXfo=e,this.__stageTreeItem.globalXfoParam.value=e,this.invStageMatrix=e.inverse().toMat4(),this.stageScale=e.sc.x}getControllers(){return this.controllers}getHMDName(){return this.hmd}isPresenting(){return this.session!=null}setSpectatorMode(e){if(!e){const g=this.__renderer.gl;g.bindFramebuffer(g.FRAMEBUFFER,null),g.viewport(0,0,g.drawingBufferWidth,g.drawingBufferHeight);let t=this.backgroundColorParam.value.asArray();g.clearColor(t[0],t[1],t[2],t[3]),g.colorMask(!0,!0,!0,!0),g.clear(g.COLOR_BUFFER_BIT|g.DEPTH_BUFFER_BIT)}this.spectatorMode=e}__startSession(){const e=(g,t)=>{this.session&&(this.session.requestAnimationFrame(e),this.drawXRFrame(t))};this.session.requestAnimationFrame(e)}loadHMDResources(){if(_e.isMobileDevice)return Promise.resolve(null);let e=localStorage.getItem("ZeaEngine_XRDevice");if(e||(e="Oculus",localStorage.setItem("ZeaEngine_XRDevice",e)),this.hmd!=e)this.hmdAssetPromise=void 0;else if(this.hmdAssetPromise)return this.hmdAssetPromise;return this.hmd=e,this.hmdAssetPromise=new Promise((g,t)=>{{let I;switch(e){case"Vive":I="ZeaEngine/Vive.vla";break;case"Oculus":I="ZeaEngine/Oculus.vla";break;default:I="ZeaEngine/Vive.vla";break}if(!ee.commonResources[I]){const C=new Sa(I);C.load(ee.systemUrls[I]),ee.commonResources[I]=C}this.__vrAsset=ee.getCommonResource(I);const l=()=>{const C=this.__vrAsset.getMaterialLibrary(),n=C.getMaterialNames();for(const F of n){const a=C.getMaterial(F,!1);a&&a.setShaderName("SimpleSurfaceShader")}this.__vrAsset.traverse(F=>{F.setSelectable(!1)}),g(this.__vrAsset)};this.__vrAsset.isLoaded()?l():this.__vrAsset.once("loaded",l)}}),this.hmdAssetPromise}startPresenting(){return new Promise((e,g)=>{this.spectatorMode||this.setSpectatorMode(!1),(()=>{navigator.xr.requestSession("immersive-vr",{requiredFeatures:["local-floor"],optionalFeatures:["bounded-floor"]}).then(I=>{const l=this.__renderer.getViewport();if(l){const o=l.getCamera().globalXfoParam.value,A=new v;A.tr=o.tr.clone(),A.tr.z-=1.3;const B=o.ori.getZaxis();B.z=0,B.normalizeInPlace(),A.ori.setFromDirectionAndUpvector(B,new b(0,0,1)),this.setXfo(A)}I.addEventListener("end",s=>{this.__stageTreeItem.setVisible(!1),this.session=null,this.emit("presentingChanged",new YC(!1))});const C=s=>{const o=this.controllersMap[s.inputSource.handedness];o&&(o.buttonPressed=!0,this.onPointerDown(new it(this,o,0,1)))},n=s=>{const o=this.controllersMap[s.inputSource.handedness];o&&(o.buttonPressed=!1,this.onPointerUp(new it(this,o,0,0)))},F=s=>{console.log("creating controller:",s.handedness,s.profiles);const o=this.controllers.length,A=new no(this,s,o);this.controllersMap[s.handedness]=A,this.controllers[o]=A;const B=new IU(A);return this.emit("controllerAdded",B),A},a=s=>{for(const o of s.added)o.profiles.length!=0&&F(o)};I.addEventListener("selectstart",C),I.addEventListener("selectend",n),I.addEventListener("inputsourceschange",a),this.session=I;const U=new XRWebGLLayer(I,this.__gl);I.updateRenderState({baseLayer:U}),this.__width=U.framebufferWidth,this.__height=U.framebufferHeight,this.region=[0,0,this.__width,this.__height],this.depthRange=[I.renderState.depthNear,I.renderState.depthFar],this.resizeRenderTargets(this.__width,this.__height);const d=s=>{this.__refSpace=s,this.__stageTreeItem.setVisible(!0),this.emit("presentingChanged",new YC(!0)),this.loadHMDResources().then(()=>{this.__startSession(),e()})};I.requestReferenceSpace(_e.isMobileDevice?"local":"bounded-floor").catch(s=>{console.log("Falling back to local-floor reference space"),I.requestReferenceSpace("local-floor").then(d)}).then(s=>{d(s)}).catch(s=>{console.warn(s.message),g(new Error("Unable to start XR Session:"+s.message))})}).catch(I=>{console.warn(I.message)})})()})}stopPresenting(){!this.session||this.session.end()}togglePresenting(){this.session?this.stopPresenting():this.startPresenting()}updateControllers(e){const g=this.session.inputSources;for(let t=0;t<g.length;t++){const I=g[t];if(I.profiles.length==0)return;if(!this.controllers[t]){console.warn("Missing controller");continue}this.controllers[t].updatePose(this.__refSpace,e,I)}}initCullingRenderState(e){e.viewXfo=this.viewXfo,e.viewScale=1,e.region=this.region,e.cameraMatrix=e.viewXfo.toMat4(),e.viewport=this,e.viewports=[{region:this.region,viewMatrix:e.cameraMatrix.inverse(),isOrthographic:!1}]}drawXRFrame(e){const g=e.session,t=g.renderState.baseLayer,I=e.getViewerPose(this.__refSpace);if(!I)return;this.__xrhead.update(I);const l=this.__xrhead.getTreeItem().globalXfoParam.value;this.viewXfo=l;const C=I.views;if(!this.__projectionMatricesUpdated){this.projectionMatrices=[],this.viewMatrices=[],this.cameraMatrices=[];for(let s=0;s<C.length;s++){const o=C[s],A=new Ee;A.setDataArray(o.projectionMatrix),this.projectionMatrices[s]=A,this.viewMatrices[s]=new Ee,this.cameraMatrices[s]=new Ee}this.__projectionMatricesUpdated=!0}const n=this.__renderer.gl;n.bindFramebuffer(n.FRAMEBUFFER,t.framebuffer);let F=this.backgroundColorParam.value.asArray();n.clearColor(F[0],F[1],F[2],F[3]),n.colorMask(!0,!0,!0,!0),n.clear(n.COLOR_BUFFER_BIT|n.DEPTH_BUFFER_BIT),this.depthRange=[g.renderState.depthNear,g.renderState.depthFar];const a={};a.boundRendertarget=t.framebuffer,a.region=this.region,a.viewport=this,a.vrviewport=this,a.viewports=[];for(let s=0;s<C.length;s++){const o=C[s];this.viewMatrices[s].setDataArray(o.transform.inverse.matrix),this.viewMatrices[s].multiplyInPlace(this.invStageMatrix);const A=t.getViewport(o);a.viewports.push({viewMatrix:this.viewMatrices[s],projectionMatrix:this.projectionMatrices[s],region:[A.x,A.y,A.width,A.height],isOrthographic:!1})}a.viewXfo=l,a.viewScale=1/this.stageScale,a.cameraMatrix=a.viewXfo.toMat4(),a.region=this.region,a.vrPresenting=!0,this.draw(a);const U=new AU(this,l,this.controllers);this.updateControllers(e),U.getCapture()&&U.getCapture().onPointerMove(U),this.manipulator&&U.propagating&&this.manipulator.onPointerMove(U);const d=new oU(a.viewXfo);if(d.hmd=this.hmd,d.controllers=this.controllers,d.viewport=this,d.vrviewport=this,this.emit("viewChanged",d),this.spectatorMode&&!_e.isMobileDevice&&this.tick%5==0){const s=this.__renderer.getViewport();s&&(this.__xrhead.setVisible(!0),s.draw(),this.__xrhead.setVisible(!1))}this.tick++}onPointerDown(e){e.intersectionData=e.controller.getGeomItemAtTip(),e.pointerRay=e.controller.pointerRay;const g=Date.now();g-this.controllerPointerDownTime[e.controller.id]<this.doubleClickTimeParam.value&&(this.emit("pointerDoublePressed",e),!e.propagating||this.manipulator&&(this.manipulator.onPointerDoublePress(e),!e.propagating))||(this.controllerPointerDownTime[e.controller.id]=g,!(e.getCapture()&&(e.getCapture().onPointerDown(e),!e.propagating))&&(e.intersectionData!=null&&(e.intersectionData.geomItem.onPointerDown(e),!e.propagating)||(this.emit("pointerDown",e),!!e.propagating&&this.manipulator&&this.manipulator.onPointerDown(e))))}onPointerUp(e){this.controllerPointerDownTime[e.controller.id]=0,e.pointerRay=e.controller.pointerRay,!(e.getCapture()&&(e.getCapture().onPointerUp(e),!e.propagating))&&(e.intersectionData=e.controller.getGeomItemAtTip(),!(e.intersectionData!=null&&(e.intersectionData.geomItem.onPointerUp(e),!e.propagating))&&(this.emit("pointerUp",e),!!e.propagating&&this.manipulator&&(this.manipulator.onPointerUp(e),e.propagating)))}}class $l extends LC{constructor(e){super();this.dirty=!1,this.unif=e}bind(e){}unbind(e){}destroy(){}}class Uo extends $l{constructor(e,g,t,I,l){super(I);this.gltexture=null,this.textureType=-1;const C=t.getName();switch(this.param=t,this.unif=I,this.textureUnif=l[C+"Tex"],this.textureTypeUnif=l[C+"TexType"],this.uniform1i=e.uniform1i.bind(e),this.unif.type){case"Boolean":this.uniformXX=e.uniform1i.bind(e);break;case"UInt32":e.name=="webgl2"?this.uniformXX=e.uniform1ui.bind(e):this.uniformXX=e.uniform1i.bind(e);break;case"SInt32":this.uniformXX=e.uniform1i.bind(e);break;case"Float32":this.uniformXX=e.uniform1f.bind(e);break}this.bind=this.bindValue;const n=U=>{let d=Te.getCachedGLTexture2D(U);const s=1;d||(U.type==="FLOAT"?d=new DI(e,U):d=new Te(e,U),Te.setCachedGLTexture2D(U,d)),this.texBinding=d.preBind(this.textureUnif,l),d.on("updated",()=>{g.emit("updated")}),this.gltexture=d,this.gltexture.addRef(this),this.textureType=s,this.bind=this.bindTexture,g.emit("updated")};let F,a;if(this.update=()=>{try{F||(typeof t.value=="boolean"?this.val=t.value?1:0:this.val=t.value)}catch{}g.emit("updated")},t instanceof Oe){const U=s=>{s.isLoaded()?n(s):a=s.on("loaded",()=>{n(F)}),F=s},d=()=>{Te.getCachedGLTexture2D(F).removeRef(this),this.texBinding=null,this.gltexture=null,this.textureType=-1,this.bind=this.bindValue,a&&F.removeListenerById("loaded",a),F=null,a=null,g.emit("updated")};t.getImage()&&U(t.getImage()),t.on("textureConnected",()=>{U(t.getImage())}),t.on("textureDisconnected",()=>{d()})}this.dirty=!0,t.on("valueChanged",()=>{this.dirty=!0,g.emit("updated")})}bindValue(e){this.dirty&&(this.update(),this.dirty=!1),this.unif&&this.uniformXX(this.unif.location,this.val),this.textureTypeUnif&&this.uniform1i(this.textureTypeUnif.location,0)}bindTexture(e){this.dirty&&(this.update(),this.dirty=!1),this.gltexture.bindToUniform(e,this.textureUnif,this.texBinding)}}class so extends $l{constructor(e,g,t,I){super(I);switch(this.param=t,this.unif.type){case"Vec2":this.uniformXX=e.uniform2fv.bind(e);break;case"Vec3":this.uniformXX=e.uniform3fv.bind(e);break;case"Vec4":this.uniformXX=e.uniform4fv.bind(e);break}this.dirty=!0,t.on("valueChanged",()=>{this.dirty=!0,g.emit("updated")})}bind(e){this.dirty&&(this.values=this.param.value.asArray(),this.dirty=!1),this.uniformXX(this.unif.location,this.values)}unbind(){}destroy(){}}class oo extends $l{constructor(e,g,t,I){super(I);switch(this.values=new Float32Array(0),this.param=t,this.unif.type){case"Mat3":this.uniformMatrixXXX=e.uniformMatrix3fv.bind(e);break;case"Mat4":this.uniformMatrixXXX=e.uniformMatrix4fv.bind(e);break}this.dirty=!0,t.on("valueChanged",()=>{this.dirty=!0,g.emit("updated")})}bind(e){this.dirty&&(this.values=this.param.value.asArray(),this.dirty=!1),this.uniformMatrixXXX(this.unif.location,!1,this.values)}unbind(){}destroy(){}}class Vn extends $l{constructor(e,g,t,I,l){super(I);const C=t.getName();this.param=t,this.textureUnif=l[C+"Tex"],this.textureTypeUnif=l[C+"TexType"],this.values=Float32Array.from([0,0,0,0]),this.bind=this.bindValue;const n=s=>{F=s;let o=Te.getCachedGLTexture2D(s);const A=1;o||(s.type==="FLOAT"?o=new DI(e,s):o=new Te(e,s),Te.setCachedGLTexture2D(s,o)),this.texBinding=o.preBind(this.textureUnif,l),o.on("updated",()=>{g.emit("updated")}),this.gltexture=o,this.gltexture.addRef(this),this.textureType=A,this.bind=this.bindTexture,g.emit("updated")};let F,a;const U=s=>{s.isLoaded()?n(s):a=s.once("loaded",()=>{n(s)})},d=()=>{this.gltexture.removeRef(this),this.gltexture=null,this.texBinding=null,this.textureType=null,a&&F.removeListenerById("loaded",a),this.bind=this.bindValue,F=null,a=null,g.emit("updated")};this.update=()=>{try{F||this.unif&&(t instanceof ye&&t.colorSpace==Bg.Gamma?this.values=t.value.toLinear().asArray():this.values=t.value.asArray())}catch{}g.emit("updated")},t instanceof ye&&(t.getImage()&&U(t.getImage()),t.on("textureConnected",()=>{U(t.getImage())}),t.on("textureDisconnected",()=>{d()})),this.dirty=!0,t.on("valueChanged",()=>{this.dirty=!0}),this.uniform1i=e.uniform1i.bind(e),this.uniform4fv=e.uniform4fv.bind(e)}bindValue(e){!this.unif||(this.dirty&&(this.update(),this.dirty=!1),this.unif&&this.uniform4fv(this.unif.location,this.values),this.textureTypeUnif&&this.uniform1i(this.textureTypeUnif.location,0))}bindTexture(e){this.dirty&&(this.update(),this.dirty=!1),this.gltexture.bindToUniform(e,this.textureUnif,this.texBinding)}}const tl={};class Ao{constructor(e,g,t,I){this.uniformBindings=[];const l=n=>{const F=n.getName(),a=t[F];if(a==null){if(t[F+"Tex"]){this.uniformBindings.push(new Vn(e,g,n,a,t));return}if(I){const d=g.getMaterial().getShaderName();tl[d]||(tl[d]={}),tl[d][F]||(console.warn("Material:"+g.getMaterial().getName(),"with Shader ",d,"Param has no unif",F),tl[d][F]=!0)}return}switch(a.type){case"Boolean":case"UInt32":case"SInt32":case"Float32":this.uniformBindings.push(new Uo(e,g,n,a,t));break;case"Vec2":case"Vec3":case"Vec4":this.uniformBindings.push(new so(e,g,n,a));break;case"Color":this.uniformBindings.push(new Vn(e,g,n,a,t));break;case"Mat4":this.uniformBindings.push(new oo(e,g,n,a));break;default:console.warn("Param :"+F+" has unhandled data type:"+a.type);return}},C=g.getMaterial().getParameters();for(const n of C)l(n)}bind(e){for(const g of this.uniformBindings)g.bind(e);return!0}unbind(e){for(const g of this.uniformBindings)g.unbind(e)}destroy(){for(const e of this.uniformBindings)e.destroy()}}class Bo extends Xe{constructor(e,g,t){super();this.__gl=e,this.__material=g,this.__glshader=t,this.__shaderBindings={},g.on("parameterValueChanged",()=>this.emit("updated"))}getMaterial(){return this.__material}getGLShader(){return this.__glshader}bind(e,g){this.__boundTexturesBeforeMaterial=e.boundTextures;let t=this.__shaderBindings[e.shaderkey];if(!t){const I=this.__gl;t=new Ao(I,this,e.unifs,g),this.__shaderBindings[e.shaderkey]=t}t.bind(e)}unbind(e){e.boundTextures=this.__boundTexturesBeforeMaterial}}class Qo extends Xe{constructor(e){super();this.materials=[],this.materialIndices={},this.glMaterials={},this.refCounts=[],this.freeIndices=[],this.materialsAllocator=new vt,this.renderer=e,this.materials=[],this.refCounts=[],this.materialIndices={},this.glMaterials={},this.freeIndices=[],this.dirtyIndices=new Set,this.materialsAllocator=new vt,this.materialsAllocator.on("dataReallocated",g=>{const t=g.id;this.dirtyIndices.add(t)})}addMaterial(e){let g=this.materialIndices[e.getId()];if(g!=null)return this.refCounts[g]++,g;this.freeIndices.length?g=this.freeIndices.pop():g=this.materials.length,this.materials[g]=e,this.refCounts[g]=1,this.materialIndices[e.getId()]=g;const t=e.getShaderClass().getPackedMaterialData(e);this.materialsAllocator.allocate(g,t.length/4);const I=()=>{this.dirtyIndices.add(g),this.emit("updated")};return e.on("parameterValueChanged",I),this.dirtyIndices.add(g),g}getGLMaterial(e){if(this.glMaterials[e.getId()])return this.glMaterials[e.getId()];const g=this.renderer.getOrCreateShader(e.getShaderName()),t=this.renderer.gl,I=new Bo(t,e,g);return I.on("updated",()=>{this.renderer.requestRedraw()}),e.setMetadata("glMaterial",I),this.glMaterials[e.getId()]=I,I}getMaterialAllocation(e){const g=this.materialIndices[e.getId()];if(g!=null)return this.materialsAllocator.getAllocation(g)}removeMaterial(e){const g=this.materialIndices[e.getId()];this.refCounts[g]--,!(this.refCounts[g]>0)&&(this.freeIndices.push(g),this.materialsAllocator.deallocate(g),this.materials[g]=null,delete this.materialIndices[e.getId()],this.dirtyIndices.has(g)&&this.dirtyIndices.delete(g))}uploadMaterials(e){const g=this.renderer.__gl,t=q.nextPow2(Math.ceil(Math.sqrt(this.materialsAllocator.reservedSpace))),I=e.boundTextures++;if(g.activeTexture(g.TEXTURE0+I),!this.materialsTexture)this.materialsTexture=new Te(this.renderer.__gl,{format:"RGBA",type:"FLOAT",width:t,height:t,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.materialsTexture.clear();else if(this.materialsTexture.width<t){this.materialsTexture.resize(t,t);for(let n=0;n<this.materials.length;n++)this.materialsAllocator.getAllocation(n)&&this.dirtyIndices.add(n)}const l=this.materialsTexture,C=this.materialsTexture.width;g.bindTexture(g.TEXTURE_2D,l.glTex),this.dirtyIndices.forEach(n=>{const F=this.materialsAllocator.getAllocation(n),a=this.materials[n],U=a.getShaderClass().getPackedMaterialData(a),d=0,s=F.start%C,o=1,A=Math.ceil((s+F.size)/C);let B=0,Q=F.size,r=s;for(let R=0;R<A;R++){let V;r+Q>C?(V=C-r,r=0):V=Q;const h=(F.start+B)%C,m=Math.floor((F.start+B)/C),Z=U.subarray(B*4,(B+V)*4);g.texSubImage2D(g.TEXTURE_2D,d,h,m,V,o,l.__format,l.__type,Z),B+=V,Q-=V}}),this.dirtyIndices=new Set,g.bindTexture(g.TEXTURE_2D,null),e.boundTextures--}update(e){this.dirtyItemIndices.length>0&&this.uploadMaterials(e),e.drawItemsTexture=this.glGeomItemsTexture}bind(e){if(this.dirtyIndices.size>0&&this.uploadMaterials(e),!this.materialsTexture)return!1;const{materialsTexture:g,materialsTextureSize:t}=e.unifs;return g&&(this.materialsTexture.bindToUniform(e,g),t&&this.renderer.gl.uniform2i(t.location,this.materialsTexture.width,this.materialsTexture.height)),!0}}class Vo extends Vi{constructor(e,g){super(e,g);this.__numVertices=9,this.__vboState=-1,this.genBuffers()}genBuffers(e){super.genBuffers(e);const g=this.__gl,t=this.__geom.genBuffers();for(const I in t.attrBuffers){const l=t.attrBuffers[I],C=g.createBuffer();g.bindBuffer(g.ARRAY_BUFFER,C),g.bufferData(g.ARRAY_BUFFER,l.values,g.STATIC_DRAW),this.__glattrbuffers[I]={buffer:C,dataType:l.dataType,normalized:l.normalized}}this.__numVertices=t.numVertices,this.__vboState=2}updateBuffers(e){const g=this.__gl,t=this.__geom.genBuffers(),I=t.numVertices!=this.__numVertices;for(const l in t.attrBuffers){const C=t.attrBuffers[l],n=this.__glattrbuffers[l];I&&(g.deleteBuffer(n.buffer),n.buffer=g.createBuffer()),g.bindBuffer(g.ARRAY_BUFFER,n.buffer),g.bufferData(g.ARRAY_BUFFER,C.values,g.STATIC_DRAW)}this.__numVertices=t.numVertices}bind(e){if(e.unifs.PointSize){const g=this.__gl;let t=this.__shaderBindings[e.shaderkey];if(!t){g.__quadVertexIdsBuffer||g.setupInstancedQuad();const I=Object.assign(this.__glattrbuffers,g.__quadattrbuffers);t=og(this.__gl,e.attrs,I,g.__quadIndexBuffer),this.__shaderBindings[e.shaderkey]=t}return t.bind(e),!0}else return super.bind(e),!0}draw(e){const g=this.__gl;e.unifs.PointSize?g.drawElementsInstanced(g.TRIANGLES,6,g.UNSIGNED_SHORT,0,this.__numVertices):g.drawArrays(g.POINTS,0,this.__numVertices)}drawInstanced(e,g){this.__gl.drawArraysInstanced(this.__gl.POINTS,0,this.__numVertices,g)}}class Ya extends Vi{constructor(e,g){super(e,g);this.__numSegIndices=0,this.__numVertices=0,this.__fatBuffersNeedUpload=!1,this.fatBuffers=null,this.__buffersNeedUpload=!1,this.__indexDataType=0,this.__numSegIndices=0,this.__numVertices=0,this.__fatBuffersNeedUpload=!0}dirtyBuffers(e){super.dirtyBuffers(e),this.__fatBuffersNeedUpload=!0,this.emit("updated")}clearBuffers(){const e=this.__gl;if(e.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null,this.fatBuffers&&this.fatBuffers.positionsTexture){this.fatBuffers.positionsTexture&&(this.fatBuffers.positionsTexture.destroy(),this.fatBuffers.positionsTexture=null);const g=this.fatBuffers.glattrbuffers.segmentIndices;g.buffer&&(e.deleteBuffer(g.buffer),this.fatBuffers.glattrbuffers.segmentIndices=null)}super.clearBuffers()}genFatBuffers(e){const g=this.__gl,t=this.__geom.genBuffers(),I=t.indices,l=t.numVertices!=this.__numVertices;g.__quadVertexIdsBuffer||g.setupInstancedQuad(),this.fatBuffers||(this.fatBuffers={drawCount:0,positionsTexture:null,glattrbuffers:{}},this.fatBuffers.glattrbuffers.vertexIDs=g.__quadattrbuffers.vertexIDs);const C=e.boundTextures++;g.activeTexture(this.__gl.TEXTURE0+C),this.fatBuffers.drawCount=I.length/2;const n=this.__geom.getVertexAttributes(),F=n.positions,a=n.lineThickness,U=4,d=new Float32Array(F.getCount()*U);for(let o=0;o<F.getCount();o++)new b(new Float32Array(d.buffer,o*U*4,3)).setFromOther(F.getValueRef(o)),a?d[o*4+3]=a.getFloat32Value(o):d[o*4+3]=1;l&&this.fatBuffers.positionsTexture&&(this.fatBuffers.positionsTexture.destroy(),this.fatBuffers.positionsTexture=null),this.fatBuffers.positionsTexture?this.fatBuffers.positionsTexture.bufferData(d,F.getCount(),1):this.fatBuffers.positionsTexture=new Te(this.__gl,{format:"RGBA",type:"FLOAT",width:F.getCount(),height:1,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",data:d,mipMapped:!1});const s=()=>{const o=new Float32Array(I.length);for(let A=0;A<I.length;A++){let B;A%2==0?B=A>0?I[A]==I[A-1]:I[A]==I[I.length-1]:B=A<I.length-1?I[A]==I[A+1]:I[A]==I[0],o[A]=(B?1:0)+I[A]*2}return o};if(this.fatBuffers.glattrbuffers.segmentIndices)(!this.genBufferOpts||this.genBufferOpts&&this.genBufferOpts.topologyChanged)&&(g.bindBuffer(g.ARRAY_BUFFER,this.fatBuffers.glattrbuffers.segmentIndices.buffer),g.bufferData(g.ARRAY_BUFFER,s(),g.STATIC_DRAW));else{const o=g.createBuffer();g.bindBuffer(g.ARRAY_BUFFER,o),g.bufferData(g.ARRAY_BUFFER,s(),g.STATIC_DRAW),this.fatBuffers.glattrbuffers.segmentIndices={buffer:o,dimension:2,dataType:"Vec2"}}this.__numSegIndices=I.length,this.__numVertices=t.numVertices,g.bindTexture(g.TEXTURE_2D,null),e.boundTextures--,this.__fatBuffersNeedUpload=!1}genBuffers(e){const g=this.__gl,t=this.__geom.genBuffers(),I=t.indices,l=t.numVertices!=this.__numVertices;{this.__indexBuffer?(!this.genBufferOpts||this.genBufferOpts&&this.genBufferOpts.topologyChanged)&&(this.__numSegIndices!=I.length&&(g.deleteBuffer(this.__indexBuffer),this.__indexBuffer=g.createBuffer()),g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),g.bufferData(g.ELEMENT_ARRAY_BUFFER,I,g.STATIC_DRAW),this.__numSegIndices=I.length):(this.__indexBuffer=g.createBuffer(),g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),g.bufferData(g.ELEMENT_ARRAY_BUFFER,I,g.STATIC_DRAW));for(const C in t.attrBuffers){const n=t.attrBuffers[C];if(this.__glattrbuffers[C]){const F=this.__glattrbuffers[C];l&&(g.deleteBuffer(F.buffer),F.buffer=g.createBuffer()),g.bindBuffer(g.ARRAY_BUFFER,F.buffer),g.bufferData(g.ARRAY_BUFFER,n.values,g.STATIC_DRAW)}else{const F=g.createBuffer();g.bindBuffer(g.ARRAY_BUFFER,F),g.bufferData(g.ARRAY_BUFFER,n.values,g.STATIC_DRAW),this.__glattrbuffers[C]={buffer:F,dataType:n.dataType,normalized:n.normalized}}}this.__numSegIndices=I.length,this.__numVertices=t.numVertices,this.__buffersNeedUpload=!1}I instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),I instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),I instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT)}bind(e){const g=this.__gl,t=e.unifs;if(t.LineThickness&&g.floatTexturesSupported){this.__fatBuffersNeedUpload&&this.genFatBuffers(e);const I=this.fatBuffers;let l=this.__shaderBindings[e.shaderkey];return l||(l=og(this.__gl,e.attrs,I.glattrbuffers,g.__quadIndexBuffer),this.__shaderBindings[e.shaderkey]=l),l.bind(e),t.positionsTexture&&(I.positionsTexture.bindToUniform(e,t.positionsTexture),g.uniform1i(t.positionsTextureSize.location,I.positionsTexture.width)),!0}else return super.bind(e),!0}drawPoints(){this.__gl.drawArrays(this.__gl.POINTS,0,this.__geom.numVertices())}draw(e){const g=this.__gl;e.unifs.LineThickness&&g.floatTexturesSupported?g.drawElementsInstanced(g.TRIANGLES,6,g.UNSIGNED_SHORT,0,this.fatBuffers.drawCount):g.drawElements(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0)}drawInstanced(e,g){const t=this.__gl,{occluded:I}=e.unifs;I&&t.uniform1i(I.location,0),t.drawElementsInstanced(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0,g),I&&(t.uniform1i(I.location,1),t.depthFunc(t.GREATER),t.drawElementsInstanced(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0,g),t.depthFunc(t.LEQUAL))}}const Il=(i,e)=>{const g=new Int32Array(e);return g.set(i),g};class ro extends Xe{constructor(e){super();this.indexBuffer=null,this.__destroyed=!1,this.renderer=e,this.__gl=e.gl,this.shaderAttrSpec={},this.freeGeomIndices=[],this.geoms=[],this.geomRefCounts=[],this.geomsDict={},this.glGeomsDict={},this.geomBuffersTmp=[],this.glattrbuffers={},this.shaderBindings={},this.bufferNeedsRealloc=!1,this.attributesAllocator=new vt,this.dirtyGeomIndices=new Set,this.attributesAllocator.on("resized",()=>{this.bufferNeedsRealloc=!0}),this.attributesAllocator.on("dataReallocated",g=>{const t=g.id,I=g.allocation;this.dirtyGeomIndices.add(t),this.geomVertexOffsets[t]=I.start,this.geomVertexCounts[t]=I.size}),this.geomVertexCounts=new Int32Array(1),this.geomVertexOffsets=new Int32Array(1),this.indicesCounts=new Int32Array(1),this.indicesOffsets=new Int32Array(1),this.freeGeomIndices.push(0),this.numIndices=0,this.indicesAllocator=new vt,this.indicesAllocator.on("resized",()=>{this.bufferNeedsRealloc=!0}),this.indicesAllocator.on("dataReallocated",g=>{const t=g.id;this.dirtyGeomIndices.add(t)})}constructGLGeom(e){let g=this.glGeomsDict[e.getId()];if(g!=null)return g;const t=this.__gl;if(e instanceof ht||e instanceof Kg)g=new ql(t,e);else if(e instanceof sg||e instanceof Gg)g=new Ya(t,e);else if(e instanceof Rt||e instanceof ct)g=new Vo(t,e);else throw new Error("Unsupported geom type:"+e.constructor.name);return this.glGeomsDict[e.getId()]=g,g.on("updated",()=>{this.renderer.requestRedraw()}),g.addRef(this),g}addGeom(e){let g=this.geomsDict[e.getId()];if(g!=null)return this.geomRefCounts[g]++,g;if(this.freeGeomIndices.length==0){const l=this.geomVertexCounts.length,C=l*2;this.geomVertexCounts=Il(this.geomVertexCounts,C),this.geomVertexOffsets=Il(this.geomVertexOffsets,C),this.indicesCounts=Il(this.indicesCounts,C),this.indicesOffsets=Il(this.indicesOffsets,C);for(let n=C-1;n>=l;n--)this.freeGeomIndices.push(n)}g=this.freeGeomIndices.pop(),this.geoms[g]=e,this.geomRefCounts[g]=1,this.geomsDict[e.getId()]=g,this.dirtyGeomIndices.add(g),this.geomVertexCounts[g]=0,this.geomVertexOffsets[g]=0,this.indicesCounts[g]=0,this.indicesOffsets[g]=0;const t=()=>{this.dirtyGeomIndices.add(g),this.emit("updated")},I=()=>{this.dirtyGeomIndices.add(g),this.emit("updated")};return e.on("geomDataChanged",t),e.on("geomDataTopologyChanged",I),g}removeGeom(e){const g=this.geomsDict[e.getId()];this.geomRefCounts[g]--,!(this.geomRefCounts[g]>0)&&(this.attributesAllocator.getAllocation(g)&&this.attributesAllocator.deallocate(g),this.indicesAllocator.getAllocation(g)&&this.indicesAllocator.deallocate(g),this.dirtyGeomIndices.has(g)&&this.dirtyGeomIndices.delete(g),this.geomVertexCounts[g]=0,this.geomVertexOffsets[g]=0,this.geoms[g]=null,this.freeGeomIndices.push(g),delete this.geomsDict[e.getId()],delete this.geomBuffersTmp[g],this.indicesCounts[g]=0,this.indicesOffsets[g]=0)}getGeom(e){return this.geoms[e]}getGeomOffsetAndCount(e){return[this.indicesOffsets[e],this.indicesCounts[e]]}getGeomBuffers(e){return this.geomBuffersTmp[e]}allocateBuffers(e){const g=this.geoms[e];if(!g)return;const t=g.genBuffers(),I=t.numRenderVerts?t.numRenderVerts:t.numVertices;if(this.geomVertexCounts[e]!=I)if(I==0)this.attributesAllocator.deallocate(e),this.geomVertexOffsets[e]=0,this.geomVertexCounts[e]=0;else{const l=this.attributesAllocator.allocate(e,I);this.geomVertexOffsets[e]=l.start,this.geomVertexCounts[e]=l.size}for(const l in t.attrBuffers)if(!this.shaderAttrSpec[l]){const C=t.attrBuffers[l],n=Qi(this.__gl,C.dataType);this.shaderAttrSpec[l]={dataType:C.dataType,normalized:C.normalized,dimension:n.dimension,elementSize:n.elementSize}}if(t.indices){const l=t.indices.length;if(this.indicesCounts[e]!=l)if(l==0)this.indicesAllocator.deallocate(e),this.indicesOffsets[e]=0,this.indicesCounts[e]=0;else{const C=this.indicesAllocator.allocate(e,l),n=4;this.indicesOffsets[e]=C.start*n,this.indicesCounts[e]=C.size}}else this.indicesOffsets[e]=this.geomVertexOffsets[e],this.indicesCounts[e]=this.geomVertexCounts[e];this.geomBuffersTmp[e]=t}genBuffers(){const e=this.attributesAllocator.reservedSpace,g=this.__gl;for(const I in this.shaderAttrSpec){const l=this.shaderAttrSpec[I],C=e*l.dimension;l.numValues=C,this.glattrbuffers[I]&&this.glattrbuffers[I].buffer&&g.deleteBuffer(this.glattrbuffers[I].buffer);const n=g.createBuffer();g.bindBuffer(g.ARRAY_BUFFER,n);const F=C*l.elementSize;g.bufferData(g.ARRAY_BUFFER,F,g.STATIC_DRAW),this.glattrbuffers[I]={buffer:n,dataType:l.dataType,normalized:l.normalized,length:C,dimension:l.dimension},I=="textureCoords"&&(this.glattrbuffers.texCoords=this.glattrbuffers.textureCoords)}const t=this.indicesAllocator.reservedSpace;if(this.numIndices!=t){const I=this.__gl;this.indexBuffer&&I.deleteBuffer(this.indexBuffer),this.indexBuffer=I.createBuffer(),I.bindBuffer(I.ELEMENT_ARRAY_BUFFER,this.indexBuffer);const l=this.indicesAllocator.reservedSpace,n=l*4;I.bufferData(I.ELEMENT_ARRAY_BUFFER,n,I.STATIC_DRAW),this.numIndices=l}}uploadBuffers(e){const g=this.__gl;let t=this.geomBuffersTmp[e];if(!t){const n=this.geoms[e];if(!n)return;t=n.genBuffers(),this.geomBuffersTmp[e]=t}const I=this.geomVertexCounts[e],l=t.numRenderVerts?t.numRenderVerts:t.numVertices;if(I!=l)throw new Error("Invalid allocation for this geom");if(l==0){const n=new ji(e);this.emit("geomDataChanged",n);return}for(const n in t.attrBuffers){const F=this.shaderAttrSpec[n],a=t.attrBuffers[n],U=this.glattrbuffers[n];if(!a||!U)continue;g.bindBuffer(g.ARRAY_BUFFER,U.buffer);const d=F.elementSize,s=this.geomVertexOffsets[e]*d*F.dimension;g.bufferSubData(g.ARRAY_BUFFER,s,a.values)}if(g.bindBuffer(g.ARRAY_BUFFER,null),t.indices&&t.indices.length>0){const n=t.indices,F=this.indicesAllocator.getAllocation(e);if(F.size!=n.length)throw new Error("Invalid allocation for this geom");const a=this.attributesAllocator.getAllocation(e),U=new Uint32Array(F.size);for(let A=0;A<n.length;A++)U[A]=t.indices[A]+a.start;const d=this.__gl;d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,this.indexBuffer);const s=4,o=F.start*s;d.bufferSubData(d.ELEMENT_ARRAY_BUFFER,o,U),d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,null)}let C=new ji(e);this.emit("geomDataChanged",C)}cleanGeomBuffers(){if(new Set(this.dirtyGeomIndices).forEach(g=>{this.allocateBuffers(g)}),this.bufferNeedsRealloc){for(const g in this.shaderBindings)this.shaderBindings[g].destroy();this.shaderBindings={};for(let g=0;g<this.geoms.length;g++)this.geoms[g]&&this.dirtyGeomIndices.add(g);this.genBuffers(),this.bufferNeedsRealloc=!1}this.dirtyGeomIndices.forEach(g=>{this.uploadBuffers(g)}),this.dirtyGeomIndices=new Set}bind(e){this.dirtyGeomIndices.size>0&&this.cleanGeomBuffers();let g=this.shaderBindings[e.shaderkey];if(g)g.bind(e);else{const t=this.__gl;g=og(t,e.attrs,this.glattrbuffers,this.indexBuffer),this.shaderBindings[e.shaderkey]=g}return!0}unbind(e){const g=this.shaderBindings[e.shaderkey];g&&g.unbind(e)}clearBuffers(){const e=this.__gl;for(const g in this.glattrbuffers){const t=this.glattrbuffers[g];t.shared||e.deleteBuffer(t.buffer)}this.glattrbuffers={},this.indexBuffer&&(e.deleteBuffer(this.indexBuffer),this.indexBuffer=null);for(const g in this.shaderBindings)this.shaderBindings[g].destroy();this.shaderBindings={}}destroy(){this.clearBuffers(),this.__destroyed=!0,this.emit("destructing")}}const ft={GEOMITEM_FLAG_CUTAWAY:1,GEOMITEM_INVISIBLE_IN_GEOMDATA:2,GEOMITEM_TRANSPARENT:4};class Ro extends Xe{constructor(e,g,t,I,l,C=!1){super();if(this.listenerIDs={},this.shattered=!1,this.culled=!1,this.cutDataChanged=!1,this.cutData=[],this.geomMatrixDirty=!1,this.gl=e,this.geomItem=g,this.geomItemId=t,this.geomId=I,this.materialId=l,this.supportInstancing=C,this.visible=this.geomItem.isVisible(),this.listenerIDs.visibilityChanged=this.geomItem.on("visibilityChanged",n=>{const F=!this.culled&&this.visible;this.visible=n.visible;const a=!this.culled&&this.visible;F!=a&&this.emit("visibilityChanged",new vC(a))}),g instanceof At&&(this.shattered=g.shattered),this.listenerIDs.shatterStateChanged=this.geomItem.on("shatterStateChanged",n=>{this.shattered=n.state,this.emit("shatterStateChanged",n)}),!this.supportInstancing){this.cutDataChanged=!1,this.cutData=[0,0,0,0];const n=0;let F=0;this.geomItem.isCutawayEnabled()&&(F|=ft.GEOMITEM_FLAG_CUTAWAY),g.isSelectable()||(F|=ft.GEOMITEM_INVISIBLE_IN_GEOMDATA),g.materialParam.value.isOpaque()||(F|=ft.GEOMITEM_TRANSPARENT),this.geomData=[F,n,0,0],this.geomMatrixDirty=!0,this.listenerIDs["GeomMat.valueChanged"]=this.geomItem.geomMatParam.on("valueChanged",()=>{this.geomMatrixDirty=!0,this.emit("updated")}),this.listenerIDs.cutAwayChanged=this.geomItem.on("cutAwayChanged",()=>{this.cutDataChanged=!0,this.emit("updated")});const a=U=>{U.isOpaqueStateChanged&&(this.geomData[0],U.isOpaque,this.geomData[0],this.emit("updated"))};this.listenerIDs.opacityChanged=this.geomItem.on("opacityChanged",a),this.listenerIDs["material:opacityChanged"]=this.geomItem.materialParam.on("opacityChanged",a)}}getGeomItem(){return this.geomItem}isVisible(){return!this.culled&&this.visible}getGeomItemId(){return this.geomItemId}setCulled(e){const g=!this.culled&&this.visible;this.culled=e;const t=!this.culled&&this.visible;g!=t&&this.emit("visibilityChanged",new vC(t))}bind(e){const g=this.gl,t=e.unifs;if(!this.supportInstancing){const l=t.modelMatrix;l&&(this.geomMatrixDirty&&(this.modelMatrixArray=this.geomItem.geomMatParam.value.asArray()),g.uniformMatrix4fv(l.location,!1,this.modelMatrixArray));const C=t.drawItemData;C&&g.uniform4fv(C.location,this.geomData);const n=t.cutawayData;if(n){if(this.cutDataChanged&&this.geomItem.isCutawayEnabled()){const F=this.geomItem.getCutVector(),a=this.geomItem.getCutDist();this.cutData=[F.x,F.y,F.z,a]}g.uniform4fv(n.location,this.cutData)}}const I=t.geomItemId;return I&&g.uniform1i(I.location,this.geomItemId),!0}destroy(){this.geomItem.removeListenerById("visibilityChanged",this.listenerIDs.visibilityChanged),this.supportInstancing||(this.geomItem.geomMatParam.removeListenerById("valueChanged",this.listenerIDs["GeomMat.valueChanged"]),this.geomItem.removeListenerById("cutAwayChanged",this.listenerIDs.cutAwayChanged))}}class ho extends Pe{constructor(e){super(e,"ReductionShader");this.setShaderStage("VERTEX_SHADER",`

precision highp float;

uniform int reductionTextureWidth;
uniform sampler2D geomDataTexture;

ivec2 texelCoordFromVertexId(){
  ivec2 texSize = textureSize(geomDataTexture, 0);
  return ivec2(
    gl_VertexID % texSize.x, 
    gl_VertexID / texSize.x
    );
}

vec2 pointPositionFromGeomItemId(int geomItemId){
  vec2 result = vec2(
    (float(geomItemId % reductionTextureWidth) + 0.5) / float(reductionTextureWidth), 
    (float(geomItemId / reductionTextureWidth) + 0.5) / float(reductionTextureWidth)
    );
  return vec2(-1.0, -1.0) + (result * 2.0);
}

void main()
{
  // Get the texel coordinate in the source geomdata buffer.
  // there is one point for every pixel in the geomdata texture.
  ivec2 texelCoord = texelCoordFromVertexId();
  int geomItemId = int(texelFetch(geomDataTexture, texelCoord, 0).g + 0.5);

  if (geomItemId > 0) {
    vec2 position = pointPositionFromGeomItemId(geomItemId);
    gl_Position = vec4(position, 0.0, 1.0);
    gl_PointSize = 1.0;
  } else {
    // Move it off screen
    gl_Position = vec4(-2.0, -2.0, 0.0, 1.0);
    gl_PointSize = 0.0;
  }
}

`),this.setShaderStage("FRAGMENT_SHADER",`
precision highp float;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  fragColor = vec4(1.0, 1.0, 1.0, 1.0);

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}

`)}}var co=`
precision highp float;
#define GLSLIFY 1

/* VS Outputs */
varying vec4 v_color;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  int drawItemId = int(v_color.g);
  fragColor = v_color;

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,Zo=`
precision highp float;
#define GLSLIFY 1

attribute vec4 positions;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 cameraMatrix;

uniform highp int occlusionCulling;
uniform sampler2D reductionDataTexture;

import 'transpose.glsl'
import 'GLSLUtils.glsl'
import 'stack-gl/transpose.glsl'
import 'stack-gl/inverse.glsl'
import 'geomItemId.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

const int GEOMITEM_INVISIBLE_IN_GEOMDATA = 2; // 1<<1;

/* VS Outputs */
varying vec4 v_color;

void main(void) {

  int drawItemId = getGeomItemId();
  vec4 geomItemData  = getInstanceData(drawItemId);
  int flags = int(geomItemData.r + 0.5);

  if (occlusionCulling != 0) {
    // Check if in the reduction texture, this item is already flagged as visible.
    // Note: we only draw bboxes for those that have been flagged as invisible, but might
    // be just off screen, or onscreen, but were culled in the previous update.
    int isVisible = int(fetchTexel(reductionDataTexture, textureSize(reductionDataTexture, 0), drawItemId).r);
    if (isVisible > 0) {
      return;
    }
    if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {
      return;
    }
  }

  vec4 bboxMin = fetchTexel(instancesTexture, instancesTextureSize, (drawItemId * pixelsPerItem) + 6);
  vec4 bboxMax = fetchTexel(instancesTexture, instancesTextureSize, (drawItemId * pixelsPerItem) + 7);
  mat4 viewProjectionMatrix = projectionMatrix * viewMatrix;

  if (occlusionCulling != 0) {
    // TODO: The bounding box stochastic
    v_color = vec4(0.0, float(drawItemId), 0.0, 1.0);
  } else {
    v_color = fetchTexel(instancesTexture, instancesTextureSize, (drawItemId * pixelsPerItem) + 4);
  }

  vec4 pos = positions;
  if (pos.x < 0.0) pos.x = bboxMin.x;
  else if (pos.x > 0.0) pos.x = bboxMax.x;
  if (pos.y < 0.0) pos.y = bboxMin.y;
  else if (pos.y > 0.0) pos.y = bboxMax.y;
  if (pos.z < 0.0) pos.z = bboxMin.z;
  else if (pos.z > 0.0) pos.z = bboxMax.z;

  gl_Position = viewProjectionMatrix * pos;
}
`;class mo extends Pe{constructor(e){super(e,"BoundingBoxShader");this.setShaderStage("VERTEX_SHADER",Zo),this.setShaderStage("FRAGMENT_SHADER",co)}}var Wo=_C("",null,!1);function bo(i,e,g,t){return new Promise((I,l)=>{function C(){const n=i.clientWaitSync(e,g,0);if(n==i.WAIT_FAILED){l();return}if(n==i.TIMEOUT_EXPIRED){setTimeout(C,t);return}I()}C()})}function Jo(i,e,g,t,I,l=0,C=0){return VI(this,void 0,void 0,function*(){const n=i.fenceSync(i.SYNC_GPU_COMMANDS_COMPLETE,0);return i.flush(),yield bo(i,n,0,10),i.deleteSync(n),i.bindBuffer(e,g),i.getBufferSubData(e,t,I,l,C),i.bindBuffer(e,null),I})}function Go(i,e,g,t,I,l,C,n){return VI(this,void 0,void 0,function*(){const F=i.createBuffer();return i.bindBuffer(i.PIXEL_PACK_BUFFER,F),i.bufferData(i.PIXEL_PACK_BUFFER,n.byteLength,i.STREAM_READ),i.readPixels(e,g,t,I,l,C,0),i.bindBuffer(i.PIXEL_PACK_BUFFER,null),yield Jo(i,i.PIXEL_PACK_BUFFER,F,0,n),i.deleteBuffer(F),n})}class uo extends sg{constructor(){super();this.setNumVertices(8);const e=this.getVertexAttribute("positions");e.getValueRef(0).set(.5,-.5,.5),e.getValueRef(1).set(.5,.5,.5),e.getValueRef(2).set(-.5,.5,.5),e.getValueRef(3).set(-.5,-.5,.5),e.getValueRef(4).set(.5,-.5,-.5),e.getValueRef(5).set(.5,.5,-.5),e.getValueRef(6).set(-.5,.5,-.5),e.getValueRef(7).set(-.5,-.5,-.5),this.setNumSegments(34),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,0,2),this.setSegmentVertexIndices(2,0,3),this.setSegmentVertexIndices(3,0,4),this.setSegmentVertexIndices(4,0,5),this.setSegmentVertexIndices(5,0,6),this.setSegmentVertexIndices(6,0,7),this.setSegmentVertexIndices(7,1,0),this.setSegmentVertexIndices(8,1,2),this.setSegmentVertexIndices(9,1,3),this.setSegmentVertexIndices(10,1,4),this.setSegmentVertexIndices(11,1,5),this.setSegmentVertexIndices(12,1,6),this.setSegmentVertexIndices(13,1,7),this.setSegmentVertexIndices(14,2,0),this.setSegmentVertexIndices(15,2,1),this.setSegmentVertexIndices(16,2,3),this.setSegmentVertexIndices(17,2,4),this.setSegmentVertexIndices(18,2,5),this.setSegmentVertexIndices(19,2,6),this.setSegmentVertexIndices(20,2,7),this.setSegmentVertexIndices(21,3,1),this.setSegmentVertexIndices(22,3,2),this.setSegmentVertexIndices(23,3,0),this.setSegmentVertexIndices(24,3,4),this.setSegmentVertexIndices(25,3,5),this.setSegmentVertexIndices(26,3,6),this.setSegmentVertexIndices(27,3,7),this.setSegmentVertexIndices(28,4,5),this.setSegmentVertexIndices(29,4,6),this.setSegmentVertexIndices(30,4,7),this.setSegmentVertexIndices(31,5,6),this.setSegmentVertexIndices(32,5,7),this.setSegmentVertexIndices(33,6,7)}}class So extends Xe{constructor(e,g){var t;super();this.glGeomItems=[null],this.glGeomItemEventHandlers=[],this.glGeomItemsMap={},this.glGeomItemsIndexFreeList=[],this.dirtyItemIndices=[],this.dirtyWorkerItemIndices=new Set,this.removedItemIndices=[],this.glGeomItemsTexture=null,this.xrPresenting=!1,this.xrFovY=0,this.xrProjectionMatrix=new Ee,this.debugOcclusionBuffer=!1,this.inFrustumIndicesCount=0,this.drawIdsBufferDirty=!1,this.timer_query_ext=null,this.renderer=e,this.enableFrustumCulling=g.enableFrustumCulling||g.enableOcclusionCulling;const I=this.renderer.gl;this.enableOcclusionCulling=g.enableOcclusionCulling&&I.name=="webgl2",this.debugOcclusionBuffer=(t=g.debugOcclusionBuffer)!==null&&t!==void 0?t:!1,this.enableFrustumCulling&&this.setupCullingWorker(e)}setupCullingWorker(e){this.worker=new Wo,this.worker.postMessage({type:"Init",enableOcclusionCulling:this.enableOcclusionCulling});let g=!0;this.worker.onmessage=F=>{F.data.type=="InFrustumIndices"?this.enableOcclusionCulling?(F.data.newlyCulled&&this.applyCullResults(F.data),this.calculateOcclusionCulling(F.data.inFrustumIndices)):(this.applyCullResults(F.data),this.emitCullingUpdateData(F.data),g=!0):F.data.type=="CullResults"?(this.applyCullResults(F.data),this.emitCullingUpdateData(F.data),g=!0):F.data.type=="Done"&&this.renderer.emit("CullingUpdated"),g=!0};const t=()=>{const F=e.getViewport(),a=e.getViewport().getCamera(),U=F.getWidth()/F.getHeight();if(a.isOrthographic()){const d=a.getFrustumHeight(),s=d*U;this.worker.postMessage({type:"ViewportChanged",frustumHeight:d,frustumWidth:s,isOrthographic:!0,solidAngleLimit:e.solidAngleLimit})}else{const d=a.getFov()*.5,s=Math.atan(Math.tan(d)*U);this.worker.postMessage({type:"ViewportChanged",frustumHalfAngleX:s,frustumHalfAngleY:d,isOrthographic:!1,solidAngleLimit:e.solidAngleLimit})}};e.on("resized",t);const I=e.getViewport().getCamera();I.on("projectionParamChanged",F=>{I.isOrthographic()&&t()}),t(),e.once("xrViewportSetup",F=>{this.xrViewport=F.xrViewport;const a=F.xrViewport;a.on("presentingChanged",U=>{if(this.xrPresenting=U.state,U.state){C=10;const d=Math.PI/180;let s=62*d,o=50*d;switch(a.getHMDName()){case"Vive":s*=.6,o*=.6;break;case"Oculus":s*=.5,o*=.5;break;default:s*=.5,o*=.5;break}this.xrFovY=s*2;const A=62/50,B=a.depthRange[0],Q=a.depthRange[1];this.xrProjectionMatrix.setPerspectiveMatrix(this.xrFovY,A,B,Q),this.worker.postMessage({type:"ViewportChanged",frustumHalfAngleX:o,frustumHalfAngleY:s,isOrthographic:!1,solidAngleLimit:e.solidAngleLimit})}else C=5,t(),n()})});let l=0,C=5;e.on("viewChanged",F=>{if(g){if(l%C==0){g=!1;const a=F.viewXfo.tr,U=F.viewXfo.ori;this.worker.postMessage({type:"ViewChanged",cameraPos:a.asArray(),cameraOri:U.asArray(),solidAngleLimit:e.solidAngleLimit})}l++}});const n=()=>{const a=e.getViewport().getCamera().globalXfoParam.value,U=a.tr,d=a.ori;this.worker.postMessage({type:"ViewChanged",cameraPos:U.asArray(),cameraOri:d.asArray(),solidAngleLimit:e.solidAngleLimit})};if(e.getViewport().getCamera().on("movementFinished",n),n(),this.enableOcclusionCulling){const F=this.renderer.gl;this.timer_query_ext=F.getExtension("EXT_disjoint_timer_query_webgl2");let a=1;const U=Math.ceil(this.renderer.getWidth()*a),d=Math.ceil(this.renderer.getHeight()*a);this.occlusionDataBuffer=new ZI(F,{type:F.FLOAT,format:F.RGBA,minFilter:F.NEAREST,magFilter:F.NEAREST,width:U,height:d,depthType:F.UNSIGNED_SHORT,depthFormat:F.DEPTH_COMPONENT,depthInternalFormat:F.DEPTH_COMPONENT16}),this.renderer.on("resized",s=>{this.xrPresenting||this.occlusionDataBuffer.resize(Math.ceil(s.width*a),Math.ceil(s.height*a))}),this.reductionDataBuffer=new ZI(F,{type:F.UNSIGNED_BYTE,internalFormat:F.R8,format:F.RED,minFilter:F.NEAREST,magFilter:F.NEAREST,width:1,height:1,depthType:F.UNSIGNED_SHORT,depthFormat:F.DEPTH_COMPONENT,depthInternalFormat:F.DEPTH_COMPONENT16}),this.bbox=new Ya(F,new uo),this.reductionShader=new ho(F),this.boundingBoxShader=new mo(F),this.boundingBoxShader.compileForTarget("GLGeomItemLibrary",{directives:this.renderer.directives}),this.inFrustumIndicesCount=0}}applyCullResults(e){e.newlyCulled&&e.newlyCulled.forEach(g=>{this.glGeomItems[g]&&this.glGeomItems[g].setCulled(!0)}),e.newlyUnCulled&&e.newlyUnCulled.forEach(g=>{this.glGeomItems[g]&&this.glGeomItems[g].setCulled(!1)}),this.renderer.requestRedraw()}emitCullingUpdateData(e){var g,t;this.renderer.emit("CullingUpdated",{culled:(g=e.newlyCulled)===null||g===void 0?void 0:g.length,unCulled:(t=e.newlyUnCulled)===null||t===void 0?void 0:t.length,visible:e.visible,total:e.total,visibleGeomStats:e.visibleGeomStats,totalGeomStats:e.totalGeomStats})}updateCulledDrawIDsBuffer(e){const g=this.renderer.gl;if(!g.floatTexturesSupported){this.drawIdsBufferDirty=!1;return}this.inFrustumDrawIdsBuffer&&this.inFrustumIndicesCount!=e.length&&(g.deleteBuffer(this.inFrustumDrawIdsBuffer),this.inFrustumDrawIdsBuffer=null),this.inFrustumDrawIdsBuffer||(this.inFrustumDrawIdsBuffer=g.createBuffer(),g.bindBuffer(g.ARRAY_BUFFER,this.inFrustumDrawIdsBuffer)),g.bindBuffer(g.ARRAY_BUFFER,this.inFrustumDrawIdsBuffer),g.bufferData(g.ARRAY_BUFFER,e,g.STATIC_DRAW),this.inFrustumIndicesCount=e.length,this.drawIdsBufferDirty=!1;const t=Math.max(4,q.nextPow2(Math.round(Math.sqrt(this.glGeomItems.length)+.5)));this.reductionDataBuffer.width!=t&&(this.reductionDataBuffer.resize(t,t),this.reductionDataArray=new Uint8Array(t*t))}calculateOcclusionCulling(e){if(e&&e.length>0&&this.updateCulledDrawIDsBuffer(e),this.inFrustumIndicesCount==0){this.worker.postMessage({type:"OcclusionData",visibleItems:[]});return}const g=this.renderer.gl,t={shaderopts:{}};this.renderer.bindGLBaseRenderer(t),t.directives=[...this.renderer.directives,"#define DRAW_GEOMDATA"],t.shaderopts.directives=t.directives,t.floatGeomBuffer=!0,t.occlusionCulling=1,this.xrPresenting?(this.xrViewport.initCullingRenderState(t),t.viewports[0].fovY=this.xrFovY,t.viewports[0].projectionMatrix=this.xrProjectionMatrix):this.renderer.getViewport().initRenderState(t);const I=V=>{this.occlusionDataBuffer.bindForWriting(V,!0),g.disable(g.BLEND),g.disable(g.CULL_FACE),g.enable(g.DEPTH_TEST),g.depthFunc(g.LESS),g.depthMask(!0),this.renderer.getPass(0).drawGeomData(V),this.renderer.getPass(1).drawGeomData(V),this.occlusionDataBuffer.unbindForWriting(V)},l=this.occlusionDataBuffer.width*this.occlusionDataBuffer.height,C=this.timer_query_ext,n=(V,h,m)=>{this.reductionDataBuffer.bindForWriting(V,h),h||(g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),g.blendFunc(g.SRC_COLOR,g.DST_COLOR)),this.reductionShader.bind(V);const{geomDataTexture:Z,reductionTextureWidth:c}=V.unifs;Z&&this.occlusionDataBuffer.bindToUniform(V,Z),c&&g.uniform1i(c.location,this.reductionDataBuffer.width),C&&g.beginQuery(C.TIME_ELAPSED_EXT,m),g.drawArrays(g.POINTS,0,l),C&&g.endQuery(C.TIME_ELAPSED_EXT),h||g.disable(g.BLEND),this.reductionDataBuffer.unbindForWriting(V)},F=()=>{this.occlusionDataBuffer.bindForWriting(t,!1),this.debugOcclusionBuffer||(g.colorMask(!0,!0,!0,!0),g.clearColor(0,0,0,0),g.clear(g.COLOR_BUFFER_BIT)),this.boundingBoxShader.bind(t,"GLGeomItemLibrary"),this.bbox.bind(t);const{instancesTexture:V,instancesTextureSize:h,instancedDraw:m,reductionDataTexture:Z,occlusionCulling:c}=t.unifs;this.glGeomItemsTexture.bindToUniform(t,V),g.uniform1i(h.location,this.glGeomItemsTexture.width),g.uniform1i(m.location,1),g.uniform1i(c.location,1),this.reductionDataBuffer.bindColorTexture(t,Z);const W=t.attrs.instancedIds.location;g.enableVertexAttribArray(W),g.bindBuffer(g.ARRAY_BUFFER,this.inFrustumDrawIdsBuffer),g.vertexAttribPointer(W,1,g.FLOAT,!1,1*4,0),g.vertexAttribDivisor(W,1),t.bindViewports(t.unifs,()=>{this.bbox.drawInstanced(t,this.inFrustumIndicesCount)}),this.occlusionDataBuffer.unbindForWriting(t)};let a,U,d,s;C&&(a=g.createQuery(),g.beginQuery(C.TIME_ELAPSED_EXT,a)),I(t),C&&g.endQuery(C.TIME_ELAPSED_EXT),C&&(U=g.createQuery()),n(t,!0,U),C&&(d=g.createQuery(),g.beginQuery(C.TIME_ELAPSED_EXT,d)),F(),C&&g.endQuery(C.TIME_ELAPSED_EXT),C&&(s=g.createQuery()),n(t,!1,s);const o={numReductionPoints:l},A=(V,h)=>{const m=g.getQueryParameter(h,g.QUERY_RESULT_AVAILABLE),Z=g.getParameter(C.GPU_DISJOINT_EXT);if(m&&!Z){const c=g.getQueryParameter(h,g.QUERY_RESULT);o[V]=c/1e6,g.deleteQuery(h)}},B=this.reductionDataBuffer.width,Q=this.reductionDataBuffer.height,r=g.RED,R=g.UNSIGNED_BYTE;this.reductionDataBuffer.bindForReading(),Go(g,0,0,B,Q,r,R,this.reductionDataArray).then(()=>{this.reductionDataBuffer.unbindForReading(),C&&(A("queryDrawScene",a),A("queryDrawCulledBBoxes",d),A("queryReduceSceneGeoms",U),A("queryReduceBBoxes",s),this.renderer.emit("occlusionCullingProfilingData",o)),this.worker.postMessage({type:"OcclusionData",visibleItems:this.reductionDataArray})})}addGeomItem(e){let g=this.glGeomItemsMap[e.getId()];if(g!=null)return this.glGeomItems[g];performance.now();const t=e.materialParam;let I=t.value,l=-1;l=this.renderer.glMaterialLibrary.addMaterial(I);const C=()=>{this.renderer.glMaterialLibrary.removeMaterial(I),I=t.value,o.materialId=this.renderer.glMaterialLibrary.addMaterial(I),B(),A()};t.on("valueChanged",C);const n=e.geomParam;let F=n.value;const a=this.renderer.glGeomLibrary.addGeom(F),U=()=>{this.renderer.glGeomLibrary.removeGeom(F),F=n.value,o.geomId=this.renderer.glGeomLibrary.addGeom(F),this.enableFrustumCulling&&this.dirtyWorkerItemIndices.add(g),A()};n.on("valueChanged",U),this.glGeomItemsIndexFreeList.length>0?g=this.glGeomItemsIndexFreeList.pop():(g=this.glGeomItems.length,this.glGeomItems.push(null)),this.removedItemIndices.includes(g)&&this.removedItemIndices.splice(this.removedItemIndices.indexOf(g),1),this.dirtyItemIndices.push(g);const d=this.renderer.gl,s=d.floatTexturesSupported,o=new Ro(d,e,g,a,l,s),A=()=>{this.dirtyItemIndices.includes(g)||(this.dirtyItemIndices.push(g),this.renderer.drawItemChanged())};e.geomMatParam.on("valueChanged",A),e.on("cutAwayChanged",A),e.on("highlightChanged",A),e.on("selectabilityChanged",A),e.on("opacityChanged",A);const B=()=>{this.enableFrustumCulling&&(this.dirtyWorkerItemIndices.has(g)||(this.dirtyWorkerItemIndices.add(g),this.renderer.drawItemChanged()))};return this.enableFrustumCulling&&this.dirtyWorkerItemIndices.add(g),e.on("visibilityChanged",B),e.on("opacityChanged",B),e.geomMatParam.on("valueChanged",B),n.on("boundingBoxChanged",B),this.glGeomItems[g]=o,this.glGeomItemEventHandlers[g]={geomItemChanged:A,materialChanged:C,geomChanged:U,workerItemDataChanged:B},this.glGeomItemsMap[e.getId()]=g,this.renderer.requestRedraw(),o}removeGeomItem(e){const g=this.glGeomItemsMap[e.getId()];if(g==null)return null;const t=this.glGeomItems[g],I=e.geomParam.value;this.renderer.glGeomLibrary.removeGeom(I);const l=e.materialParam.value;this.renderer.glMaterialLibrary.removeMaterial(l);const C=this.glGeomItemEventHandlers[g],n=e.geomParam;return e.materialParam.off("valueChanged",C.materialChanged),n.off("valueChanged",C.geomChanged),e.geomMatParam.off("valueChanged",C.geomItemChanged),e.off("cutAwayChanged",C.geomItemChanged),e.off("highlightChanged",C.geomItemChanged),e.off("selectabilityChanged",C.geomItemChanged),e.off("opacityChanged",C.geomItemChanged),e.off("visibilityChanged",C.workerItemDataChanged),e.geomMatParam.off("valueChanged",C.workerItemDataChanged),n.off("boundingBoxChanged",C.workerItemDataChanged),e.off("opacityChanged",C.workerItemDataChanged),this.glGeomItems[g]=null,this.glGeomItemEventHandlers[g]=null,this.glGeomItemsIndexFreeList.push(g),delete this.glGeomItemsMap[e.getId()],this.removedItemIndices.push(g),this.dirtyWorkerItemIndices.has(g)&&this.dirtyWorkerItemIndices.delete(g),this.renderer.requestRedraw(),t}getGeomItem(e){var g;if(e>=this.glGeomItems.length){console.warn("Invalid Draw Item id:"+e+" NumItems:"+(this.glGeomItems.length-1));return}return(g=this.glGeomItems[e])===null||g===void 0?void 0:g.geomItem}getGLGeomItem(e){const g=this.glGeomItemsMap[e.getId()];return g!=null?this.glGeomItems[g]:null}populateDrawItemDataArray(e,g,t){const I=this.glGeomItems[e];if(!I)return;const{geomItem:l,geomId:C}=I,n=l.materialParam.value,F=hg*4,a=g*F;let U=0;l.isCutawayEnabled()&&(U|=ft.GEOMITEM_FLAG_CUTAWAY),l.isSelectable()||(U|=ft.GEOMITEM_INVISIBLE_IN_GEOMDATA),(!n.isOpaque()||!l.isOpaque())&&(U|=ft.GEOMITEM_TRANSPARENT);const d=new Be(new Float32Array(t.buffer,(a+0)*4,4));d.set(U,l.opacity,0,0);const s=this.renderer.glMaterialLibrary.getMaterialAllocation(n);s&&(d.z=s.start),d.w=C;const o=l.geomMatParam.value,A=new Be(new Float32Array(t.buffer,(a+1*4)*4,4)),B=new Be(new Float32Array(t.buffer,(a+2*4)*4,4)),Q=new Be(new Float32Array(t.buffer,(a+3*4)*4,4));A.set(o.xAxis.x,o.yAxis.x,o.zAxis.x,o.translation.x),B.set(o.xAxis.y,o.yAxis.y,o.zAxis.y,o.translation.y),Q.set(o.xAxis.z,o.yAxis.z,o.zAxis.z,o.translation.z);const r=new Be(new Float32Array(t.buffer,(a+4*4)*4,4));if(l.isHighlighted()){const Z=l.getHighlight();r.set(Z.r,Z.g,Z.b,Z.a)}const R=new Be(new Float32Array(t.buffer,(a+5*4)*4,4));if(l.isCutawayEnabled()){const Z=l.getCutVector(),c=l.getCutDist();R.set(Z.x,Z.y,Z.z,c)}const V=l.boundingBoxParam.value,h=new Be(new Float32Array(t.buffer,(a+6*4)*4)),m=new Be(new Float32Array(t.buffer,(a+7*4)*4));h.set(V.p0.x,V.p0.y,V.p0.z,0),m.set(V.p1.x,V.p1.y,V.p1.z,0)}getCullingWorkerData(e,g,t){const I=e.boundingBoxParam.value,l=I.size()*.5,C=I.center();let n=e.cullable!=!1;const F=g.getParameter("MaintainScreenSize");F&&F.value&&(n=!1),g.getShaderName().startsWith("ScreenSpace")&&(n=!1),g.hasParameter("PointSize")&&(n=!1),this.enableOcclusionCulling&&!e.isSelectable()&&(n=!1);const a=!e.isOpaque()||!g.isOpaque(),U={triangles:0,lines:0,points:0},d=e.geomParam.value;if(d instanceof hI)U.triangles+=d.getNumTriangles(),U.lines+=d.getNumLineSegments(),U.points+=d.getNumPoints();else if(d instanceof ht||d instanceof Kg)U.triangles+=d.getNumTriangles();else if(d instanceof sg||d instanceof Gg)U.lines+=d.getNumLineSegments();else if(d instanceof Rt||d instanceof ct)U.points+=d.getNumVertices();else throw new Error("Unsupported geom type:"+d.constructor.name);return{id:t,boundingRadius:l,pos:C.asArray(),cullable:n,visible:e.isVisible(),transparent:a,geomStats:U}}uploadGeomItemsToWorker(){if(this.enableFrustumCulling){const e=[];this.dirtyWorkerItemIndices.forEach(g=>{const t=this.glGeomItems[g];if(!t)return;const{geomItem:I}=t,l=I.materialParam.value;e.push(this.getCullingWorkerData(I,l,g))}),this.worker.postMessage({type:"UpdateGeomItems",geomItems:e,removedItemIndices:this.removedItemIndices}),this.dirtyWorkerItemIndices.clear(),this.removedItemIndices=[]}}uploadGeomItems(e){const g=this.renderer.gl;if(!g.floatTexturesSupported)return;let t=Math.round(Math.sqrt(this.glGeomItems.length*hg)+.5);t=q.nextPow2(t),t%hg!=0&&(t+=hg-t%hg),this.glGeomItemsTexture?this.glGeomItemsTexture.width!=t&&(this.glGeomItemsTexture.resize(t,t),this.dirtyItemIndices=Array(t*t/hg).fill(0).map((l,C)=>C)):(this.glGeomItemsTexture=new Te(g,{format:"RGBA",type:"FLOAT",width:t,height:t,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.glGeomItemsTexture.clear()),g.bindTexture(g.TEXTURE_2D,this.glGeomItemsTexture.glTex);const I=this.glGeomItemsTexture.getType();for(let l=0;l<this.dirtyItemIndices.length;l++){const C=this.dirtyItemIndices[l],n=Math.floor(C*hg/t);let F=C+1;for(let A=l+1;A<this.dirtyItemIndices.length;A++){const B=this.dirtyItemIndices[A];if(Math.floor(B*hg/t)!=n||B!=F)break;F++}const a=F-C,U=C*hg%t,d=hg*a,s=1,o=new Float32Array(hg*4*a);for(let A=C;A<F;A++)this.populateDrawItemDataArray(A,A-C,o);if(I==g.FLOAT)this.glGeomItemsTexture.populate(o,d,s,U,n,!1);else{const A=q.convertFloat32ArrayToUInt16Array(o);this.glGeomItemsTexture.populate(A,d,s,U,n,!1)}l+=a-1}this.removedItemIndices=[],this.dirtyItemIndices=[]}bind(e){(this.dirtyWorkerItemIndices.size>0||this.removedItemIndices.length>0)&&this.uploadGeomItemsToWorker(),this.dirtyItemIndices.length>0&&this.uploadGeomItems(e);const g=this.renderer.gl,{instancesTexture:t,instancesTextureSize:I}=e.unifs;t&&(this.glGeomItemsTexture.bindToUniform(e,t),g.uniform1i(I.location,this.glGeomItemsTexture.width))}}let Cg,pt=!1,ll=!1;const iI={};class No extends xt{constructor(e,g={}){var t;super();if(this.listenerIDs={},this.directives=[],this.solidAngleLimit=.004,this.__glcanvas=null,this.__scene=null,this.__shaderDirectives={},this.__renderGeomDataFbosRequested=!1,this.__shaders={},this.__passes={},this.passAssignments={},this.__passesRegistrationOrder=[],this.__passCallbacks=[],this.__viewports=[],this.__activeViewport=void 0,this.__continuousDrawing=!1,this.__redrawRequested=!1,this.__isMobile=!1,this.__drawSuspensionLevel=0,this.__xrViewportPresenting=!1,this.floatGeomBuffer=!0,this.__supportXR=!1,this.__xrViewport=void 0,this.screenQuad=null,!_e.gpuDesc)throw new Error("Unable to create renderer. WebGL not Supported");this.__isMobile=_e.isMobileDevice,this.requestRedraw=this.requestRedraw.bind(this),this.__gl=this.setupWebGL(e,g),this.screenQuad=new lo(this.__gl,{directives:this.directives}),this.bindEventHandlers();const I=this.addViewport("main");I.debugGeomDataBuffer=g.debugGeomDataBuffer,I.debugOcclusionBuffer=g.debugOcclusionBuffer,this.glMaterialLibrary=new Qo(this),this.glMaterialLibrary.on("updated",()=>{this.requestRedraw()}),this.glGeomLibrary=new ro(this),this.glGeomLibrary.on("updated",()=>{this.requestRedraw()}),this.glGeomItemLibrary=new So(this,g),this.glGeomItemLibrary.on("updated",()=>{this.requestRedraw()});for(const l in iI)for(const C of iI[l])this.addPass(new C,parseInt(l),!1);this.__supportXR=(t=g.supportXR)!==null&&t!==void 0?t:!0,this.__xrViewportPromise=new Promise((l,C)=>{var n,F;if(this.__supportXR&&!((n=navigator)===null||n===void 0)&&n.xr){const a=()=>{this.__gl.makeXRCompatible().then(()=>{this.__xrViewport=this.__setupXRViewport();let U=new BU(this.__xrViewport);this.emit("xrViewportSetup",U),l(this.__xrViewport)})};(F=navigator)===null||F===void 0||F.xr.isSessionSupported("immersive-vr").then(U=>{U&&a()}).catch(U=>{console.warn("Unable to setup XR:"+U)})}})}addShaderPreprocessorDirective(e,g){g?this.__shaderDirectives[e]="#define "+e+" = "+g:this.__shaderDirectives[e]="#define "+e;const t=[];for(const I in this.__shaderDirectives)t.push(this.__shaderDirectives[I]);this.directives=t}getWidth(){return this.__glcanvas.width}getHeight(){return this.__glcanvas.height}addViewport(e){const g=this,t=new Co(g,e,this.getWidth(),this.getHeight()),I=()=>{this.requestRedraw()},l=C=>{this.__xrViewportPresenting||this.emit("viewChanged",C)};return t.on("updated",I),t.on("viewChanged",l),this.__viewports.push(t),this.__activeViewport=t,t}getViewport(e=0){return this.__viewports[e]}getViewportAtPos(e,g){for(const t of this.__viewports){const I=t.getPosX(),l=t.getPosY(),C=t.getWidth(),n=t.getHeight();if(e>=I&&g>=l&&e<=C+I&&g<=n+l)return t}}activateViewport(e){this.__activeViewport!=e&&(this.__activeViewport=e)}activateViewportAtPos(e,g){if(this.__xrViewportPresenting)return;const t=this.getViewportAtPos(e,g);t&&t!=this.__activeViewport&&this.activateViewport(t)}getActiveViewport(){return this.__activeViewport}suspendDrawing(){this.__drawSuspensionLevel++}resumeDrawing(){this.__drawSuspensionLevel--,this.__drawSuspensionLevel==0&&(this.renderGeomDataFbos(),this.requestRedraw())}renderGeomDataFbos(){if(this.__renderGeomDataFbosRequested==!0)return;this.__renderGeomDataFbosRequested=!0;const e=()=>{for(const g of this.__viewports)g.renderGeomDataFbo();this.__renderGeomDataFbosRequested=!1};window.requestAnimationFrame(e)}getScene(){return this.__scene}setScene(e){this.__scene=e,this.addTreeItem(this.__scene.getRoot());let g=new aU(this.__scene);this.emit("sceneSet",g)}addTreeItem(e){if(!(e instanceof H))return;const g=e.getId(),t={};if(this.listenerIDs[g]=t,e instanceof ge){const I=e.geomParam;if(I.value==null){const l=()=>{delete t["Geometry.valueChanged"],this.assignTreeItemToGLPass(e)};t["Geometry.valueChanged"]=I.once("valueChanged",l)}else this.assignTreeItemToGLPass(e)}else this.assignTreeItemToGLPass(e);for(const I of e.getChildren())I&&this.addTreeItem(I);t.childAdded=e.on("childAdded",I=>{this.addTreeItem(I.childItem)}),t.childRemoved=e.on("childRemoved",I=>{this.removeTreeItem(I.childItem)}),this.renderGeomDataFbos()}assignTreeItemToGLPass(e){if(e instanceof ge){const t=e;this.glGeomItemLibrary.addGeomItem(t)}let g=!1;for(let t=this.__passesRegistrationOrder.length-1;t>=0;t--){const I=this.__passesRegistrationOrder[t],l={continueInSubTree:!0};if(g=I.itemAddedToScene(e,l),g){if(this.passAssignments[e.getId()]=t,!l.continueInSubTree)return;break}}if(!g)for(const t of this.__passCallbacks){const I={continueInSubTree:!0};if(t.itemAddedFn(e,I)){if(!I.continueInSubTree)return;break}}}removeTreeItem(e){if(!(e instanceof H))return;const g=e.getId(),t=this.listenerIDs[g];delete this.listenerIDs[g],e.removeListenerById("childAdded",t.childAdded),e.removeListenerById("childRemoved",t.childRemoved);const I=this.passAssignments[g];if(I!=null){const l=this.getPass(I),C={continueInSubTree:!0};l.itemRemovedFromScene(e,C),delete this.passAssignments[g]}for(const l of e.getChildren())l&&this.removeTreeItem(l);if(e instanceof ge){const l=e;t["Geometry.valueChanged"]&&e.geomParam.removeListenerById("valueChanged",t["Geometry.valueChanged"]),this.glGeomItemLibrary.removeGeomItem(l)}this.renderGeomDataFbos()}get gl(){return this.__gl}getGL(){return this.__gl}handleResize(e,g){if(this.__xrViewportPresenting)return;const t=Math.max(4,e),I=Math.max(4,g);this.__glcanvas.width=t,this.__glcanvas.height=I,this.__viewports.forEach(C=>{C.resize(t,I)});const l=new Hg(t,I);this.emit("resized",l),this.requestRedraw()}getDiv(){return this.__glcanvas.parentElement}setupWebGL(e,g={}){var t,I;const{tagName:l}=e;if(!["DIV","CANVAS"].includes(l))throw new Error("Only CANVAS and DIV are valid root elements.");const C=l==="DIV";this.__glcanvas=e,C?(console.warn("@GLBaseRenderer#setupWebGL.","Using a DIV as root element is deprecated.","Use a CANVAS instead.","See: https://docs.zea.live/zea-engine/#/getting-started/get-started-with-engine?id=basic-setup"),this.__glcanvas=document.createElement("canvas"),e.appendChild(this.__glcanvas)):this.__glcanvas=e,this.__glcanvas.style["touch-action"]="none",this.__glcanvas.parentElement.style.position="relative",this.__glcanvas.parentElement.style.overflow="hidden",this.__glcanvas.style.position="absolute";const n=eo(d=>{if(!(!Array.isArray(d)||!d.length))for(const s of d){if(!s.contentRect)return;const o=Math.round(s.contentRect.width),A=Math.round(s.contentRect.height);this.handleResize(o,A)}},500);window.addEventListener("resize",()=>{const d=[{contentRect:{width:this.__glcanvas.parentElement.clientWidth,height:this.__glcanvas.parentElement.clientHeight}}];n(d)});const F=new ResizeObserver(n);try{F.observe(this.__glcanvas.parentNode,{box:"device-pixel-content-box"})}catch{F.observe(this.__glcanvas.parentNode,{box:"content-box"})}this.handleResize(this.__glcanvas.parentElement.clientWidth,this.__glcanvas.parentElement.clientHeight);const a={};a.preserveDrawingBuffer=!0,a.antialias=(t=g.antialias)!==null&&t!==void 0?t:!0,a.depth=!0,a.stencil=!1,a.alpha=(I=g.alpha)!==null&&I!==void 0?I:!1,a.xrCompatible=!1,a.powerPreference=g.powerPreference||"high-performance";const U=Gd(this.__glcanvas,a);U||alert("Unable to create WebGL context. WebGL not supported."),U.name=="webgl2"&&this.addShaderPreprocessorDirective("ENABLE_ES3"),U.floatTexturesSupported&&this.addShaderPreprocessorDirective("ENABLE_FLOAT_TEXTURES");{const d=_e.browserName=="Safari"&&_e.fullVersion=="15.4";d&&console.warn("Disabling multi-draw on Safari 15.4 due to a regression in WebKit",_e),a.disableMultiDraw=g.disableMultiDraw||d;const s=U.name=="webgl2"?U.getExtension("WEBGL_multi_draw"):null;s&&!a.disableMultiDraw?(U.multiDrawArrays=s.multiDrawArraysWEBGL.bind(s),U.multiDrawElements=s.multiDrawElementsWEBGL.bind(s),U.multiDrawElementsInstanced=s.multiDrawElementsInstancedWEBGL.bind(s),U.multiDrawArraysInstanced=s.multiDrawArraysInstancedWEBGL.bind(s)):this.addShaderPreprocessorDirective("EMULATE_MULTI_DRAW")}return _e.browserName=="Safari"&&U.name=="webgl"?this.floatGeomBuffer=!1:this.floatGeomBuffer=g.floatGeomBuffer!=null?g.floatGeomBuffer:U.floatTexturesSupported,U.floatGeomBuffer=this.floatGeomBuffer,U}bindEventHandlers(){const e=()=>this.getWidth()>0&&this.getHeight(),g=I=>_e.isMobileDevice?(console.warn("Mobile device is triggering mouse event:",I.type),!0):!1;this.__glcanvas.addEventListener("mousedown",I=>{if(g(I))return;const l=new fg(I,this.__glcanvas.getBoundingClientRect());pt=!0,Cg=this,this.activateViewportAtPos(l.rendererX,l.rendererY);const C=this.getActiveViewport();C&&C.onPointerDown(l),ll=!1}),document.addEventListener("mouseup",I=>{if(g(I)||Cg!=this||!e())return;const l=new fg(I,this.__glcanvas.getBoundingClientRect());pt=!1;const C=this.getActiveViewport();C&&C.onPointerUp(l),ll&&(C&&C.onPointerLeave(l),Cg=void 0)}),document.addEventListener("mousemove",I=>{if(g(I)||Cg!=this||!e())return;const l=new fg(I,this.__glcanvas.getBoundingClientRect());pt||this.activateViewportAtPos(l.rendererX,l.rendererY);const C=this.getActiveViewport();C&&C.onPointerMove(l)}),this.__glcanvas.addEventListener("mouseenter",I=>{if(!g(I)&&!pt){Cg=this;const l=new fg(I,this.__glcanvas.getBoundingClientRect());if(this.activateViewportAtPos(l.rendererX,l.rendererY),!pt){const C=this.getActiveViewport();C&&C.onPointerEnter(l)}ll=!1}}),this.__glcanvas.addEventListener("mouseleave",I=>{if(g(I)||Cg!=this||!e())return;const l=new fg(I,this.__glcanvas.getBoundingClientRect());if(pt)ll=!0;else{const C=this.getActiveViewport();C&&C.onPointerLeave(l),Cg=void 0}}),document.addEventListener("contextmenu",I=>{Cg!=this||!e()||(I.preventDefault(),I.stopPropagation())}),this.__glcanvas.addEventListener("touchstart",I=>{Cg=this;const l=this.getActiveViewport(),C=new nt(I,this.__glcanvas.getBoundingClientRect());l.onPointerDown(C)},{passive:!0}),this.__glcanvas.addEventListener("touchend",I=>{const l=this.getActiveViewport(),C=new nt(I,this.__glcanvas.getBoundingClientRect());l.onPointerUp(C)},{passive:!0}),this.__glcanvas.addEventListener("touchmove",I=>{const l=this.getActiveViewport(),C=new nt(I,this.__glcanvas.getBoundingClientRect());l.onPointerMove(C)},{passive:!0}),this.__glcanvas.addEventListener("touchcancel",I=>{const l=this.getActiveViewport(),C=new nt(I,this.__glcanvas.getBoundingClientRect());l.onTouchCancel(C)},{passive:!0});const t=I=>{if(!(Cg!=this||!e())&&Cg){const l=new QU(I,this.__glcanvas.getBoundingClientRect()),C=Cg.getActiveViewport();C&&C.onWheel(l)}};window.addEventListener("wheel",t,{passive:!1}),document.addEventListener("keydown",I=>{if(Cg!=this||!e())return;const l=new qi(I),C=Cg.getActiveViewport();C&&C.onKeyDown(l)}),document.addEventListener("keyup",I=>{if(Cg!=this||!e())return;const l=new qi(I),C=Cg.getActiveViewport();C&&C.onKeyUp(l)})}getGLCanvas(){return this.__glcanvas}frameAll(e=0){this.__viewports[e].frameView([this.__scene.getRoot()])}getOrCreateShader(e){let g=this.__shaders[e];return g||(g=S.constructClass(e),g||console.error("@GLBaseRenderer#getOrCreateShader - Shader not registered with the Registry:",e),g.setGLContext(this.__gl),this.__shaders[e]=g),g}addPass(e,g=-1,t=!0){g==-1&&(g=e.getPassType()),this.__passes[g]||(this.__passes[g]=[]);let I=0;for(const l in this.__passes){if(l==g.toString())break;I+=this.__passes[l].length}if(I+=this.__passes[g].length,e.on("updated",l=>{this.requestRedraw(),this.renderGeomDataFbos()}),e.init(this,I),this.__passes[g].push(e),t){let l=0;for(const C in this.__passes){const n=this.__passes[C];n.forEach((F,a)=>{F.setPassIndex(l+a)}),l+=n.length}}return this.__passesRegistrationOrder.push(e),this.requestRedraw(),I}getPass(e){let g=0;for(const t in this.__passes){const I=this.__passes[t];if(e-g<I.length)return I[e-g];g+=I.length}}supportsVR(){var e;return console.warn("@GLBaseRenderer#supportVR - Deprecated Method. Please instead connect to the vrViewportSetup signal."),this.__supportXR&&((e=navigator)===null||e===void 0?void 0:e.xr)!=null}__setupXRViewport(){const e=new Fo(this),g=t=>{this.emit("viewChanged",t)};return e.on("presentingChanged",t=>{const I=t.state;if(this.__xrViewportPresenting!=I)if(this.__xrViewportPresenting=I,I){for(const l in this.__passes){const C=this.__passes[l];for(const n of C)n.startPresenting()}e.on("viewChanged",g)}else{e.off("viewChanged",g),this.emit("updated");for(const n in this.__passes){const F=this.__passes[n];for(const a of F)a.stopPresenting()}const l=this.getViewport().getCamera().globalXfoParam.value,C=new zC("CameraAndPointer",l);this.emit("viewChanged",C),this.requestRedraw()}}),e}getVRViewport(){return this.__xrViewport}getXRViewport(){return this.__xrViewportPromise}isXRViewportPresenting(){return this.__xrViewportPresenting}isContinuouslyDrawing(){return this.__continuousDrawing}startContinuousDrawing(){if(this.isContinuouslyDrawing()||this.__xrViewportPresenting)return;const e=()=>{this.__continuousDrawing&&!this.__xrViewportPresenting&&window.requestAnimationFrame(e);for(const g of this.__viewports)g.draw()};this.__continuousDrawing=!0,window.requestAnimationFrame(e)}stopContinuousDrawing(){this.__continuousDrawing=!1}toggleContinuousDrawing(){this.__continuousDrawing?this.stopContinuousDrawing():this.startContinuousDrawing()}drawItemChanged(){for(const e of this.__viewports)e.invalidateGeomDataBuffer();this.requestRedraw()}requestRedraw(){if(this.__redrawRequested||this.__continuousDrawing||this.__xrViewportPresenting||this.__drawSuspensionLevel>0)return!1;const e=()=>{this.__redrawRequested=!1;for(const g of this.__viewports)g.draw()};return window.requestAnimationFrame(e),this.__redrawRequested=!0,!0}forceRender(){if(!this.__redrawRequested){console.warn("@GlBaseRenderer#forceRender - Scene is not dirty");return}this.__redrawRequested=!1;for(const e of this.__viewports)e.draw()}bindGLBaseRenderer(e){e.gl=this.__gl,e.shaderopts={directives:this.directives};const g=this.__gl;!e.viewports||e.viewports.length==1?(e.bindRendererUnifs=t=>{const{cameraMatrix:I,viewMatrix:l,projectionMatrix:C,eye:n,isOrthographic:F}=t;I&&g.uniformMatrix4fv(I.location,!1,e.cameraMatrix.asArray());const a=e.viewports[0];l&&g.uniformMatrix4fv(l.location,!1,a.viewMatrix.asArray()),C&&g.uniformMatrix4fv(C.location,!1,a.projectionMatrix.asArray()),n&&g.uniform1i(n.location,0),F&&g.uniform1i(F.location,a.isOrthographic)},e.bindViewports=(t,I)=>I()):(e.bindRendererUnifs=t=>{const{cameraMatrix:I}=t;I&&g.uniformMatrix4fv(I.location,!1,e.cameraMatrix.asArray())},e.bindViewports=(t,I)=>{e.viewports.forEach((l,C)=>{let n=l.region;g.viewport(n[0],n[1],n[2],n[3]);const{viewMatrix:F,projectionMatrix:a,eye:U,isOrthographic:d}=t;F&&g.uniformMatrix4fv(F.location,!1,l.viewMatrix.asArray()),a&&g.uniformMatrix4fv(a.location,!1,l.projectionMatrix.asArray()),U&&g.uniform1i(U.location,C),d&&g.uniform1i(d.location,l.isOrthographic),I()})})}drawScene(e){e.directives=[...this.directives,"#define DRAW_COLOR"],e.shaderopts.directives=e.directives;for(const g in this.__passes){const t=this.__passes[g];for(const I of t)I.enabled&&I.draw(e)}}drawHighlightedGeoms(e){this.bindGLBaseRenderer(e),e.directives=[...this.directives,"#define DRAW_HIGHLIGHT"],e.shaderopts.directives=e.directives;for(const g in this.__passes){const t=this.__passes[g];for(const I of t)I.enabled&&I.drawHighlightedGeoms(e)}}drawSceneGeomData(e,g=255){this.bindGLBaseRenderer(e),e.directives=[...this.directives,"#define DRAW_GEOMDATA"],e.shaderopts.directives=e.directives,e.floatGeomBuffer=this.floatGeomBuffer;for(const t in this.__passes){if((Number.parseInt(t)&g)==0)continue;const I=this.__passes[t];for(const l of I)l.enabled&&l.drawGeomData(e)}}static registerPass(e,g){iI[g]||(iI[g]=[]),iI[g].push(e)}destroy(){this.resizeObserver.disconnect()}}var po=`
precision highp float;
#define GLSLIFY 1

uniform float outlineThickness;
uniform sampler2D highlightDataTexture;
uniform vec2 highlightDataTextureSize;

varying vec2 v_texCoord;

vec3 SobelFactor(vec3 ldc, vec3 ldl, vec3 ldr, vec3 ldu, vec3 ldd)
{
  return abs(ldl - ldc) +
      abs(ldr - ldc) +
      abs(ldu - ldc) +
      abs(ldd - ldc);
}

// https://github.com/ssell/UnitySobelOutline/blob/2e1f4a5b4e703ae2c96aaf08d5518ce58abbaab9/Assets/Resources/Shaders/SobelOutlineHLSL.shader#L18
vec4 SobelSample(vec2 uv)
{
  vec3 offset = vec3((1.0 / highlightDataTextureSize.x), (1.0 / highlightDataTextureSize.y), 0.0) * outlineThickness;

  vec4 pixelCenter = texture2D(highlightDataTexture, uv);
  vec3 pixelLeft   = texture2D(highlightDataTexture, uv - offset.xz).rgb;
  vec3 pixelRight  = texture2D(highlightDataTexture, uv + offset.xz).rgb;
  vec3 pixelUp     = texture2D(highlightDataTexture, uv + offset.zy).rgb;
  vec3 pixelDown   = texture2D(highlightDataTexture, uv - offset.zy).rgb;

  vec3 sobelNormalVec = SobelFactor(pixelCenter.rgb, pixelLeft, pixelRight, pixelUp, pixelDown);
  
  float sobelNormal = sobelNormalVec.x + sobelNormalVec.y + sobelNormalVec.z;
  
  float outlineDepthMultiplier = 10.0;
  float outlineDepthBias = 2.5;
  sobelNormal = pow(sobelNormal * outlineDepthMultiplier, outlineDepthBias);

  sobelNormal = clamp(sobelNormal, 0.0, 1.0);

  
  float pixelCenterWeight = length(pixelCenter.rgb) > 0.0 ? 1.0 : 0.0;
  float pixelLeftWeight   = length(pixelLeft) > 0.0 ? 1.0 : 0.0;
  float pixelRightWeight  = length(pixelRight) > 0.0 ? 1.0 : 0.0;
  float pixelUpWeight     = length(pixelUp) > 0.0 ? 1.0 : 0.0;
  float pixelDownWeight   = length(pixelDown) > 0.0 ? 1.0 : 0.0;
  
  // Weight each neighbors contribution to the current pixel color.
  pixelCenter.rgb = pixelCenter.rgb * pixelCenterWeight;
  pixelLeft   *= pixelLeftWeight;
  pixelRight  *= pixelRightWeight;
  pixelUp     *= pixelUpWeight;
  pixelDown   *= pixelDownWeight;

  // Add all the weighted contributions, and then normalize.
  vec3 outlineColor = pixelCenter.rgb + pixelLeft + pixelRight +  pixelUp + pixelDown;
  outlineColor /= pixelCenterWeight + pixelLeftWeight + pixelRightWeight + pixelUpWeight + pixelDownWeight;

  return mix(vec4(outlineColor, sobelNormal), pixelCenter, pixelCenter.a);
}

#ifdef ENABLE_ES3
out vec4 fragColor;
#endif

void main(void) {
    
  vec4 outlineColor = SobelSample(v_texCoord);
  
  if (outlineColor.a > 0.0001) {
#ifndef ENABLE_ES3
    gl_FragColor = outlineColor;
#else
    fragColor = outlineColor;
#endif
  }
  else {
      discard;
  }
}

`,yo=`
precision highp float;
#define GLSLIFY 1

attribute vec3 positions;    //(location = 0)

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  v_texCoord = positions.xy+0.5;
  gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);
}

`;class Xo extends Pe{constructor(e){super(e,"HighlightsShader");this.setShaderStage("VERTEX_SHADER",yo),this.setShaderStage("FRAGMENT_SHADER",po)}}var ko=`
#ifndef ENABLE_ES3
#extension GL_EXT_frag_depth: enable
#endif
precision highp float;
#define GLSLIFY 1

uniform sampler2D colorTexture;
uniform sampler2D depthTexture;
uniform vec2 screenSize;
uniform vec2 depthRange;

uniform float outlineThickness;
uniform color outlineColor;
uniform float outlineSensitivity;
uniform float outlineDepthBias;

varying vec2 v_texCoord;

// http://web.archive.org/web/20130416194336/http://olivers.posterous.com/linear-depth-in-glsl-for-real
float LinearEyeDepth(float z_b) {
  float z_n = 2.0 * z_b - 1.0;
  float z_e = 2.0 * depthRange.x * depthRange.y / (depthRange.y + depthRange.x - z_n * (depthRange.y - depthRange.x));
  return z_e;
}

float LogEyeDepth(float z_b) {
  return depthRange.x + ((depthRange.y - depthRange.x) * z_b);
}

// https://www.vertexfragment.com/ramblings/unity-postprocessing-sobel-outline/#depth-based-outline
// https://github.com/ssell/UnitySobelOutline/blob/2e1f4a5b4e703ae2c96aaf08d5518ce58abbaab9/Assets/Resources/Shaders/SobelOutlineHLSL.shader

float SobelDepth(float ldc, float ldl, float ldr, float ldu, float ldd)
{
  return abs(ldl - ldc) +
      abs(ldr - ldc) +
      abs(ldu - ldc) +
      abs(ldd - ldc);
}

float SobelSampleDepth(vec2 uv, vec3 offset)
{
  float pixelCenter = LinearEyeDepth(texture2D(depthTexture, uv).r);
  float pixelLeft   = LinearEyeDepth(texture2D(depthTexture, uv - offset.xz).r);
  float pixelRight  = LinearEyeDepth(texture2D(depthTexture, uv + offset.xz).r);
  float pixelUp     = LinearEyeDepth(texture2D(depthTexture, uv + offset.zy).r);
  float pixelDown   = LinearEyeDepth(texture2D(depthTexture, uv - offset.zy).r);

  float  outlineDepthMultiplier = (1.0 / pixelCenter) * outlineSensitivity;

  return SobelDepth(pixelCenter, pixelLeft, pixelRight, pixelUp, pixelDown) * outlineDepthMultiplier;
}

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  vec3 offset = vec3((1.0 / screenSize.x), (1.0 / screenSize.y), 0.0) * outlineThickness;
  float sobelDepth = SobelSampleDepth(v_texCoord, offset);
  float sobelValue = pow(sobelDepth, outlineDepthBias);

  float minEdgeValue = 0.25;
  float maxEdgeValue = 0.55;
  sobelDepth = smoothstep(minEdgeValue, maxEdgeValue, sobelValue);

#ifdef ENABLE_ES3
  fragColor = vec4(outlineColor.rgb, sobelDepth);
#else
  fragColor = vec4(mix(texture2D(colorTexture, v_texCoord).rgb, outlineColor.rgb, sobelDepth), 1.0);
#ifdef  GL_EXT_frag_depth
  gl_FragDepthEXT = texture2D(depthTexture, v_texCoord).r;
#endif
#endif

  // float z = texture2D(depthTexture, v_texCoord).r;
  // float near = depthRange.x * 2.0;    // the near plane
  // float far = depthRange.y / 2.0;     // the far plane
  // float c = (2.0 * near) / (far + near - z * (far - near));  // convert to linear values 
  // fragColor = vec4(vec3(c), 1.0);

  

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,fo=`
precision highp float;
#define GLSLIFY 1
attribute vec3 positions;    //(location = 0)

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  v_texCoord = positions.xy+0.5;
  gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);
}
`;class Eo extends Pe{constructor(e){super(e,"SilhouetteShader");this.setShaderStage("VERTEX_SHADER",fo),this.setShaderStage("FRAGMENT_SHADER",ko)}}const nI=dg.OPAQUE|dg.TRANSPARENT|dg.OVERLAY;class zt extends No{constructor(e,g={}){super(e,g);this.__glEnvMap=null,this.__rayCastRenderTarget=null,this.__backgroundMapShader=null,this.__backgroundMapShaderBinding=null,this.__rayCastRenderTargetProjMatrix=new Ee,this.__exposure=1,this.__tonemap=!0,this.__gamma=2.2,this.__displayEnvironment=!0,this.__debugMode=0,this._planeDist=0,this.__cutPlaneNormal=new b(1,0,0),this.rayCastDist=0,this.rayCastArea=0;const t=this.__gl;this.highlightsShader=new Xo(t),this.silhouetteShader=new Eo(t),this.highlightOutlineThickness=1,this.outlineThickness=0,this.outlineColor=new E(.15,.15,.15,1),this.outlineSensitivity=2,this.outlineDepthBias=.7,this.__debugTextures=[void 0],this.addShaderPreprocessorDirective("ENABLE_INLINE_GAMMACORRECTION"),g.disableTextures||this.addShaderPreprocessorDirective("ENABLE_TEXTURES"),g.debugGeomIds&&this.addShaderPreprocessorDirective("DEBUG_GEOM_ID")}__bindEnvMap(e){const g=this.__gl;if(e instanceof Fi){if(g.name!=="webgl2")return;e.type==="FLOAT"&&(this.addShaderPreprocessorDirective("ENABLE_PBR"),this.__glEnvMap=new Zs(this,e))}else{const I=e;if(I.type==="FLOAT"?this.__glBackgroundMap=new DI(this.__gl,I):this.__glBackgroundMap=new Te(this.__gl,I),this.__glBackgroundMap.on("loaded",()=>{this.requestRedraw()}),this.__glBackgroundMap.on("updated",()=>{this.requestRedraw()}),!this.__backgroundMapShader){g.__quadVertexIdsBuffer||g.setupInstancedQuad(),this.__backgroundMapShader=new ka(this.__gl);const l=this.__backgroundMapShader.compileForTarget();this.__backgroundMapShaderBinding=og(this.__gl,l.attrs,g.__quadattrbuffers,g.__quadIndexBuffer)}return}this.__glEnvMap.on("loaded",I=>{this.requestRedraw()}),this.__glEnvMap.on("updated",I=>{this.requestRedraw()});const t=new lU(this.__glEnvMap);this.emit("envMapAssigned",t)}setScene(e){const g=e.envMapParam;g.value!=null&&this.__bindEnvMap(g.value),g.on("valueChanged",()=>{this.__bindEnvMap(g.value)});const t=e.displayEnvMapParam;this.__displayEnvironment=t.value,t.on("valueChanged",()=>{this.__displayEnvironment=t.value,this.requestRedraw()}),super.setScene(e)}addViewport(e){return super.addViewport(e)}get exposure(){return this.__exposure}set exposure(e){this.__exposure=e,this.requestRedraw()}get gamma(){return this.__gamma}set gamma(e){this.__gamma=e,this.requestRedraw()}get displayEnvironment(){return this.__displayEnvironment}set displayEnvironment(e){this.__displayEnvironment=e,this.requestRedraw()}raycastWithRay(e,g,t=.01,I=nI){const l=new v;return l.setLookAt(e.start,e.start.add(e.dir),new b(0,0,1)),this.raycast(l,e,g,t,I)}raycastWithXfo(e,g,t=.01,I=nI){const l=new Ag(e.tr,e.ori.getZaxis().negate());return this.raycast(e,l,g,t,I)}raycast(e,g,t,I=.01,l=nI){return(this.rayCastDist!=t||this.rayCastArea!=I)&&(this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(I*-.5,I*.5,I*-.5,I*.5,0,t),this.rayCastDist=t,this.rayCastArea=I),this.raycastWithProjection(e,this.__rayCastRenderTargetProjMatrix,g,l)}raycastWithProjection(e,g,t,I=nI){var l;const C=[0,0,3,3],n={cameraMatrix:e.toMat4(),viewports:[{region:C,viewMatrix:e.inverse().toMat4(),projectionMatrix:g,isOrthographic:!0}]},F=this.__gl;this.__rayCastRenderTarget||(this.__rayCastRenderTarget=new ZI(F,{type:"FLOAT",format:"RGBA",filter:"NEAREST",createDepthTexture:!0,width:3,height:3,numColorChannels:1})),this.__rayCastRenderTarget.bindForWriting(n,!0),F.enable(F.CULL_FACE),F.enable(F.DEPTH_TEST),F.depthFunc(F.LEQUAL),F.depthMask(!0),this.drawSceneGeomData(n,I),F.finish(),this.__rayCastRenderTarget.unbindForWriting(),this.__rayCastRenderTarget.bindForReading();const a=new Float32Array(4*9);F.readPixels(0,0,3,3,F.RGBA,F.FLOAT,a),this.__rayCastRenderTarget.unbindForReading();const U=B=>a[B*4+3]!=0,d=[4,3,5,1,7];let s;for(const B of d)if(U(B)){s=a.subarray(B*4,B*4+4);break}if(!s)return null;const o=Math.round(s[0])&64-1,A=(l=this.getPass(o))===null||l===void 0?void 0:l.getGeomItemAndDist(s);if(A){const B=t.start.add(t.dir.scale(A.dist));return{pointerRay:t,intersectionPos:B,geomItem:A.geomItem,componentId:-1,dist:A.dist,geomData:s}}else return null}raycastCluster(e,g,t,I=.01,l=nI){const C=this.__gl;this.__rayCastRenderTarget||(this.__rayCastRenderTarget=new ZI(C,{type:"FLOAT",format:"RGBA",filter:"NEAREST",createDepthTexture:!0,width:3,height:3,numColorChannels:1}),this.__rayCastRenderTargetProjMatrix=new Ee),(this.rayCastDist!=t||this.rayCastArea!=I)&&(this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(I*-.5,I*.5,I*-.5,I*.5,0,t),this.rayCastDist=t,this.rayCastArea=I);const n=[0,0,3,3],F={};F.viewports=[{region:n,viewMatrix:e.inverse().toMat4(),projectionMatrix:this.__rayCastRenderTargetProjMatrix,isOrthographic:!0}],F.cameraMatrix=e.toMat4(),this.__rayCastRenderTarget.bindForWriting(F,!0),C.enable(C.CULL_FACE),C.enable(C.DEPTH_TEST),C.depthFunc(C.LEQUAL),C.depthMask(!0),this.drawSceneGeomData(F,l),C.finish(),this.__rayCastRenderTarget.unbindForWriting(),this.__rayCastRenderTarget.bindForReading();const a=new Float32Array(4*9);C.readPixels(0,0,3,3,C.RGBA,C.FLOAT,a),this.__rayCastRenderTarget.unbindForReading();const U=s=>a[s*4+3]!=0,d=[];for(let s=0;s<9;s++)if(U(s)){const o=a.subarray(s*4,s*4+4),A=Math.round(o[0])&64-1,B=this.getPass(A);if(B){const Q=B.getGeomItemAndDist(o);if(Q){const r=g.start.add(g.dir.scale(Q.dist));d.push({pointerRay:g,intersectionPos:r,geomItem:Q.geomItem,componentId:-1,dist:Q.dist,geomData:o})}}}return d}drawBackground(e){if(this.__glBackgroundMap&&this.__backgroundMapShader&&this.__backgroundMapShaderBinding){if(!this.__glBackgroundMap.isLoaded())return;const g=this.__gl;g.depthMask(!1),this.__backgroundMapShader.bind(e);const t=e.unifs;this.__glBackgroundMap.bindToUniform(e,t.backgroundImage),this.__backgroundMapShaderBinding.bind(e),g.drawQuad()}else this.__glEnvMap&&this.__glEnvMap.draw&&this.__glEnvMap.draw(e)}bindGLRenderer(e){super.bindGLBaseRenderer(e),e.envMap=this.__glEnvMap,e.exposure=this.__exposure,e.gamma=this.__gamma}drawScene(e){this.bindGLRenderer(e),this.__displayEnvironment&&this.drawBackground(e),super.drawScene(e)}}class To extends Xe{constructor(e,g){super();this.drawIdsArray=null,this.drawIdsBuffer=null,this.highlightedIdsArray=null,this.highlightedIdsBuffer=null,this.gl=e,this.glGeom=g,this.id=g?g.getGeom().getId():this.getId(),this.glGeomItems=[],this.glgeomItems_freeIndices=[],this.glgeomItemEventHandlers=[],this.drawIdsArray=null,this.drawIdsBuffer=null,this.drawIdsBufferDirty=!0,this.highlightedIdsArray=null,this.highlightedIdsBuffer=null,this.highlightedIdsBufferDirty=!0,this.visibleItems=[],this.highlightedItems=[]}getGLGeom(){return this.glGeom}getDrawCount(){return this.visibleItems.length}addGLGeomItem(e){let g;if(this.glgeomItems_freeIndices.length>0?g=this.glgeomItems_freeIndices.pop():(g=this.glGeomItems.length,this.glGeomItems.push(null)),e.geomItem.isVisible()){this.visibleItems.push(g);const I=new It(1,this.visibleItems.length);this.emit("drawCountChanged",I)}e.geomItem.isHighlighted()&&(this.highlightedItems.push(g),this.highlightedIdsBufferDirty=!0);const t={};t.highlightChanged=I=>{if(e.geomItem.isHighlighted()){if(this.highlightedItems.includes(g))return;this.highlightedItems.push(g);const l=new It(1,this.highlightedItems.length);this.emit("highlightedCountChanged",l)}else{this.highlightedItems.splice(this.highlightedItems.indexOf(g),1);const l=new It(-1,this.highlightedItems.length);this.emit("highlightedCountChanged",l)}this.highlightedIdsBufferDirty=!0},e.geomItem.on("highlightChanged",t.highlightChanged),t.visibilityChanged=I=>{if(I.visible){this.visibleItems.push(g);const C=new It(1,this.visibleItems.length);this.emit("drawCountChanged",C)}else{this.visibleItems.splice(this.visibleItems.indexOf(g),1);const C=new It(-1,this.visibleItems.length);this.emit("drawCountChanged",C)}this.drawIdsBufferDirty=!0},e.geomItem.on("visibilityChanged",t.visibilityChanged),this.glGeomItems[g]=e,this.glgeomItemEventHandlers[g]=t,this.drawIdsBufferDirty=!0,e.GLGeomItemSet=this}removeGLGeomItem(e){const g=this.glGeomItems.indexOf(e),t=this.glgeomItemEventHandlers[g];if(e.geomItem.off("highlightChanged",t.highlightChanged),e.geomItem.off("visibilityChanged",t.visibilityChanged),this.glGeomItems[g]=null,this.glgeomItemEventHandlers[g]=null,e.GLGeomItemSet=null,this.glgeomItems_freeIndices.push(g),e.geomItem.isVisible()){this.visibleItems.splice(this.visibleItems.indexOf(g),1);const I=new It(-1,this.visibleItems.length);this.emit("drawCountChanged",I)}if(e.geomItem.isHighlighted()){this.highlightedItems.splice(this.highlightedItems.indexOf(g),1);const I=new It(-1,this.highlightedItems.length);this.emit("highlightedCountChanged",I)}this.drawIdsBufferDirty=!0,this.glGeomItems.length==this.glgeomItems_freeIndices.length&&this.destroy()}updateDrawIDsBuffer(){const e=this.gl;if(!e.floatTexturesSupported){this.drawIdsBufferDirty=!1;return}this.drawIdsBuffer&&this.glGeomItems.length!=this.drawIdsArray.length&&(this.gl.deleteBuffer(this.drawIdsBuffer),this.drawIdsBuffer=null),this.drawIdsBuffer||(this.drawIdsBuffer=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this.drawIdsBuffer)),e.bindBuffer(e.ARRAY_BUFFER,this.drawIdsBuffer),e.bufferData(e.ARRAY_BUFFER,this.getDrawIdsArray(),e.STATIC_DRAW),this.drawIdsBufferDirty=!1}getDrawIdsArray(){return this.drawIdsBufferDirty&&((!this.drawIdsArray||this.glGeomItems.length!=this.drawIdsArray.length)&&(this.drawIdsArray=new Float32Array(this.glGeomItems.length)),this.visibleItems.forEach((e,g)=>{this.drawIdsArray[g]=this.glGeomItems[e].getGeomItemId()}),this.drawIdsBufferDirty=!1),this.drawIdsArray}updateHighlightedIDsBuffer(){const e=this.gl;if(!e.floatTexturesSupported){this.highlightedIdsBufferDirty=!1;return}this.highlightedIdsBuffer&&this.glGeomItems.length>this.highlightedIdsArray.length&&(this.gl.deleteBuffer(this.highlightedIdsBuffer),this.highlightedIdsBuffer=null),this.highlightedIdsBuffer||(this.highlightedIdsBuffer=e.createBuffer()),e.bindBuffer(e.ARRAY_BUFFER,this.highlightedIdsBuffer),e.bufferData(e.ARRAY_BUFFER,this.getHighlightedIdsArray(),e.STATIC_DRAW),this.highlightedIdsBufferDirty=!1}getHighlightedIdsArray(){return this.highlightedIdsBufferDirty&&((!this.highlightedIdsArray||this.highlightedItems.length>this.highlightedIdsArray.length)&&(this.highlightedIdsArray=new Float32Array(this.glGeomItems.length)),this.highlightedItems.forEach((e,g)=>{this.highlightedIdsArray[g]=this.glGeomItems[e].getGeomItemId()}),this.highlightedIdsBufferDirty=!1),this.highlightedIdsArray}draw(e){this.visibleItems.length!=0&&(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(),this.__bindAndRender(e,this.visibleItems,this.drawIdsBuffer))}drawHighlighted(e){this.highlightedItems.length!=0&&(this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(),this.__bindAndRender(e,this.highlightedItems,this.highlightedIdsBuffer))}drawGeomData(e){this.visibleItems.length!=0&&(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(),this.__bindAndRender(e,this.visibleItems,this.drawIdsBuffer))}__bindAndRender(e,g,t){const I=this.gl,l=e.unifs;if(e.glGeom!=this.glGeom&&(this.glGeom.bind(e),e.glGeom=this.glGeom),!I.floatTexturesSupported||!I.drawElementsInstanced||!e.supportsInstancing)e.unifs.instancedDraw&&I.uniform1i(e.unifs.instancedDraw.location,0),g.forEach(C=>{this.glGeomItems[C].bind(e),e.bindViewports(l,()=>{this.glGeom.draw(e)})});else{e.unifs.instancedDraw&&I.uniform1i(e.unifs.instancedDraw.location,1);const C=e.attrs.instancedIds.location;I.enableVertexAttribArray(C),I.bindBuffer(I.ARRAY_BUFFER,t),I.vertexAttribPointer(C,1,I.FLOAT,!1,1*4,0),I.vertexAttribDivisor(C,1),e.bindViewports(l,()=>{this.glGeom.drawInstanced(e,g.length)})}}destroy(){this.drawIdsBuffer&&(this.gl.deleteBuffer(this.drawIdsBuffer),this.drawIdsBuffer=null),this.highlightedIdsBuffer&&(this.gl.deleteBuffer(this.highlightedIdsBuffer),this.highlightedIdsBuffer=null),this.emit("destructing")}}class Yo extends Xe{constructor(e,g){super();this.glGeomItemSets={},this.pass=e,this.__gl=e.renderer.gl,this.glMaterial=g,this.glGeomItemSets={},this.drawCount=0;const t=g.getMaterial(),I=l=>{t.off("opacityChanged",I);for(const C in this.glGeomItemSets){const n=this.glGeomItemSets[C];for(const F of n.glGeomItems){const a=F.geomItem;this.pass.removeGeomItem(a),this.pass.renderer.assignTreeItemToGLPass(a)}}};t.on("opacityChanged",I)}getGLMaterial(){return this.glMaterial}addGLGeomItem(e,g){const t=g.getGeom().getId();let I=this.glGeomItemSets[t];I||(I=new To(this.__gl,g),this.addGeomItemSet(I)),I.addGLGeomItem(e)}drawCountChanged(e){this.drawCount+=e.change,this.emit("updated")}__materialChanged(){const e=this.glMaterial.getMaterial();if(!this.pass.checkMaterial(e))for(const g in this.glGeomItemSets){const t=this.glGeomItemSets[g];for(const I of t.glGeomItems){const l=I.geomItem;this.pass.removeGeomItem(l),this.pass.renderer.assignTreeItemToGLPass(l)}}}addGeomItemSet(e){const g=e.getGLGeom().getGeom().getId();this.glGeomItemSets[g]=e;const t=e.on("drawCountChanged",I=>{this.drawCountChanged(I)});e.once("destructing",()=>{e.removeListenerById("drawCountChanged",t),delete this.glGeomItemSets[g],Object.keys(this.glGeomItemSets).length==0&&this.emit("destructing")})}draw(e){if(this.drawCount==0)return;const g=!0;this.glMaterial.bind(e,g);for(const t in this.glGeomItemSets)this.glGeomItemSets[t].draw(e);this.glMaterial.unbind(e)}drawHighlighted(e){this.glMaterial.bind(e,!1);for(const g in this.glGeomItemSets)this.glGeomItemSets[g].drawHighlighted(e);this.glMaterial.unbind(e)}drawGeomData(e){this.glMaterial.bind(e,!1);for(const g in this.glGeomItemSets)this.glGeomItemSets[g].draw(e);this.glMaterial.unbind(e)}}class vo extends Xe{constructor(e,g,t){super();this.gl=e,this.pass=g,this.glShader=t.glShader,this.glgeomdatashader=t.glgeomdatashader,this.glselectedshader=t.glselectedshader,this.glMaterialGeomItemSets=[]}findMaterialGeomItemSets(e){for(const g of this.glMaterialGeomItemSets)if(g.glMaterial==e)return g;return null}addGLGeomItem(e,g,t){let I=this.findMaterialGeomItemSets(t);I||(I=new Yo(this.pass,t),this.addMaterialGeomItemSets(I)),I.addGLGeomItem(e,g)}addMaterialGeomItemSets(e){this.glMaterialGeomItemSets.push(e);const g=()=>{this.emit("updated")},t=()=>{e.off("updated",g),e.off("destructing",t);const I=this.glMaterialGeomItemSets.indexOf(e);this.glMaterialGeomItemSets.splice(I,1),this.glMaterialGeomItemSets.length==0&&this.emit("destructing")};e.on("updated",g),e.on("destructing",t)}removeMaterialGeomItemSets(e){const g=this.glMaterialGeomItemSets.indexOf(e);this.glMaterialGeomItemSets.splice(g,1)}getMaterialGeomItemSets(){return this.glMaterialGeomItemSets}draw(e){const g=this.glShader;if(!!this.glShader.bind(e)){this.pass.renderer.glGeomItemLibrary.bind(e);for(const t of this.glMaterialGeomItemSets)t.draw(e);g.unbind(e)}}drawHighlightedGeoms(e){if(!(!this.glselectedshader||!this.glselectedshader.bind(e,"highlight"))){this.pass.renderer.glGeomItemLibrary.bind(e);for(const g of this.glMaterialGeomItemSets)g.drawHighlighted(e);this.glselectedshader.unbind(e)}}drawGeomData(e){var g;if(!this.glgeomdatashader||!this.glgeomdatashader.bind(e,"geomData"))return;this.pass.renderer.glGeomItemLibrary.bind(e);const t=this.gl,{floatGeomBuffer:I,passId:l,occlusionCulling:C}=e.unifs;I&&t.uniform1i(I.location,e.floatGeomBuffer?1:0),l&&t.uniform1i(l.location,e.passIndex),C&&t.uniform1i(C.location,(g=e.occlusionCulling)!==null&&g!==void 0?g:0);for(const n of this.glMaterialGeomItemSets)n.drawGeomData(e);this.glgeomdatashader.unbind(e)}}var Mo=`
precision highp float;
precision highp int;
#define GLSLIFY 1

import 'imageAtlas.glsl'

uniform sampler2D atlasBillboards;

/* VS Outputs */
varying float v_instanceID;
varying vec2 v_texCoord;
varying float v_alpha;
varying vec4 v_tint;
varying vec3 v_viewPos;

uniform sampler2D instancesTexture;
uniform int instancesTextureSize;

#if defined(DRAW_GEOMDATA)
  uniform int isOrthographic;
  import 'surfaceGeomData.glsl'
#endif // DRAW_GEOMDATA

const int cols_per_instance = 7;

vec4 getHilightColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 6);
}

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  int instanceID = int(v_instanceID);
  vec4 imageColor = texture2D(atlasBillboards, v_texCoord) * v_tint;
  imageColor.a *= v_alpha;
  if(imageColor.a < 0.1)
    discard;

#if defined(DRAW_COLOR)
  fragColor = imageColor;
  // fragColor.r = 1.0;
  // fragColor.a = 1.0;
#elif defined(DRAW_GEOMDATA)
  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_instanceID, 0.0, isOrthographic);
#elif defined(DRAW_HIGHLIGHT)
  fragColor = getHilightColor(instanceID);
  // Skip unhilighting labels.
  if(fragColor.r < 0.001 && fragColor.g < 0.001 && fragColor.b < 0.001)
    discard;
#endif // DRAW_HIGHLIGHT
  
#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,Ho=`
precision highp float;
precision highp int;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 cameraMatrix;

import 'GLSLUtils.glsl'

#ifdef ENABLE_FLOAT_TEXTURES

// A sorted attribute of instance Ids so we draw from back to front.
instancedattribute float instanceIds;

import 'transpose.glsl'
import 'imageAtlas.glsl'

uniform sampler2D atlasBillboards_layout;
uniform vec4 atlasBillboards_desc;

uniform sampler2D instancesTexture;
uniform int instancesTextureSize;
uniform int passId;

const int cols_per_instance = 7;

mat4 getMatrix(sampler2D texture, int textureSize, int index) {
  // Unpack 3 x 4 matix columns into a 4 x 4 matrix.
  vec4 col0 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 0);
  vec4 col1 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 1);
  vec4 col2 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 2);
  mat4 result = mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0));
  return transpose(result);
  // return mat4(1.0);
}

mat4 getModelMatrix(int id) {
  return getMatrix(instancesTexture, instancesTextureSize, id);
}
vec4 getInstanceData(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 3);
}
vec4 getPivot(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 4);
}
vec4 getTintColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 5);
}

#else

uniform vec4 atlasBillboards_desc;

uniform mat4 modelMatrix;
uniform vec2 pivot;
uniform vec4 billboardData;
uniform vec4 tintColor;
uniform vec4 layoutData;

#endif

uniform int inVR;

mat4 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {
  // vec3 rr = vec3(sin(roll), 0.0, cos(roll));
  vec3 rr = vec3(0.0, 0.0, 1.0);
  vec3 ww = normalize(target - origin);
  vec3 uu = normalize(cross(rr, ww));
  vec3 vv = normalize(cross(ww, uu));

  return mat4(vec4(uu, 0.0), vec4(vv, 0.0), vec4(ww, 0.0), vec4(origin, 1.0));
}

float map(float value, float inMin, float inMax, float outMin, float outMax) {
  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);
}

/* VS Outputs */
varying float v_instanceID;
varying vec2 v_texCoord;
varying float v_alpha;
varying vec4 v_tint;
varying vec3 v_viewPos;

void main(void) {

#ifdef ENABLE_FLOAT_TEXTURES

  int instanceID = int(instanceIds);
  v_instanceID = float(instanceID) + 0.25;

  mat4 modelMatrix = getModelMatrix(instanceID);
  vec2 pivot = getPivot(instanceID).xy;
  vec4 billboardData = getInstanceData(instanceID);
  vec4 layoutData = fetchTexel(atlasBillboards_layout, int(atlasBillboards_desc.z), int(billboardData.z));
  v_tint = getTintColor(instanceID);

#else

  v_tint = tintColor;

#endif

  vec2 quadVertex = getQuadVertexPositionFromID();
  
  vec2 pos = quadVertex + vec2(0.5, 0.0) - pivot;
  v_texCoord = vec2(quadVertex.x, -quadVertex.y) + 0.5;
  v_alpha = billboardData.w;
  v_texCoord *= layoutData.zw;
  v_texCoord += layoutData.xy;

  float scl = billboardData.x;
  float width = layoutData.z * atlasBillboards_desc.x * scl;
  float height = layoutData.w * atlasBillboards_desc.y * scl;
  int flags = int(billboardData.y);

  // Use cross platform bit flags methods
  bool alignedToCamera = testFlag(flags, 4); // flag = 1<<2
  bool drawOnTop = testFlag(flags, 8); // flag = 1 << 3
  bool fixedSizeOnscreen = testFlag(flags, 16); // flag = 1 << 4

  mat4 modelViewMatrix = viewMatrix * modelMatrix;

  // Note: items in front of the camera will have a negative value here.
  float sc = 1.0;
  if (fixedSizeOnscreen) {
    sc = -modelViewMatrix[3][2];
    
    if (inVR == 1) {
      // During XR sessions, there is a scaling applied to the view matrix
      // which causes a distortion to the line width. We extract that scale here
      // and use to correct the distortion.
      // See also: FatPointsShader
      vec3 viewZ = modelViewMatrix[2].xyz;
      float viewScale = length(viewZ);
      sc /= viewScale;
    }
  }
  
  mat4 modelViewProjectionMatrix;
  if (alignedToCamera) {
    if (inVR == 0) {
      gl_Position = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);
      gl_Position += vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 0.0);
      v_viewPos = gl_Position.xyz;
      gl_Position = projectionMatrix * gl_Position;
    } else {
      vec3 cameraPos = vec3(cameraMatrix[3][0], cameraMatrix[3][1], cameraMatrix[3][2]);
      vec3 billboardPos = vec3(modelMatrix[3][0], modelMatrix[3][1], modelMatrix[3][2]);
      mat4 lookAt = calcLookAtMatrix(billboardPos, cameraPos, 0.0);
      mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * lookAt;
      gl_Position = modelViewProjectionMatrix * vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 1.0);
      v_viewPos = (modelViewMatrix * vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 1.0)).xyz;
    }
  }
  else {
    modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;
    gl_Position = modelViewProjectionMatrix * vec4(pos.x * width, (pos.y + 0.5) * height, 0.0, 1.0);
    v_viewPos = (modelViewMatrix * vec4(pos.x * width, (pos.y + 0.5) * height, 0.0, 1.0)).xyz;
  }

  // Use cross platform bit flags methods
  if (drawOnTop) {
    gl_Position.z = mix(gl_Position.z, -gl_Position.w, 0.5);
  }
}
`;class xo extends Pe{constructor(e){super(e,"BillboardShader");this.setShaderStage("VERTEX_SHADER",Ho),this.setShaderStage("FRAGMENT_SHADER",Mo)}}const wo=new Ve("EnvProjectionShader_template");wo.addParameter(new kI("projectionCenter",new b(0,0,1.7)));var Do=`
precision highp float;
#define GLSLIFY 1

uniform color BaseColor;
uniform mat4 cameraMatrix;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

/* VS Outputs */
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
varying vec2 v_texCoord;
varying float v_geomItemId;
varying vec4 v_geomItemData;
varying float v_drawItemID;
varying vec3 v_worldPos;

import 'GLSLUtils.glsl'
import 'drawItemTexture.glsl'
import 'cutaways.glsl'
import 'GLSLBits.glsl'

uniform int floatGeomBuffer;
uniform int passId;

#if defined(DRAW_HIGHLIGHT)
  import 'surfaceHighlight.glsl'
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif
  float treeItemOpacity = v_geomItemData.y;

#if defined(DRAW_COLOR)
  int debugLevel = 0;
  if (debugLevel == 0) {

    vec3 viewVector = mat3(cameraMatrix) * normalize(-v_viewPos);
    vec3 normal = mat3(cameraMatrix) * v_viewNormal;
    float NdotV = dot(normalize(normal), normalize(viewVector));

    // Modulate the lighting using the texture coord so the line looks round.
    NdotV *= cos((v_texCoord.x - 0.5) * 2.0);

    vec4 color = BaseColor * NdotV;
    fragColor = vec4(color.rgb, BaseColor.a * treeItemOpacity);
  }
  else {
    fragColor = vec4(v_texCoord.x, 0.0, 0.0, 1.0);
  }
#elif defined(DRAW_GEOMDATA)
  int geomItemId = int(v_geomItemId + 0.5);
  int flags = int(v_geomItemData.x + 0.5);

 // Cutaways
  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {
    vec4 cutAwayData  = getCutaway(geomItemId);
    vec3 planeNormal = cutAwayData.xyz;
    float planeDist = cutAwayData.w;
    if (cutaway(v_worldPos, planeNormal, planeDist)) {
      discard;
      return;
    }
  }
  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {
    discard;
    return;
  }

  float dist = length(v_viewPos);

  if (floatGeomBuffer != 0) {
    fragColor.r = float(passId); 
    fragColor.g = float(v_drawItemID);
    fragColor.b = 0.0;// TODO: store poly-id or something.
    fragColor.a = dist;
  }
#elif defined(DRAW_HIGHLIGHT)
  fragColor = setFragColor_highlight(v_geomItemId);
#endif

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,Ko=`
precision highp float;
#define GLSLIFY 1

instancedattribute vec2 segmentIndices;
attribute float vertexIDs;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

uniform int geomItemId;
int getGeomItemId() {
  return geomItemId;
}

uniform sampler2D positionsTexture;
uniform int positionsTextureSize;

uniform float LineThickness;
uniform float Overlay;

import 'calcFatLinesViewPos.glsl'

varying vec3 v_viewPos;
varying vec3 v_viewNormal;
varying vec2 v_texCoord;

varying float v_geomItemId;
varying vec4 v_geomItemData;
varying float v_drawItemID;
varying vec3 v_worldPos;

void main(void) {

  int geomItemId = getGeomItemId();
  v_geomItemId = float(geomItemId);
  v_geomItemData = getInstanceData(geomItemId);

  int vertexID = int(vertexIDs);

  mat4 modelMatrix = getModelMatrix(geomItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  vec3 pos;

  #if defined(DRAW_COLOR)
    v_viewPos       = calcFatLinesViewPos(vertexID, modelViewMatrix, v_viewNormal, v_texCoord, pos);
  #elif defined(DRAW_GEOMDATA)
    vec3  viewNormal;
    vec2  texCoord;
    v_viewPos       = calcFatLinesViewPos(vertexID, modelViewMatrix, viewNormal, texCoord, pos);
    v_drawItemID = float(getGeomItemId());
    v_worldPos      = (modelMatrix * vec4(pos, 1.0)).xyz;
  #endif

  gl_Position     = projectionMatrix * vec4(v_viewPos, 1.0);
  if (Overlay > 0.0) {
    gl_Position.z = mix(gl_Position.z, -gl_Position.w, Overlay);
  }

}
`;class Lo extends Pe{constructor(e){super(e,"FatLinesShader");this.setShaderStage("VERTEX_SHADER",Ko),this.setShaderStage("FRAGMENT_SHADER",Do)}bind(e,g){return super.bind(e,g)?(e.supportsInstancing=!1,!0):!1}static supportsInstancing(){return!1}static getMaterialTemplate(){return zo}}const zo=new wl("FatLinesShader_template");S.register("FatLinesShader",Lo);var _o=`
precision highp float;
#define GLSLIFY 1

attribute vec3 positions;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

import 'GLSLUtils.glsl'

import 'geomItemId.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

#ifdef ENABLE_MULTI_DRAW
import 'materialparams.glsl'
#else
uniform float Overlay;
#endif

/* VS Outputs */
varying vec4 v_drawItemIds;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
varying vec3 v_worldPos;

void main(void) {
  v_drawItemIds = getDrawItemIds();
  int geomItemId = int(v_drawItemIds.x + 0.5);
  v_geomItemData  = getInstanceData(geomItemId);

  mat4 modelMatrix = getModelMatrix(geomItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;

  vec4 pos = vec4(positions, 1.);
  vec4 viewPos = (modelViewMatrix * pos);
  gl_Position = projectionMatrix * viewPos;

  v_viewPos = viewPos.xyz;
#ifdef ENABLE_TEXTURES
  v_textureCoord = texCoords;
  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y
#endif

  //////////////////////////////////////////////
  // Overlay

#ifdef ENABLE_MULTI_DRAW
  vec2 materialCoords = v_geomItemData.zw;
  vec4 materialValue1 = getMaterialValue(materialCoords, 1);
  float overlay = materialValue1.x;
#else
  float overlay = Overlay;
#endif

  gl_Position.z = mix(gl_Position.z, -gl_Position.w, overlay);

  //////////////////////////////////////////////
  
  v_worldPos      = (modelMatrix * pos).xyz;
}
`,Oo=`
precision highp float;
#define GLSLIFY 1

import 'GLSLUtils.glsl'
import 'drawItemTexture.glsl'
import 'cutaways.glsl'
import 'gamma.glsl'
import 'materialparams.glsl'

#ifndef ENABLE_MULTI_DRAW

uniform color BaseColor;

#ifdef ENABLE_TEXTURES
uniform sampler2D BaseColorTex;
uniform int BaseColorTexType;
#endif

#endif // ENABLE_MULTI_DRAW

/* VS Outputs */
varying vec4 v_drawItemIds;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
varying vec3 v_worldPos;

#ifdef ENABLE_ES3
out vec4 fragColor;
#endif

#if defined(DRAW_GEOMDATA)
  uniform int isOrthographic;
  import 'surfaceGeomData.glsl'
#elif defined(DRAW_HIGHLIGHT)
  import 'surfaceHighlight.glsl'
#endif // DRAW_HIGHLIGHT

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  int geomItemId = int(v_drawItemIds.x + 0.5);
  int flags = int(v_geomItemData.x + 0.5);
  float treeItemOpacity = v_geomItemData.y;

  // Cutaways
  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) 
  {
    vec4 cutAwayData   = getCutaway(geomItemId);
    vec3 planeNormal = cutAwayData.xyz;
    float planeDist = cutAwayData.w;
    if (cutaway(v_worldPos, planeNormal, planeDist)) {
      discard;
      return;
    }
  }

  //////////////////////////////////////////////
  // Material
#ifdef ENABLE_MULTI_DRAW

  vec2 materialCoords = v_geomItemData.zw;
  if (v_drawItemIds.z > 0.5) {
    materialCoords.x = v_drawItemIds.z;
  }
  vec4 baseColor = getMaterialValue(materialCoords, 0);

#else // ENABLE_MULTI_DRAW

#ifndef ENABLE_TEXTURES
  vec4 baseColor = BaseColor;
#else
  vec4 baseColor = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);
#endif // ENABLE_TEXTURES

#endif // ENABLE_MULTI_DRAW

  baseColor.a *= treeItemOpacity;
  if (baseColor.a < 0.001) discard;

#if defined(DRAW_COLOR)
  // Cutaways
  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {
    if (!gl_FrontFacing) {
#ifdef ENABLE_ES3
      fragColor = cutColor;
#else
      gl_FragColor = cutColor;
#endif
      return;
    }
  }

  //////////////////////////////////////////////
  fragColor = baseColor;

#ifdef ENABLE_INLINE_GAMMACORRECTION
  fragColor.rgb = toGamma(fragColor.rgb);
#endif

#elif defined(DRAW_GEOMDATA)

  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {
    discard;
    return;
  }
  if (occlusionCulling != 0) {
    // Transparent geoms do not render to the occlusion buffer
    if (testFlag(flags, GEOMITEM_TRANSPARENT)) {
      discard;
      return;
    }
  }
  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_drawItemIds.x, v_drawItemIds.y, isOrthographic);
#elif defined(DRAW_HIGHLIGHT)
  fragColor = setFragColor_highlight(v_drawItemIds.x);
#endif // DRAW_HIGHLIGHT

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`;class Po extends Pe{constructor(e){super(e,"FlatSurfaceShader");this.setShaderStage("VERTEX_SHADER",_o),this.setShaderStage("FRAGMENT_SHADER",Oo)}bind(e,g){super.bind(e,g);const t=this.__gl;return t.disable(t.CULL_FACE),!0}unbind(e){super.unbind(e);const g=this.__gl;return g.enable(g.CULL_FACE),!0}static getPackedMaterialData(e){const g=new Float32Array(8),t=e.getParameter("BaseColor");let I;t instanceof ye&&t.colorSpace==Bg.Gamma?I=t.value.toLinear():I=t.value,g[0]=I.r,g[1]=I.g,g[2]=I.b,g[3]=I.a;const l=e.getParameter("Overlay");return l&&(g[4]=l.getValue()),g}static getMaterialTemplate(){return jo}}const jo=new xI("FlatSurfaceShader_template");S.register("FlatSurfaceShader",Po);var qo=`
precision highp float;
#define GLSLIFY 1

attribute vec3 positions;
attribute vec3 positionsNext;

import 'GLSLUtils.glsl'
import 'geomItemId.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

#ifdef ENABLE_MULTI_DRAW
import 'materialparams.glsl'
#else
uniform float Overlay;
#endif

/* VS Outputs */
varying float v_geomItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_worldPos;
varying vec3 v_nextVertexDist;

void main(void) {
  int geomItemId = getGeomItemId();
  v_geomItemId = float(geomItemId);
  v_geomItemData  = getInstanceData(geomItemId);

  mat4 modelMatrix = getModelMatrix(geomItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);
  vec4 viewPosNext = modelViewMatrix * vec4(positionsNext, 1.0);

#ifdef ENABLE_ES3
  float nextVertexDist = length(viewPosNext.xyz - viewPos.xyz);
  if (imod(gl_VertexID, 2) == 0) {
    v_nextVertexDist.x = nextVertexDist;
    v_nextVertexDist.y = 0.0;
  } else {
    v_nextVertexDist.x = 0.0;
    v_nextVertexDist.y = nextVertexDist;
  }
  v_nextVertexDist.z = float(gl_VertexID);
#endif

  v_viewPos = viewPos.xyz;
  gl_Position = projectionMatrix * viewPos;
    

  //////////////////////////////////////////////
  // Overlay

#ifdef ENABLE_MULTI_DRAW
  vec2 materialCoords = v_geomItemData.zw;
  vec4 materialValue1 = getMaterialValue(materialCoords, 1);
  float overlay = materialValue1.y;
#else
  float overlay = Overlay;
#endif

#if defined(DRAW_GEOMDATA)
  gl_Position.z = mix(gl_Position.z, -gl_Position.w, mix(overlay, 1.0, 0.0001));
#else
  gl_Position.z = mix(gl_Position.z, -gl_Position.w, overlay);
#endif

  //////////////////////////////////////////////
  
  
  vec4 pos = vec4(positions, 1.);
  v_worldPos      = (modelMatrix * pos).xyz;
}
`,$o=`
precision highp float;
#define GLSLIFY 1

import 'GLSLUtils.glsl'
import 'drawItemTexture.glsl'
import 'cutaways.glsl'
import 'materialparams.glsl'

uniform int occluded;

#ifndef ENABLE_MULTI_DRAW

uniform color BaseColor;
uniform float Opacity;

uniform float StippleScale;
uniform float StippleValue;
uniform float OccludedStippleValue;

#endif // ENABLE_MULTI_DRAW

#if defined(DRAW_GEOMDATA)

uniform int isOrthographic;

import 'surfaceGeomData.glsl'

#elif defined(DRAW_HIGHLIGHT)

#ifdef ENABLE_FLOAT_TEXTURES
vec4 getHighlightColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);
}
#else // ENABLE_FLOAT_TEXTURES

uniform vec4 highlightColor;

vec4 getHighlightColor() {
  return highlightColor;
}

#endif // ENABLE_FLOAT_TEXTURES

#endif // DRAW_HIGHLIGHT

/* VS Outputs */
varying float v_geomItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_worldPos;
varying vec3 v_nextVertexDist;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  int geomItemId = int(v_geomItemId + 0.5);
  int flags = int(v_geomItemData.x + 0.5);
  float treeItemOpacity = v_geomItemData.y;

  // Cutaways
  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) 
  {
    vec4 cutAwayData   = getCutaway(geomItemId);
    vec3 planeNormal = cutAwayData.xyz;
    float planeDist = cutAwayData.w;
    if (cutaway(v_worldPos, planeNormal, planeDist)) {
      discard;
      return;
    }
  }

  //////////////////////////////////////////////
  // Material

#ifdef ENABLE_MULTI_DRAW

  vec2 materialCoords = v_geomItemData.zw;
  vec4 BaseColor = getMaterialValue(materialCoords, 0);
  vec4 matValue1 = getMaterialValue(materialCoords, 1);
  vec4 matValue2 = getMaterialValue(materialCoords, 2);
  float Opacity  = matValue1.r;

  float StippleScale = matValue1.b;
  float StippleValue = matValue1.a;
  float OccludedStippleValue = matValue2.r;
#endif // ENABLE_MULTI_DRAW

  ///////////////////
  // Stippling
  float stippleValue = occluded == 0 ? StippleValue : OccludedStippleValue;
#ifdef ENABLE_ES3 // No stippling < es3 
  if (stippleValue > 0.0) {
    // Note: a value of 0.0, means no stippling (solid). A value of 1.0 means invisible
    float dist = -v_viewPos.z * StippleScale;
    float nextVertexDist = imod(int(floor(v_nextVertexDist.z)), 2) == 0 ? v_nextVertexDist.x : v_nextVertexDist.y;
    if (mod(nextVertexDist / dist, 1.0) < stippleValue) {
      discard;
      return;
    }
  }
#endif

  //////////////////////////////////////////////
  // Color
#if defined(DRAW_COLOR)

  fragColor = BaseColor;
  fragColor.a *= Opacity * treeItemOpacity;

  
#ifndef ENABLE_ES3
  if (occluded == 1) fragColor.a *= 1.0 - stippleValue;
#endif

  //////////////////////////////////////////////
  // GeomData
#elif defined(DRAW_GEOMDATA)
  // Cutaways
  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {
    discard;
    return;
  }
  
  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_geomItemId, 0.0, isOrthographic);
  
  //////////////////////////////////////////////
  // Highlight
#elif defined(DRAW_HIGHLIGHT)
  
  fragColor = getHighlightColor(geomItemId);

#endif // DRAW_HIGHLIGHT

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`;class eA extends Pe{constructor(e){super(e,"LinesShader");this.setShaderStage("VERTEX_SHADER",qo),this.setShaderStage("FRAGMENT_SHADER",$o)}static getPackedMaterialData(e){const g=new Float32Array(12),t=e.getParameter("BaseColor");let I;return t instanceof ye&&t.colorSpace==Bg.Gamma?I=t.value.toLinear():I=t.value,g[0]=I.r,g[1]=I.g,g[2]=I.b,g[3]=I.a,g[4]=e.getParameter("Opacity").value,g[5]=e.getParameter("Overlay").value,g[6]=e.getParameter("StippleScale").value,g[7]=e.getParameter("StippleValue").value,g[8]=e.getParameter("OccludedStippleValue").value,g}static getMaterialTemplate(){return gA}}const gA=new Lt("LinesShader_template");S.register("LinesShader",eA);var tA=`
precision highp float;
#define GLSLIFY 1

#ifndef ENABLE_MULTI_DRAW

uniform color BaseColor;

#endif

import 'GLSLUtils.glsl'
import 'drawItemTexture.glsl'
import 'cutaways.glsl'
import 'materialparams.glsl'

#if defined(DRAW_GEOMDATA)

uniform int floatGeomBuffer;
uniform int passId;

import 'GLSLBits.glsl'

#elif defined(DRAW_HIGHLIGHT)

#ifdef ENABLE_FLOAT_TEXTURES
vec4 getHighlightColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);
}
#else // ENABLE_FLOAT_TEXTURES

uniform vec4 highlightColor;

vec4 getHighlightColor() {
  return highlightColor;
}

#endif // ENABLE_FLOAT_TEXTURES

#endif // DRAW_HIGHLIGHT

/* VS Outputs */
varying float v_geomItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
/* VS Outputs */

#ifdef ENABLE_ES3
out vec4 fragColor;
#endif

void main(void) {

#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  //////////////////////////////////////////////
  // Color
#if defined(DRAW_COLOR)

#ifdef ENABLE_MULTI_DRAW

  vec2 materialCoords = v_geomItemData.zw;
  vec4 baseColor = getMaterialValue(materialCoords, 0);
  vec4 matValue1 = getMaterialValue(materialCoords, 1);
  float pointSize       = baseColor.a * matValue1.r;
  float overlay      = matValue1.g;

#else // ENABLE_MULTI_DRAW

  vec4 baseColor = BaseColor;

#endif // ENABLE_MULTI_DRAW

  fragColor = baseColor;

  //////////////////////////////////////////////
  // GeomData
#elif defined(DRAW_GEOMDATA)

  float viewDist = length(v_viewPos);

  if (floatGeomBuffer != 0) {
    fragColor.r = float(passId); 
    fragColor.g = float(v_geomItemId);
    fragColor.b = 0.0;// TODO: store poly-id or something.
    fragColor.a = viewDist;
  }
  else {
    ///////////////////////////////////
    // UInt8 buffer
    fragColor.r = mod(v_geomItemId, 256.) / 256.;
    fragColor.g = (floor(v_geomItemId / 256.) + (float(passId) * 64.)) / 256.;

    // encode the dist as a 16 bit float
    vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);
    fragColor.b = float16bits.x;
    fragColor.a = float16bits.y;
  }

  //////////////////////////////////////////////
  // Highlight
#elif defined(DRAW_HIGHLIGHT)
  
  int geomItemId = int(v_geomItemId + 0.5);
  fragColor = getHighlightColor(geomItemId);

#endif // DRAW_HIGHLIGHT

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,IA=`
precision highp float;
#define GLSLIFY 1

attribute vec3 positions;

import 'GLSLUtils.glsl'
import 'geomItemId.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

#ifdef ENABLE_MULTI_DRAW
import 'materialparams.glsl'
#else
uniform float PointSize;
uniform float Overlay;
#endif

/* VS Outputs */
varying float v_geomItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;

void main(void) {
  int geomItemId = getGeomItemId();
  v_geomItemId = float(geomItemId);
  v_geomItemData  = getInstanceData(geomItemId);

  mat4 modelMatrix = getModelMatrix(geomItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  
  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);
  gl_Position = projectionMatrix * viewPos;
  

  //////////////////////////////////////////////
  // Material
#ifdef ENABLE_MULTI_DRAW
  vec2 materialCoords = v_geomItemData.zw;
  vec4 materialValue1 = getMaterialValue(materialCoords, 1);
  int maintainScreenSize = int(materialValue1.x + 0.5);
  float pointSize = materialValue1.x;
  float overlay = materialValue1.y;
#else
  float pointSize = PointSize;
  float overlay = Overlay;
#endif
  //////////////////////////////////////////////

  // Note: as of 22/01/2021 gl_PointSize has stopped working again...
  gl_PointSize = pointSize;

#if defined(DRAW_GEOMDATA)
  // Make the geom data point size at least 8 pixels across, else its impossible to hit.
  gl_PointSize = max(8.0, pointSize);
#endif
  gl_Position.z = mix(gl_Position.z, -gl_Position.w, overlay);

  
  v_viewPos = -viewPos.xyz;
}
`;class lA extends Pe{constructor(e){super(e,"PointsShader");this.setShaderStage("VERTEX_SHADER",IA),this.setShaderStage("FRAGMENT_SHADER",tA)}static getPackedMaterialData(e){const g=new Float32Array(12),t=e.getParameter("BaseColor");let I;return t instanceof ye&&t.colorSpace==Bg.Gamma?I=t.value.toLinear():I=t.value,g[0]=I.r,g[1]=I.g,g[2]=I.b,g[3]=I.a,g[4]=e.getParameter("PointSize").value,g[5]=e.getParameter("Overlay").value,g}static getMaterialTemplate(){return CA}}const CA=new Kl("PointsShader_template");S.register("PointsShader",lA);var iA=`
precision highp float;
#define GLSLIFY 1

instancedattribute vec3 positions;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

import 'GLSLUtils.glsl' 
import 'inverse.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'
import 'quadVertexFromID.glsl'

uniform int geomItemId;
int getGeomItemId() {
  return geomItemId;
}

uniform float PointSize;
uniform float Overlay;

/* VS Outputs */
varying vec2 v_texCoord;
varying vec3 v_viewPos;
varying float v_geomItemId;

void main(void) {
  int geomItemId = getGeomItemId();
  vec2 quadPointPos = getQuadVertexPositionFromID();
  v_texCoord = quadPointPos + 0.5;

  mat4 modelMatrix = getModelMatrix(geomItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  
  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);

  // During XR sessions, there is a scaling applied to the view matrix
  // which causes a distortion to the line width. We extract that scale here
  // and use to correct the distortion.
  // See also: FatLinesShader
  vec3 viewZ = modelViewMatrix[2].xyz;
  float viewScale = length(viewZ);
  viewPos += vec4(vec3(quadPointPos, 0.0) * PointSize * viewScale, 0.);

  // Generate a quad which is 0.5 * PointSize closer towards
  // us. This allows points to be visualized even if snug on 
  // a surface. (else they get fully clipped)
  viewPos.z += 0.5 * PointSize;

  v_geomItemId = float(getGeomItemId());
  v_viewPos = -viewPos.xyz;
  
  gl_Position = projectionMatrix * viewPos;
  if (Overlay > 0.0) {
    gl_Position.z = mix(gl_Position.z, -gl_Position.w, Overlay);
  }
}
`,nA=`
precision highp float;
#define GLSLIFY 1

import 'constants.glsl'

uniform color BaseColor;
uniform float Rounded;
uniform float BorderWidth;

/* VS Outputs */
varying vec2 v_texCoord;
varying vec3 v_viewPos;
varying float v_geomItemId;

#ifdef ENABLE_ES3
out vec4 fragColor;
#endif

#if defined(DRAW_GEOMDATA)
  uniform int isOrthographic;
  import 'surfaceGeomData.glsl'
#elif defined(DRAW_HIGHLIGHT)
  import 'surfaceHighlight.glsl'
#endif // DRAW_HIGHLIGHT

void main(void) {

#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

float dist = length(v_texCoord - 0.5);
if (dist > 0.5)
  discard;

#if defined(DRAW_COLOR)

  if (dist > 0.5 - (BorderWidth * 0.5))
    fragColor = vec4(0.,0.,0.,1.);
  else {
    // Modulate the lighting using the texture coord so the point looks round.
    float NdotV = cos(dist * PI);

    fragColor = BaseColor * mix(1.0, NdotV, Rounded);
  }

#elif defined(DRAW_GEOMDATA)
  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_geomItemId, 0.0, isOrthographic);
#elif defined(DRAW_HIGHLIGHT)
  fragColor = setFragColor_highlight(v_geomItemId);
#endif // DRAW_HIGHLIGHT

  

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`;class aA extends Pe{constructor(e){super(e,"FatPointsShader");this.setShaderStage("VERTEX_SHADER",iA),this.setShaderStage("FRAGMENT_SHADER",nA)}bind(e,g){return super.bind(e,g)?(e.supportsInstancing=!1,!0):!1}static supportsInstancing(){return!1}static getMaterialTemplate(){return FA}}const FA=new Dl("FatPointsShader_template");S.register("FatPointsShader",aA);var UA=`precision highp float;
#define GLSLIFY 1
#ifdef ENABLE_MULTI_DRAW
// #define DEBUG_GEOM_ID
#endif

import 'GLSLUtils.glsl'
import 'drawItemTexture.glsl'
import 'cutaways.glsl'
import 'gamma.glsl'
import 'materialparams.glsl'

#ifdef DEBUG_GEOM_ID
import 'debugColors.glsl'
#endif

/* VS Outputs */
varying vec4 v_drawItemIds;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
varying vec3 v_worldPos;
/* VS Outputs */

uniform mat4 cameraMatrix;
uniform int isOrthographic;

#ifndef ENABLE_MULTI_DRAW

uniform color BaseColor;
uniform float Opacity;
uniform float EmissiveStrength;

#ifdef ENABLE_TEXTURES
uniform sampler2D BaseColorTex;
uniform int BaseColorTexType;
uniform sampler2D OpacityTex;
uniform int OpacityTexType;
uniform sampler2D EmissiveStrengthTex;
uniform int EmissiveStrengthTexType;
#endif // ENABLE_TEXTURES

#endif // ENABLE_MULTI_DRAW

import 'computeViewNormal.glsl'
  

#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif

#if defined(DRAW_GEOMDATA)
  import 'surfaceGeomData.glsl'
#elif defined(DRAW_HIGHLIGHT)
  import 'surfaceHighlight.glsl'
#endif // DRAW_HIGHLIGHT

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif
  int geomItemId = int(v_drawItemIds.x + 0.5);
  int elemId = int(v_drawItemIds.y + 0.5);
  int perFaceMaterialId = int(v_drawItemIds.z);
  int flags = int(v_geomItemData.x + 0.5);
  float treeItemOpacity = v_geomItemData.y;

  // Cutaways
  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) 
  {
    vec4 cutAwayData   = getCutaway(geomItemId);
    vec3 planeNormal = cutAwayData.xyz;
    float planeDist = cutAwayData.w;
    if (cutaway(v_worldPos, planeNormal, planeDist)) {
      discard;
      return;
    }
  }

#if defined(DRAW_COLOR)
  // Cutaways
  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) 
  {
    if (!gl_FrontFacing) {
#ifdef ENABLE_ES3
      fragColor = cutColor;
#else
      gl_FragColor = cutColor;
#endif
      return;
    }
  }

  //////////////////////////////////////////////
  // Normals
  
  vec3 viewNormal;
  if (length(v_viewNormal) < 0.1) {
    viewNormal = computeViewNormal(v_viewPos);
  } else {
    viewNormal = normalize(v_viewNormal);
  }
  vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);
  
  vec3 viewVector;
  if (isOrthographic == 0)
    viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));
  else 
    viewVector = vec3(-cameraMatrix[2][0], -cameraMatrix[2][1], -cameraMatrix[2][2]);
  
  //////////////////////////////////////////////
  // Material

#ifdef ENABLE_MULTI_DRAW

  vec2 materialCoords = v_geomItemData.zw;
  if (v_drawItemIds.z > 0.5) {
    materialCoords.x = v_drawItemIds.z;
  }
  vec4 baseColor      = getMaterialValue(materialCoords, 0);
  vec4 matValue1      = getMaterialValue(materialCoords, 1);
  float opacity       = baseColor.a * matValue1.r;
  float emission      = matValue1.g;

#else // ENABLE_MULTI_DRAW

#ifndef ENABLE_TEXTURES
  vec4 baseColor      = BaseColor;
  float emission      = EmissiveStrength;
  float opacity       = baseColor.a * Opacity;
#else
  vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);
  float opacity       = baseColor.a * getLuminanceParamValue(Opacity, OpacityTex, OpacityTexType, v_textureCoord) * treeItemOpacity;
  float emission      = getLuminanceParamValue(EmissiveStrength, EmissiveStrengthTex, EmissiveStrengthTexType, v_textureCoord);
#endif

#endif // ENABLE_MULTI_DRAW

  // Hacky simple irradiance. 
  float ndotv = dot(normal, viewVector);
  if (ndotv < 0.0) {
    normal = -normal;
    ndotv = dot(normal, viewVector);

    // Note: these 2 lines can be used to debug inverted meshes.
    //baseColor = vec4(1.0, 0.0, 0.0, 1.0);
    //ndotv = 1.0;
  }

  fragColor = vec4((ndotv * baseColor.rgb) + (emission * baseColor.rgb), opacity);

  // Note: the 'treeItemOpacity' is not an input to the lighting, 
  // as we want to also blend off the specular reflections to make an object
  // fade away to nothing. (not become a transparent glass object).
  fragColor.a *= treeItemOpacity;

#ifdef DEBUG_GEOM_ID
  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {
    discard;
    return;
  }

  // ///////////////////////
  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)
  float geomId = v_geomItemData.w;
  fragColor.rgb = getDebugColor(geomId);
  // ///////////////////////
#endif

#ifdef ENABLE_INLINE_GAMMACORRECTION
  fragColor.rgb = toGamma(fragColor.rgb);
#endif

#elif defined(DRAW_GEOMDATA)

  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {
    discard;
    return;
  }
  if (occlusionCulling != 0) {
    // Transparent geoms do not render to the occlusion buffer
    if (testFlag(flags, GEOMITEM_TRANSPARENT)) {
      discard;
      return;
    }
  }
  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_drawItemIds.x, v_drawItemIds.y, isOrthographic);
#elif defined(DRAW_HIGHLIGHT)
  fragColor = setFragColor_highlight(v_drawItemIds.x);
#endif // DRAW_HIGHLIGHT

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}`,dA=`precision highp float;
#define GLSLIFY 1

attribute vec3 positions;
attribute vec3 normals;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

import 'GLSLUtils.glsl'
import 'transpose.glsl'
import 'inverse.glsl'
import 'geomItemId.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

/* VS Outputs */
varying vec4 v_drawItemIds;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
varying vec3 v_worldPos;

void main(void) {
  v_drawItemIds = getDrawItemIds();
  int geomItemId = int(v_drawItemIds.x + 0.5);
  v_geomItemData  = getInstanceData(geomItemId);

  mat4 modelMatrix = getModelMatrix(geomItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;

  vec4 pos = vec4(positions, 1.);
  vec4 viewPos    = modelViewMatrix * pos;
  gl_Position     = projectionMatrix * viewPos;

  mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));
  v_viewPos       = -viewPos.xyz;
  v_viewNormal    = normalMatrix * normals;

#ifdef ENABLE_TEXTURES
  v_textureCoord  = texCoords;
  // v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y
#endif

  v_worldPos      = (modelMatrix * pos).xyz;
}
`;class sA extends Pe{constructor(e){super(e,"SimpleSurfaceShader");this.setShaderStage("VERTEX_SHADER",dA),this.setShaderStage("FRAGMENT_SHADER",UA)}static getPackedMaterialData(e){const g=new Float32Array(8),t=e.getParameter("BaseColor");let I;return t instanceof ye&&t.colorSpace==Bg.Gamma?I=t.value.toLinear():I=t.value,g[0]=I.r,g[1]=I.g,g[2]=I.b,g[3]=I.a,g[4]=e.getParameter("Opacity").value,g[5]=e.getParameter("EmissiveStrength").value,g}static getMaterialTemplate(){return oA}}const oA=new zl("SimpleSurfaceShader_template");S.register("SimpleSurfaceShader",sA);var AA=`
precision highp float;
precision highp int;
#define GLSLIFY 1

attribute vec3 positions;
attribute vec3 normals;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

// Now that we render multiple types of geometry from a single shader
// we need to know what kind of geometry it is...
uniform int geomType;

// should be imported by bottom 3
import 'GLSLUtils.glsl'
import 'transpose.glsl'
import 'inverse.glsl'

import 'geomItemId.glsl'
import 'geomType.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

/* VS Outputs */
varying vec4 v_drawItemIds;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
varying vec3 v_worldPos;
/* VS Outputs */

#if defined(DRAW_COLOR)
#elif defined(DRAW_GEOMDATA)
#elif defined(DRAW_HIGHLIGHT)
#endif // DRAW_HIGHLIGHT

void main(void) {

  v_drawItemIds = getDrawItemIds();
  int geomItemId = int(v_drawItemIds.x + 0.5);
  v_geomItemData = getInstanceData(geomItemId);
  mat4 modelMatrix = getModelMatrix(geomItemId);

  vec4 pos = vec4(positions, 1.);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  vec4 viewPos    = modelViewMatrix * pos;
  gl_Position     = projectionMatrix * viewPos;
  v_viewPos = -viewPos.xyz;
  v_worldPos      = (modelMatrix * pos).xyz;

  mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));
  v_viewPos       = -viewPos.xyz;
  v_viewNormal    = normalMatrix * normals;
  
  // offset slightly the lines and points to make them clearly defined.
  // This ensures that lines drawn over surfaces are solid and not clipped
  // at all by the surface.
  if (geomType == LINES) { // start 'LINES'
    float overlay = 0.00001;
    gl_Position.z = mix(gl_Position.z, -gl_Position.w, overlay);
  } // end 'LINES'
  else if (geomType == POINTS) { // start 'POINTS'
    float overlay = 0.00003;
    gl_Position.z = mix(gl_Position.z, -gl_Position.w, overlay);
  }  // end 'POINTS'

#ifdef ENABLE_TEXTURES
  v_textureCoord  = texCoords;
#endif

}
`,BA=`precision highp float;
precision highp int;
#define GLSLIFY 1
import 'GLSLUtils.glsl'
import 'drawItemTexture.glsl' 
import 'cutaways.glsl'
import 'gamma.glsl'
import 'materialparams.glsl'
import 'GLSLBits.glsl'

/* VS Outputs */
varying vec4 v_drawItemIds;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
varying vec3 v_worldPos;
/* VS Outputs */

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

// Now that we render multiple types of geometry from a single shader
// we need to know what kind of geometry it is...
uniform int geomType;
import 'geomType.glsl'

#if defined(DRAW_COLOR)

#ifdef ENABLE_INLINE_GAMMACORRECTION
uniform float exposure;
#endif

uniform mat4 cameraMatrix;
uniform int isOrthographic;

#ifndef ENABLE_MULTI_DRAW

uniform color BaseColor;
uniform float AmbientOcclusion;
uniform float Roughness;
uniform float Metallic;
uniform float Reflectance;
uniform float EmissiveStrength;
uniform float Opacity;

uniform color EdgeColor;
uniform color PointColor;

#ifdef ENABLE_TEXTURES
uniform sampler2D BaseColorTex;
uniform int BaseColorTexType;

uniform sampler2D AmbientOcclusionTex;
uniform int AmbientOcclusionTexType;

#ifdef ENABLE_PBR
uniform sampler2D RoughnessTex;
uniform int RoughnessTexType;

uniform sampler2D MetallicTex;
uniform int MetallicTexType;

uniform sampler2D ReflectanceTex;
uniform int ReflectanceTexType;

uniform sampler2D NormalTex;
uniform int NormalTexType;
#endif // ENABLE_PBR

uniform sampler2D EmissiveStrengthTex;
uniform int EmissiveStrengthTexType;

#endif // ENABLE_TEXTURES
#endif // ENABLE_MULTI_DRAW

import 'PBRSurfaceRadiance.glsl'

#ifdef ENABLE_PBR
mat3 cotangentFrame( in vec3 normal, in vec3 pos, in vec2 texCoord ) {
  // https://stackoverflow.com/questions/5255806/how-to-calculate-tangent-and-binormal
  vec3 n = normal;
  // derivations of the fragment position
  vec3 pos_dx = dFdx( pos );
  vec3 pos_dy = dFdy( pos );
  // derivations of the texture coordinate
  vec2 texC_dx = dFdx( texCoord );
  vec2 texC_dy = dFdy( texCoord );
  // tangent vector and binormal vector
  vec3 t = -(texC_dy.y * pos_dx - texC_dx.y * pos_dy);
  vec3 b = -(texC_dx.x * pos_dy - texC_dy.x * pos_dx);

  t = t - n * dot( t, n ); // orthonormalization ot the tangent vectors
  b = b - n * dot( b, n ); // orthonormalization of the binormal vectors to the normal vector
  b = b - t * dot( b, t ); // orthonormalization of the binormal vectors to the tangent vector
  mat3 tbn = mat3( normalize(t), normalize(b), n );

  return tbn;
}
#endif

import 'computeViewNormal.glsl'

#elif defined(DRAW_GEOMDATA)

#ifdef ENABLE_MULTI_DRAW
// #define DEBUG_GEOM_ID
#endif
#ifdef DEBUG_GEOM_ID
import 'debugColors.glsl'
#endif

uniform int isOrthographic;
import 'surfaceGeomData.glsl'

#elif defined(DRAW_HIGHLIGHT)
import 'surfaceHighlight.glsl'
#endif // DRAW_HIGHLIGHT

void main(void) {
  #ifndef ENABLE_ES3
    vec4 fragColor;
  #endif
  
  int geomItemId = int(v_drawItemIds.x + 0.5);
  int elemId = int(v_drawItemIds.y + 0.5);
  int perFaceMaterialId = int(v_drawItemIds.z);
  int flags = int(v_geomItemData.x + 0.5);
  float treeItemOpacity = v_geomItemData.y;

  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {
    vec4 cutAwayData   = getCutaway(geomItemId);
    vec3 planeNormal = cutAwayData.xyz;
    float planeDist = cutAwayData.w;
    if (cutaway(v_worldPos, planeNormal, planeDist)) {
        discard;
        return;
    }
  }
  vec2 materialCoords = v_geomItemData.zw;
  if (v_drawItemIds.z > 0.5) {
    materialCoords.x = v_drawItemIds.z;
  }
  
#if defined(DRAW_COLOR)

  if (geomType == TRIANGLES) { // start 'TRIANGLES'

  // Cutaways
  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {
    if (!gl_FrontFacing) {
#ifdef ENABLE_ES3
      fragColor = cutColor;
#else
      gl_FragColor = cutColor;
#endif
      return;
    }
  }

  

  //////////////////////////////////////////////
  // Normals
  vec3 viewNormal;
  if (length(v_viewNormal) < 0.1) {
    viewNormal = computeViewNormal(v_viewPos);
  } else {
    viewNormal = normalize(v_viewNormal);
  }
  vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);
  
  vec3 viewVector;
  if (isOrthographic == 0)
    viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));
  else 
    viewVector = vec3(-cameraMatrix[2][0], -cameraMatrix[2][1], -cameraMatrix[2][2]);
    
  if (dot(normal, viewVector) < 0.0) {
    normal = -normal;
    // Note: this line can be used to debug inverted meshes.
    //material.baseColor = vec3(1.0, 0.0, 0.0);
  }

  //////////////////////////////////////////////
  // Material

  MaterialParams material;

#ifdef ENABLE_MULTI_DRAW
  vec4 matValue0      = getMaterialValue(materialCoords, 0);
  vec4 matValue1      = getMaterialValue(materialCoords, 1);
  vec4 matValue2      = getMaterialValue(materialCoords, 2);

  material.baseColor     = matValue0.rgb;
  material.ambientOcclusion      = matValue1.r;
  material.metallic      = matValue1.g;
  material.roughness     = matValue1.b;
  material.reflectance   = matValue1.a;

  material.emission      = matValue2.r;
  material.opacity       = matValue2.g * matValue0.a;
  if (material.opacity < 0.001) discard;

#else // ENABLE_MULTI_DRAW

#ifndef ENABLE_TEXTURES
  material.baseColor     = BaseColor.rgb;
  material.emission      = EmissiveStrength;

#ifdef ENABLE_PBR
  material.roughness     = Roughness;
  material.metallic      = Metallic;
  material.reflectance   = Reflectance;
#endif

#else // ENABLE_TEXTURES
  // Planar YZ projection for texturing, repeating every meter.
  // vec2 texCoord       = v_worldPos.xz * 0.2;
  vec2 texCoord          = v_textureCoord;

  vec4 baseColor         = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, texCoord);

  material.ambientOcclusion = getLuminanceParamValue(AmbientOcclusion, AmbientOcclusionTex, AmbientOcclusionTexType, texCoord);
  material.baseColor     = baseColor.rgb;
  
  material.opacity       = Opacity * baseColor.a;
  if (material.opacity < 0.001) discard;

#ifdef ENABLE_PBR

  material.metallic      = getLuminanceParamValue(Metallic, MetallicTex, MetallicTexType, texCoord);
  material.roughness     = getLuminanceParamValue(Roughness, RoughnessTex, RoughnessTexType, texCoord);

  // TODO: Communicate that this tex contains the roughness as well.
  if (MetallicTexType != 0) {
    vec4 metallicRoughness = vec4(Metallic, Roughness, 0.0, 1.0);
    metallicRoughness     = texture2D(MetallicTex, texCoord);
    material.roughness     = metallicRoughness.g;
    material.metallic     = metallicRoughness.b;
  }

  material.reflectance   = getLuminanceParamValue(Reflectance, ReflectanceTex, ReflectanceTexType, texCoord);
#endif // ENABLE_PBR
  material.emission         = getLuminanceParamValue(EmissiveStrength, EmissiveStrengthTex, EmissiveStrengthTexType, texCoord);
#endif // ENABLE_TEXTURES

#ifdef ENABLE_TEXTURES
#ifdef ENABLE_PBR
  if (NormalTexType != 0) {
      mat3 tbn = cotangentFrame(normal, viewVector, texCoord);
      normal = normalize(tbn * (texture2D(NormalTex, texCoord).rgb * 2.0 - 1.0));
  }
#endif // ENABLE_PBR
#endif // ENABLE_TEXTURES
#endif // ENABLE_MULTI_DRAW

  fragColor = pbrSurfaceRadiance(material, normal, viewVector);
  
  // Note: the 'treeItemOpacity' is not an input to the PBR lighting, 
  // as we want to also blend off the specular reflections to make an object
  // fade away to nothing. (not become a transparent glass object).
  fragColor.a *= treeItemOpacity;

  // Debugging code to help understand what might be happening in the shader.
  // fragColor = vec4(texture2D(NormalTex, texCoord).rgb, 1.0);
  // fragColor = metallicRoughness;
  // fragColor = vec4(material.baseColor, 1.0);;
  // fragColor = vec4(vec3(material.metallic), 1.0);;
  // fragColor = vec4(vec3(material.roughness), 1.0);;
  // fragColor = vec4(vec3(material.ambientOcclusion), 1.0);

  } // end 'TRIANGLES'
  else if (geomType == LINES) { // start 'LINES'
#ifdef ENABLE_MULTI_DRAW
    vec4 edgeColor      = getMaterialValue(materialCoords, 3);
    vec4 matValue2      = getMaterialValue(materialCoords, 2);
    float opacity       = matValue2.g;
#else 
    vec4 edgeColor      = EdgeColor;
    float opacity        = Opacity;
#endif // ENABLE_MULTI_DRAW
    edgeColor.a = edgeColor.a * opacity * treeItemOpacity;
    if (edgeColor.a < 0.001) discard;
    fragColor = edgeColor;
  } // end 'LINES'
  else if (geomType == POINTS) { // start 'POINTS'
#ifdef ENABLE_MULTI_DRAW
    vec4 pointColor     = getMaterialValue(materialCoords, 4);
    vec4 matValue2      = getMaterialValue(materialCoords, 2);
    float opacity       = matValue2.g;
#else 
    vec4 pointColor      = PointColor;
    float opacity        = Opacity;
#endif // ENABLE_MULTI_DRAW
    pointColor.a = pointColor.a * opacity * treeItemOpacity;
    if (pointColor.a < 0.001) discard;
    fragColor = pointColor;
  }  // end 'POINTS'
  
#ifdef DEBUG_GEOM_ID
  // ///////////////////////
  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)
  float geomId = v_geomItemData.w;
  fragColor.rgb = getDebugColor(geomId);
  // ///////////////////////
#endif

#ifdef ENABLE_INLINE_GAMMACORRECTION
  fragColor.rgb = toGamma(fragColor.rgb * exposure);
#endif

#elif defined(DRAW_GEOMDATA)
  // Cutaways
  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {
    discard;
    return;
  }
  if (occlusionCulling != 0) {
    // Transparent geoms do not render to the occlusion buffer
    if (testFlag(flags, GEOMITEM_TRANSPARENT)) {
      discard;
      return;
    }
  }

  // We can make geoms invisible to hide them. 
  // Avoid drawing GeomData for geoms that are completely transparent.
  if (geomType == TRIANGLES) { // start 'TRIANGLES'
    vec4 matValue0      = getMaterialValue(materialCoords, 0);
    vec4 matValue2      = getMaterialValue(materialCoords, 2);
    float opacity          = matValue2.g * matValue0.a * treeItemOpacity;
    if (opacity < 0.001) {
      discard;
      return;
    }
  } // end 'TRIANGLES'
  else if (geomType == LINES) { // start 'LINES'
#ifdef ENABLE_MULTI_DRAW
    vec4 edgeColor      = getMaterialValue(materialCoords, 3);
#else 
    vec4 edgeColor      = EdgeColor;
#endif // ENABLE_MULTI_DRAW
    float opacity          = edgeColor.a * treeItemOpacity;
    if (opacity < 0.001) {
      discard;
      return;
    }
  } // end 'LINES'
  else if (geomType == POINTS) { // start 'POINTS'
#ifdef ENABLE_MULTI_DRAW
    vec4 pointColor      = getMaterialValue(materialCoords, 4);
#else 
    vec4 pointColor      = PointColor;
#endif // ENABLE_MULTI_DRAW
    float opacity          = pointColor.a * treeItemOpacity;
    if (opacity < 0.001) {
      discard;
      return;
    }
  }  // end 'POINTS'

  
  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_drawItemIds.x, v_drawItemIds.y, isOrthographic);
   
#elif defined(DRAW_HIGHLIGHT)
  fragColor = getHighlightColor(geomItemId);
#endif // DRAW_HIGHLIGHT

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif

}`;class va extends Pe{constructor(e){super(e,"StandardSuraceShader");this.setShaderStage("VERTEX_SHADER",AA),this.setShaderStage("FRAGMENT_SHADER",BA)}bind(e,g){const t=e;super.bind(e,g);const I=this.__gl;t.envMap&&t.envMap.bind(t);const{exposure:l,cutColor:C}=t.unifs;return l&&I.uniform1f(l.location,t.exposure),C&&I.uniform4f(C.location,.3,0,0,1),!0}static getPackedMaterialData(e){const g=new Float32Array(20),t=e.getParameter("BaseColor");let I;t instanceof ye&&t.colorSpace==Bg.Gamma?I=t.value.toLinear():I=t.value,g[0]=I.r,g[1]=I.g,g[2]=I.b,g[3]=I.a,g[4]=e.getParameter("AmbientOcclusion").value,g[5]=e.getParameter("Metallic").value,g[6]=e.getParameter("Roughness").value,g[7]=e.getParameter("Reflectance").value,g[8]=e.getParameter("EmissiveStrength").value,g[9]=e.getParameter("Opacity").value;const l=e.getParameter("EdgeColor").value;g[12]=l.r,g[13]=l.g,g[14]=l.b,g[15]=l.a;const C=e.getParameter("PointColor").value;return g[16]=C.r,g[17]=C.g,g[18]=C.b,g[19]=C.a,g}static getMaterialTemplate(){return QA}}const QA=new _l("StandardSurfaceShader_template");S.register("StandardSurfaceShader",va);S.register("TransparentSurfaceShader",va);var VA=`
precision highp float;
#define GLSLIFY 1

import 'GLSLUtils.glsl'
#ifdef ENABLE_MULTI_DRAW
import 'drawItemTexture.glsl'
#endif // ENABLE_MULTI_DRAW

import 'gamma.glsl'
import 'materialparams.glsl'

#if defined(DRAW_COLOR)

  #ifndef ENABLE_MULTI_DRAW

    uniform color BaseColor;

    #ifdef ENABLE_TEXTURES
      uniform sampler2D BaseColorTex;
      uniform int BaseColorTexType;
    #endif

  #endif // ENABLE_MULTI_DRAW
#endif // DRAW_COLOR

/* VS Outputs */
varying float v_geomItemId;
varying vec4 v_geomItemData;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif

#if defined(DRAW_GEOMDATA)
  uniform int isOrthographic;
  import 'surfaceGeomData.glsl'
#elif defined(DRAW_HIGHLIGHT)
  import 'surfaceHighlight.glsl'
#endif // DRAW_HIGHLIGHT

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
  
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  //////////////////////////////////////////////
  // Color
#if defined(DRAW_COLOR)

  #ifdef ENABLE_MULTI_DRAW

    vec2 materialCoords = v_geomItemData.zw;
    vec4 baseColor = getMaterialValue(materialCoords, 0);

  #else // ENABLE_MULTI_DRAW

  #ifndef ENABLE_TEXTURES
    vec4 baseColor = BaseColor;
  #else
    vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);
  #endif

  #endif // ENABLE_MULTI_DRAW

    fragColor = baseColor;

  #ifdef ENABLE_INLINE_GAMMACORRECTION
    fragColor.rgb = toGamma(fragColor.rgb);
  #endif

  //////////////////////////////////////////////
  // GeomData
#elif defined(DRAW_GEOMDATA)
  fragColor = setFragColor_geomData(vec3(0,0,0), floatGeomBuffer, passId, v_geomItemId, 0.0, isOrthographic);
#elif defined(DRAW_HIGHLIGHT)
  fragColor = setFragColor_highlight(v_geomItemId);
#endif // DRAW_HIGHLIGHT

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,rA=`
precision highp float;
#define GLSLIFY 1

attribute vec3 positions;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif

import 'GLSLUtils.glsl'
import 'geomItemId.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

/* VS Outputs */
varying float v_geomItemId;
varying vec4 v_geomItemData;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif

void main(void) {
  int geomItemId = getGeomItemId();
  v_geomItemId = float(geomItemId);
  v_geomItemData  = getInstanceData(geomItemId);

  mat4 modelMatrix = getModelMatrix(geomItemId);

  gl_Position = (modelMatrix * vec4(positions, 1.0));

  v_textureCoord = texCoords;
  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y
}
`;class RA extends Pe{constructor(e){super(e,"ScreenSpaceShader");this.setShaderStage("VERTEX_SHADER",rA),this.setShaderStage("FRAGMENT_SHADER",VA)}static isOverlay(){return!0}static getPackedMaterialData(e){const g=new Float32Array(8),t=e.getParameter("BaseColor").value;return g[0]=t.r,g[1]=t.g,g[2]=t.b,g[3]=t.a,g}static getMaterialTemplate(){return hA}}const hA=new Ll("ScreenSpaceShader_template");S.register("ScreenSpaceShader",RA);class Ma extends Ga{constructor(){super();this.materials={},this.listenerIDs={}}init(e,g){super.init(e,g)}itemAddedToScene(e,g){if(e instanceof ge){const t=e;return this.filterGeomItem(t)?(this.addGeomItem(t),!0):!1}else return!1}itemRemovedFromScene(e,g){return e instanceof ge?(this.removeGeomItem(e),!0):!1}filterGeomItem(e){return!0}addGeomItem(e){const g={};this.listenerIDs[e.getId()]=g;const t=()=>{this.removeGeomItem(e),this.renderer.assignTreeItemToGLPass(e)};g["materialParam.valueChanged"]=e.materialParam.on("valueChanged",t),g["geomParam.valueChanged"]=e.geomParam.on("valueChanged",t);const I=C=>{C.isOpaqueStateChanged&&t()},l=e.materialParam.value;this.materials[e.getId()]=l,g["geomItem.opacityChanged"]=e.on("opacityChanged",I),g["material.opacityChanged"]=l.on("opacityChanged",I)}removeGeomItem(e){const g=e.getId(),t=this.listenerIDs[g];delete this.listenerIDs[g],e.materialParam.removeListenerById("valueChanged",t["materialParam.valueChanged"]),e.geomParam.removeListenerById("valueChanged",t["geomParam.valueChanged"]);const I=this.materials[e.getId()];delete this.materials[g],e.removeListenerById("opacityChanged",t["geomItem.opacityChanged"]),I.removeListenerById("opacityChanged",t["material.opacityChanged"])}constructShaders(e){let g,t;const I=this.__renderer.getOrCreateShader(e);return I.getGeomDataShaderName()?g=this.__renderer.getOrCreateShader(I.getGeomDataShaderName()):g=I,I.getSelectedShaderName()?t=this.__renderer.getOrCreateShader(I.getSelectedShaderName()):t=I,{glShader:I,glgeomdatashader:g,glselectedshader:t}}getGeomItemAndDist(e){let g,t=-1,I;e instanceof Float32Array?(g=Math.round(e[1]),t=Math.round(e[2]),I=e[3]):(g=e[0]+((e[1]&63)<<8),I=q.decode16BitFloatFrom2xUInt8(e.slice(2,3)));const l=this.renderer.glGeomItemLibrary.getGeomItem(g);if(l)return{geomItem:l,componentId:t,dist:I}}}var cA=`
precision highp float;
#define GLSLIFY 1
attribute vec3 positions;  //(location = 0)

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  v_texCoord = positions.xy+0.5;
  gl_Position = vec4(positions.xy*2.0, -1.0, 1.0);
}
`,ZA=`
precision highp float;
#define GLSLIFY 1

uniform sampler2D colorTexture;
uniform sampler2D depthTexture;
uniform vec2 screenSize;

uniform float growth;

varying vec2 v_texCoord;

bool sampleNeiPixel(vec2 fragCoord, inout vec4 res) {
  res = texture2D(colorTexture, fragCoord/screenSize);
  if (res.a > 0.0) {
    return true;
  }
  return false;
}

vec4 samplePixels(vec2 fragCoord) {
  vec4 res = vec4(0.0);
  
  if (sampleNeiPixel(fragCoord, res)) return res; // M
  
  // Search surrounding pixels for geoms
  if (sampleNeiPixel(fragCoord+vec2( 1, 0), res)) return res; // E
  if (sampleNeiPixel(fragCoord+vec2(-1, 0), res)) return res; // W
  if (sampleNeiPixel(fragCoord+vec2( 0, 1), res)) return res; // N
  if (sampleNeiPixel(fragCoord+vec2( 0,-1), res)) return res; // S
  if (sampleNeiPixel(fragCoord+vec2( 1, 1), res)) return res; // NW
  if (sampleNeiPixel(fragCoord+vec2(-1, 1), res)) return res; // NE
  if (sampleNeiPixel(fragCoord+vec2( 1,-1), res)) return res; // SW
  if (sampleNeiPixel(fragCoord+vec2(-1,-1), res)) return res; // SE
  
  return res;
}

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  fragColor = samplePixels(gl_FragCoord.xy);
  if (fragColor.a < 0.0001) {
    discard; 
  }

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`;class Ha extends Pe{constructor(e){super(e,"FattenLinesShader");this.setShaderStage("VERTEX_SHADER",cA),this.setShaderStage("FRAGMENT_SHADER",ZA)}}const mA=(i,e)=>i.length==e.length&&!i.some((g,t)=>g!=e[t]);var Yg;(function(i){i[i.TRIANGLES=0]="TRIANGLES",i[i.LINES=1]="LINES",i[i.POINTS=2]="POINTS"})(Yg||(Yg={}));class WA extends Xe{constructor(e){super();this.glGeomItems=[],this.glGeomIdsMapping={},this.glgeomItemEventHandlers=[],this.freeIndices=[],this.dirtyGeomItems=new Set,this.drawIdsBufferDirty=!0,this.drawIdsArraysAllocators={},this.drawIdsArrays={},this.drawIdsTextures={},this.drawElementCounts={},this.drawElementOffsets={},this.drawOrderToIndex=[],this.indexToDrawIndex=[],this.highlightedItems={},this.highlightedIdsArraysAllocators={},this.highlightElementCounts={},this.highlightElementOffsets={},this.highlightedIdsArray={},this.highlightedIdsTextures={},this.dirtyHighlightedGeomItems=new Set,this.highlightedIdsBufferDirty=!0,this.linesGeomDataBuffer=null,this.fattenLinesShader=null,this.quad=null,this.fbo=null,this.renderer=e,this.gl=e.gl,this.renderer.glGeomLibrary.on("geomDataChanged",g=>{const t=this.glGeomIdsMapping[g.index];t!=null&&t.forEach(I=>{this.dirtyGeomItems.add(I),this.drawIdsBufferDirty||(this.drawIdsBufferDirty=!0,this.emit("updated"))})})}addGLGeomItem(e){const g=this.freeIndices.length>0?this.freeIndices.pop():this.glGeomItems.length;this.glGeomIdsMapping[e.geomId]?this.glGeomIdsMapping[e.geomId].push(g):this.glGeomIdsMapping[e.geomId]=[g];const t={};e.visible&&(this.indexToDrawIndex[g]=this.drawOrderToIndex.length,this.drawOrderToIndex.push(g),this.dirtyGeomItems.add(g)),t.visibilityChanged=l=>{if(l.visible){const C=this.renderer.glGeomLibrary.getGeomBuffers(e.geomId);for(let n in C.counts){if(C.counts[n]==0)continue;const F=this.drawIdsArraysAllocators[n];if(F){const a=F.getAllocation(g);if(a){const U=a.start;if(e.shattered)for(let d=0;d<a.size;d++)this.drawElementCounts[n][U+d]=C.subGeomCounts[n][d];else{const d=C.materialSubGeoms[n];for(let s=0;s<a.size;s++){const o=d[s];this.drawElementCounts[n][U+s]=o.count}}}}}}else for(let C in this.drawIdsArraysAllocators){const n=this.drawIdsArraysAllocators[C];if(n){const F=n.getAllocation(g);if(F){const a=F.start;for(let U=0;U<F.size;U++)this.drawElementCounts[C][a+U]=0}}}this.emit("updated")},e.on("visibilityChanged",t.visibilityChanged);const I=l=>{const C=l.indexOf(":");let n=[];C!=-1&&(n=l.substring(C+1).split(",").map(F=>Number.parseInt(F))),!(this.highlightedItems[g]&&mA(this.highlightedItems[g],n))&&(this.highlightedItems[g]=n,this.highlightedIdsBufferDirty=!0,this.emit("updated"))};e.geomItem.isHighlighted()&&I(e.geomItem.getHighlightName()),t.highlightChanged=l=>{l&&l.name?I(l.name):(delete this.highlightedItems[g],this.highlightedIdsBufferDirty=!0,this.emit("updated"))},e.geomItem.on("highlightChanged",t.highlightChanged),t.shatterStateChanged=l=>{this.dirtyGeomItems.add(g),this.drawIdsBufferDirty=!0,this.renderer.renderGeomDataFbos()},e.on("shatterStateChanged",t.shatterStateChanged),e.geomItem.geomParam.value.materials.forEach(C=>{this.renderer.glMaterialLibrary.addMaterial(C)}),this.glGeomItems[g]=e,this.glgeomItemEventHandlers[g]=t,this.drawIdsBufferDirty=!0,this.emit("updated")}removeGLGeomItem(e){const g=this.glGeomItems.indexOf(e),t=this.glGeomIdsMapping[e.geomId];t.splice(t.indexOf(g),1),t.length==0&&delete this.glGeomIdsMapping[e.geomId];const I=this.glgeomItemEventHandlers[g];e.geomItem.off("highlightChanged",I.highlightChanged),e.off("visibilityChanged",I.visibilityChanged),this.glGeomItems[g]=null,this.glgeomItemEventHandlers[g]=null,this.freeIndices.push(g),this.dirtyGeomItems.has(g)&&this.dirtyGeomItems.delete(g);for(let l in this.drawIdsArraysAllocators){const C=this.drawIdsArraysAllocators[l].getAllocation(g);if(C){for(let n=0;n<C.size;n++)this.drawElementOffsets[l][C.start+n]=0,this.drawElementCounts[l][C.start+n]=0;this.drawIdsArraysAllocators[l].deallocate(g)}}if(e.isVisible()){const l=this.drawOrderToIndex.indexOf(g);this.drawOrderToIndex.splice(l,1),this.indexToDrawIndex[g]=-1,this.drawIdsBufferDirty=!0}e.geomItem.isHighlighted()&&(delete this.highlightedItems[g],this.highlightedIdsBufferDirty=!0),this.emit("updated")}updateDrawIDsBuffer(e){this.dirtyGeomItems.forEach(C=>{const n=this.glGeomItems[C];if(!!n){const F=this.renderer.glGeomLibrary.getGeomBuffers(n.geomId);let a={};if(n.shattered)for(let U in F.subGeomCounts)a[U]=F.subGeomCounts[U].length;else for(let U in F.materialSubGeoms)a[U]=F.materialSubGeoms[U].length;for(let U in a){const d=a[U];this.drawIdsArraysAllocators[U]||(this.drawIdsArraysAllocators[U]=new vt);const s=this.drawIdsArraysAllocators[U].getAllocation(C);if(s)for(let o=0;o<s.size;o++)this.drawElementCounts[U][s.start+o]=0;this.drawIdsArraysAllocators[U].allocate(C,d)}}});let g=!1;for(let C in this.drawIdsArraysAllocators){const n=this.drawIdsArraysAllocators[C];(!this.drawElementCounts[C]||n.reservedSpace>this.drawElementCounts[C].length)&&(this.drawElementCounts[C]&&n.reservedSpace>this.drawElementCounts[C].length&&(g=!0),this.drawIdsArrays[C]=new Float32Array(n.reservedSpace*4),this.drawElementOffsets[C]=new Int32Array(n.reservedSpace),this.drawElementCounts[C]=new Int32Array(n.reservedSpace))}if(g)for(let C=0;C<this.drawOrderToIndex.length;C++)this.dirtyGeomItems.add(C);const t=4;this.dirtyGeomItems.forEach(C=>{const n=this.glGeomItems[C];if(!n)return;const F=this.renderer.glGeomLibrary.getGeomOffsetAndCount(n.geomId),a=this.renderer.glGeomLibrary.getGeomBuffers(n.geomId),U=n.isVisible();if(n.shattered){let d=0;const s=(o,A,B)=>{const Q=this.drawIdsArraysAllocators[B],r=this.drawIdsArrays[B],R=this.drawElementOffsets[B],V=this.drawElementCounts[B],h=Q.getAllocation(C);if(!h)return;const m=a.materials;for(let Z=0;Z<o.length;Z++){const c=h.start+Z;if(R[c]=F[0]+o[Z]*t,V[c]=U?A[Z]:0,r[c*4+0]=n.geomItemId,r[c*4+1]=d+1,m.length>0&&a.subGeomMaterialIndices[Z]>0){const W=a.subGeomMaterialIndices[Z]-1,u=a.materials[W];this.renderer.glMaterialLibrary.addMaterial(u);const J=this.renderer.glMaterialLibrary.getMaterialAllocation(u);r[c*4+2]=J.start}else r[c*4+2]=0;r[c*4+3]=0,d++}};s(a.subGeomOffsets.TRIANGLES,a.subGeomCounts.TRIANGLES,"TRIANGLES"),s(a.subGeomOffsets.LINES,a.subGeomCounts.LINES,"LINES"),s(a.subGeomOffsets.POINTS,a.subGeomCounts.POINTS,"POINTS")}else{const d=(s,o)=>{const A=this.drawIdsArraysAllocators[o],B=this.drawIdsArrays[o],Q=this.drawElementOffsets[o],r=this.drawElementCounts[o],R=A.getAllocation(C);if(!R)return;const V=a.materials;for(let h=0;h<s.length;h++){const m=s[h],Z=R.start+h;if(Q[Z]=F[0]+m.offset*t,r[Z]=U?m.count:0,B[Z*4+0]=n.geomItemId,B[Z*4+1]=0,V.length>0&&m.materialId>=0&&a.materials[m.materialId]){const c=a.materials[m.materialId];this.renderer.glMaterialLibrary.addMaterial(c);const W=this.renderer.glMaterialLibrary.getMaterialAllocation(c);B[Z*4+2]=W.start}else B[Z*4+2]=0;B[Z*4+3]=0}};for(let s in a.materialSubGeoms){if(!this.drawIdsArraysAllocators[s].getAllocation(C))continue;const B=a.materialSubGeoms[s];d(B,s)}}});const I=this.renderer.gl;if(!I.multiDrawElements)return;const l=C=>{const n=this.drawIdsArrays[C];let F=this.drawIdsTextures[C];const a=this.drawIdsArraysAllocators[C].reservedSpace,U=e.boundTextures++;I.activeTexture(I.TEXTURE0+U);const d=q.nextPow2(Math.ceil(Math.sqrt(a)));if(!F)F=new Te(this.gl,{format:"RGBA",type:"FLOAT",width:d,height:d,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.drawIdsTextures[C]=F,g=!0;else if(F.width<d||F.height<d){F.resize(d,d);for(let s=0;s<this.drawOrderToIndex.length;s++)this.dirtyGeomItems.add(s);g=!0}{const s=F,o=F.width;I.bindTexture(I.TEXTURE_2D,s.glTex);const A=0,B=0,Q=1,r=s.getFormat(),R=s.getType();if(g){const V=this.drawIdsArraysAllocators[C].allocatedSpace,h=Math.ceil((B+V)/o);let m=0,Z=V,c=B;for(let W=0;W<h;W++){let u;c+Z>o?(u=o-c,c=0):u=Z;const J=m%o,N=Math.floor(m/o),X=n.subarray(m*4,(m+u)*4);if(X.length!=u*4)throw new Error("Invalid drawIds subarray :"+X.length+" width:"+u);I.texSubImage2D(I.TEXTURE_2D,A,J,N,u,Q,r,R,X),m+=u,Z-=u}}else{const V=this.drawIdsArraysAllocators[C];this.dirtyGeomItems.forEach(h=>{const m=V.getAllocation(h);if(!m)return;const Z=m.start,c=m.size,W=Z%o,u=Math.ceil((W+c)/o);let J=0,N=c,X=W;for(let y=0;y<u;y++){let p;X+N>o?(p=o-X,X=0):p=N;const _=(Z+J)%o,ae=Math.floor((Z+J)/o),ne=n.subarray((Z+J)*4,(Z+J+p)*4);if(ne.length!=p*4)throw new Error("Invalid drawIds subarray :"+ne.length+" width:"+p);I.texSubImage2D(I.TEXTURE_2D,A,_,ae,p,Q,r,R,ne),J+=p,N-=p}})}}I.bindTexture(I.TEXTURE_2D,null),e.boundTextures--};for(let C in this.drawIdsArrays)l(C);this.dirtyGeomItems=new Set,this.drawIdsBufferDirty=!1}updateHighlightedIDsBuffer(e){if(this.highlightedIdsBufferDirty){this.highlightedIdsArraysAllocators={},this.highlightedIdsArray={},this.highlightElementOffsets={},this.highlightElementCounts={};for(let l in this.highlightedItems){const C=Number.parseInt(l),n=this.highlightedItems[l],F=this.glGeomItems[C],a=this.renderer.glGeomLibrary.getGeomBuffers(F.geomId);let U={TRIANGLES:0,LINES:0,POINTS:0};if(n.length>0)n.forEach(d=>{if(d<a.subGeomCounts.TRIANGLES.length)U.TRIANGLES+=1;else{const s=d-a.subGeomCounts.TRIANGLES.length;s<a.subGeomCounts.LINES.length?U.LINES+=1:s-a.subGeomCounts.LINES.length<a.subGeomCounts.POINTS.length&&(U.POINTS+=1)}});else for(let d in a.counts)a.counts[d]>0&&(U[d]=1);for(let d in U){const s=U[d];s!=0&&(this.highlightedIdsArraysAllocators[d]||(this.highlightedIdsArraysAllocators[d]=new vt),this.highlightedIdsArraysAllocators[d].allocate(C,s))}}for(let l in this.highlightedIdsArraysAllocators){const C=this.highlightedIdsArraysAllocators[l];(!this.highlightElementCounts[l]||C.reservedSpace>this.highlightElementCounts[l].length)&&(this.highlightedIdsArray[l]=new Float32Array(C.reservedSpace*4),this.highlightElementOffsets[l]=new Int32Array(C.reservedSpace),this.highlightElementCounts[l]=new Int32Array(C.reservedSpace))}const I=4;for(let l in this.highlightedItems){const C=Number.parseInt(l),n=this.highlightedItems[l],F=this.glGeomItems[C],a=this.renderer.glGeomLibrary.getGeomOffsetAndCount(F.geomId),U=this.renderer.glGeomLibrary.getGeomBuffers(F.geomId);if(n.length!=0)n.forEach((d,s)=>{const o=(A,B,Q,r)=>{const R=this.highlightedIdsArraysAllocators[Q],V=this.highlightedIdsArray[Q],h=this.highlightElementOffsets[Q],m=this.highlightElementCounts[Q],c=R.getAllocation(C).start+s;h[c]=a[0]+A[r]*I,m[c]=B[r],V[c*4+0]=F.geomItemId,V[c*4+1]=d+1,V[c*4+2]=0,V[c*4+3]=0};if(d<U.subGeomCounts.TRIANGLES.length)o(U.subGeomOffsets.TRIANGLES,U.subGeomCounts.TRIANGLES,"TRIANGLES",d);else{const A=d-U.subGeomCounts.TRIANGLES.length;A<U.subGeomCounts.LINES.length?o(U.subGeomOffsets.LINES,U.subGeomCounts.LINES,"LINES",A):A-U.subGeomCounts.LINES.length<U.subGeomCounts.POINTS.length}});else for(let d in U.offsets){const s=U.counts[d];if(s==0)continue;const o=U.offsets[d],Q=this.highlightedIdsArraysAllocators[d].getAllocation(C).start;this.highlightElementOffsets[d][Q]=a[0]+o*I,this.highlightElementCounts[d][Q]=s,this.highlightedIdsArray[d][Q*4+0]=F.geomItemId}}this.highlightedIdsBufferDirty=!1}const g=this.renderer.gl;if(!g.multiDrawElements)return;const t=I=>{const l=this.highlightedIdsArray[I];if(!l||l.length==0)return;let C=this.highlightedIdsTextures[I];const n=this.highlightedIdsArraysAllocators[I].reservedSpace,F=e.boundTextures++;g.activeTexture(g.TEXTURE0+F);const a=q.nextPow2(Math.ceil(Math.sqrt(n)));C?(C.width<a||C.height<a)&&C.resize(a,a):(C=new Te(this.gl,{format:"RGBA",type:"FLOAT",width:a,height:a,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.highlightedIdsTextures[I]=C);{const U=C,d=C.width;g.bindTexture(g.TEXTURE_2D,U.glTex);const s=0,o=0,A=1,B=U.getFormat(),Q=U.getType(),r=this.highlightedIdsArraysAllocators[I].allocatedSpace,R=Math.ceil((o+r)/d);let V=0,h=r,m=o;for(let Z=0;Z<R;Z++){let c;m+h>d?(c=d-m,m=0):c=h;const W=V%d,u=Math.floor(V/d),J=l.subarray(V*4,(V+c)*4);if(J.length!=c*4)throw new Error("Invalid drawIds subarray :"+J.length+" width:"+c);g.texSubImage2D(g.TEXTURE_2D,s,W,u,c,A,B,Q,J),V+=c,h-=c}}g.bindTexture(g.TEXTURE_2D,null),e.boundTextures--};for(let I in this.highlightedIdsArray)t(I)}draw(e){this.drawOrderToIndex.length!=0&&(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(e),this.bindAndRender(e,this.drawIdsArrays,this.drawElementCounts,this.drawElementOffsets,this.drawIdsTextures,this.drawIdsArraysAllocators,!0))}drawGeomData(e){this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(e);const g=this.renderer.gl,t=e.unifs,{drawIdsTexture:I,geomType:l}=t,C=this.drawElementCounts,n=this.drawElementOffsets,F=this.drawIdsTextures,a=this.drawIdsArraysAllocators,U=this.drawIdsArrays;e.bindViewports(t,()=>{U.TRIANGLES&&a.TRIANGLES.allocatedSpace>0&&(g.multiDrawElements&&F.TRIANGLES.bindToUniform(e,I),l&&g.uniform1i(l.location,Yg.TRIANGLES),this.multiDrawMeshes(e,U.TRIANGLES,C.TRIANGLES,n.TRIANGLES,a.TRIANGLES.allocatedSpace))});const d=!0;if(e.geomDataFbo&&d){this.linesGeomDataBuffer||(this.linesGeomDataBuffer=new Te(g,{type:this.renderer.floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:1,height:2}),this.fattenLinesShader=new Ha(g),this.quad=new ql(g,new Dt(1,1)));const s=e.geomDataFbo,o=s.width,A=s.height;if(this.linesGeomDataBuffer.width!=o||this.linesGeomDataBuffer.height!=A){this.fbo&&(g.deleteFramebuffer(this.fbo),this.fbo=null),this.linesGeomDataBuffer.resize(o,A),this.fbo=g.createFramebuffer();const B=this.linesGeomDataBuffer.glTex,Q=s.__depthTexture;g.name=="webgl2"?(g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.fbo),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,B,0),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,Q,0)):(g.bindFramebuffer(g.FRAMEBUFFER,this.fbo),g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,B,0),g.framebufferTexture2D(g.FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,Q,0)),hl(g,o,A)}else g.name=="webgl2"?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.fbo):g.bindFramebuffer(g.FRAMEBUFFER,this.fbo);g.colorMask(!0,!0,!0,!0),g.clearColor(0,0,0,0),g.clear(g.COLOR_BUFFER_BIT)}if(e.bindViewports(t,()=>{U.LINES&&a.LINES.allocatedSpace>0&&(g.multiDrawElements&&F.LINES.bindToUniform(e,I),l&&g.uniform1i(l.location,Yg.LINES),this.multiDrawLines(e,U.LINES,C.LINES,n.LINES,a.LINES.allocatedSpace)),U.POINTS&&a.POINTS.allocatedSpace>0&&(g.multiDrawElements&&F.POINTS.bindToUniform(e,I),l&&g.uniform1i(l.location,Yg.POINTS),this.multiDrawPoints(e,U.POINTS,C.POINTS,n.POINTS,a.POINTS.allocatedSpace))}),this.linesGeomDataBuffer&&e.geomDataFbo&&d){e.boundRendertarget=null,e.geomDataFbo.bindForWriting(e);const s=e.glShader,o=e.shaderkey;this.fattenLinesShader.bind(e),g.disable(g.DEPTH_TEST);const{colorTexture:A,screenSize:B}=e.unifs;this.linesGeomDataBuffer.bindToUniform(e,A);const Q=e.geomDataFbo;g.uniform2f(B.location,Q.width,Q.height),this.quad.bindAndDraw(e),g.enable(g.DEPTH_TEST),s.bind(e,o),this.renderer.glGeomLibrary.bind(e),this.renderer.glMaterialLibrary.bind(e)}}drawHighlighted(e){if(Object.keys(this.highlightedItems).length==0)return;this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(e);const g=this.renderer.gl;g.disable(g.CULL_FACE),this.bindAndRender(e,this.highlightedIdsArray,this.highlightElementCounts,this.highlightElementOffsets,this.highlightedIdsTextures,this.highlightedIdsArraysAllocators,!1)}bindAndRender(e,g,t,I,l,C,n=!1){const F=this.gl,a=e.unifs;F.depthFunc(F.LEQUAL),F.disable(F.CULL_FACE);const{drawIdsTexture:U,geomType:d}=e.unifs;e.bindViewports(a,()=>{g.TRIANGLES&&C.TRIANGLES.allocatedSpace>0&&(F.multiDrawElements&&l.TRIANGLES.bindToUniform(e,U),d&&F.uniform1i(d.location,Yg.TRIANGLES),this.multiDrawMeshes(e,g.TRIANGLES,t.TRIANGLES,I.TRIANGLES,C.TRIANGLES.allocatedSpace)),n&&(F.enable(F.BLEND),F.blendEquation(F.FUNC_ADD),F.blendFunc(F.SRC_ALPHA,F.ONE_MINUS_SRC_ALPHA)),g.LINES&&C.LINES.allocatedSpace>0&&(F.multiDrawElements&&l.LINES.bindToUniform(e,U),d&&F.uniform1i(d.location,Yg.LINES),this.multiDrawLines(e,g.LINES,t.LINES,I.LINES,C.LINES.allocatedSpace)),g.POINTS&&C.POINTS.allocatedSpace>0&&(F.multiDrawElements&&l.POINTS.bindToUniform(e,U),d&&F.uniform1i(d.location,Yg.POINTS),this.multiDrawPoints(e,g.POINTS,t.POINTS,I.POINTS,C.POINTS.allocatedSpace)),n&&F.disable(F.BLEND)}),d&&F.uniform1i(d.location,0)}multiDrawMeshes(e,g,t,I,l){const C=this.gl;if(C.multiDrawElements)C.multiDrawElements(C.TRIANGLES,t,0,C.UNSIGNED_INT,I,0,l);else{const{geomItemId:n}=e.unifs;for(let F=0;F<l;F++)C.uniform1i(n.location,g[F*4]),C.drawElements(C.TRIANGLES,t[F],C.UNSIGNED_INT,I[F])}}multiDrawLines(e,g,t,I,l){const C=this.gl;if(C.multiDrawElements){const{occluded:n}=e.unifs;n&&C.uniform1i(n.location,0),C.multiDrawElements(C.LINES,t,0,C.UNSIGNED_INT,I,0,l),n&&(C.uniform1i(n.location,1),C.depthFunc(C.GREATER),C.multiDrawElements(C.LINES,t,0,C.UNSIGNED_INT,I,0,l),C.depthFunc(C.LEQUAL))}else{const{geomItemId:n,occluded:F}=e.unifs;F&&C.uniform1i(F.location,0);for(let a=0;a<l;a++)C.uniform1i(n.location,g[a*4]),C.drawElements(C.LINES,t[a],C.UNSIGNED_INT,I[a]);if(F){C.uniform1i(F.location,1),C.depthFunc(C.GREATER);for(let a=0;a<l;a++)C.uniform1i(n.location,g[a*4]),C.drawElements(C.LINES,t[a],C.UNSIGNED_INT,I[a]);C.depthFunc(C.LEQUAL)}}}multiDrawPoints(e,g,t,I,l){const C=this.gl;if(C.multiDrawElements)C.multiDrawElements(C.POINTS,t,0,C.UNSIGNED_INT,I,0,l);else{const{geomItemId:n}=e.unifs;for(let F=0;F<l;F++)C.uniform1i(n.location,g[F*4]),C.drawElements(C.POINTS,t[F],C.UNSIGNED_INT,I[F])}}sortItems(e){this.drawIdsBufferDirty}destroy(){for(let e in this.drawIdsTextures)this.drawIdsTextures[e].destroy();for(let e in this.highlightedIdsTextures)this.highlightedIdsTextures[e].destroy();this.emit("destructing")}}class ri extends Xe{constructor(e){super();this.glGeomItems=[],this.glGeomIdsMapping={},this.glgeomItemEventHandlers=[],this.freeIndices=[],this.viewPos=new b,this.drawElementCounts=new Int32Array(0),this.drawElementOffsets=new Int32Array(0),this.highlightElementCounts=new Int32Array(0),this.highlightElementOffsets=new Int32Array(0),this.drawOrderToIndex=[],this.indexToDrawIndex=[],this.drawIdsArray=new Float32Array(0),this.drawIdsBufferDirty=!0,this.drawIdsTexture=null,this.highlightedItems=[],this.highlightedIdsArray=null,this.highlightedIdsTexture=null,this.highlightedIdsBufferDirty=!1,this.dirtyGeomIndices=new Set,this.renderer=e,this.gl=e.gl,this.renderer.glGeomLibrary.on("geomDataChanged",g=>{this.dirtyGeomIndices.add(g.index)})}addGLGeomItem(e){const g=this.freeIndices.length>0?this.freeIndices.pop():this.glGeomItems.length;this.glGeomIdsMapping[e.geomId]?this.glGeomIdsMapping[e.geomId].push(g):this.glGeomIdsMapping[e.geomId]=[g],this.indexToDrawIndex[g]=this.drawOrderToIndex.length,this.drawOrderToIndex.push(g);const t={};t.visibilityChanged=I=>{const l=this.indexToDrawIndex[g];if(I.visible){const C=this.renderer.glGeomLibrary.getGeomOffsetAndCount(e.geomId);this.drawElementCounts[l]=C[1]}else this.drawElementCounts[l]=0;this.emit("updated")},e.on("visibilityChanged",t.visibilityChanged),e.geomItem.isHighlighted()&&(this.highlightedItems.push(e),this.highlightedIdsBufferDirty=!0),t.highlightChanged=I=>{if(I&&I.name){if(this.highlightedItems.includes(e))return;this.highlightedItems.push(e)}else this.highlightedItems.splice(this.highlightedItems.indexOf(e),1);this.highlightedIdsBufferDirty=!0,this.emit("updated")},e.geomItem.on("highlightChanged",t.highlightChanged),this.glGeomItems[g]=e,this.glgeomItemEventHandlers[g]=t,this.drawIdsBufferDirty=!0,this.emit("updated")}removeGLGeomItem(e){const g=this.glGeomItems.indexOf(e),t=this.glGeomIdsMapping[e.geomId];t.splice(t.indexOf(g),1),t.length==0&&(delete this.glGeomIdsMapping[e.geomId],this.dirtyGeomIndices.has(e.geomId)&&this.dirtyGeomIndices.delete(e.geomId));const I=this.glgeomItemEventHandlers[g];if(e.geomItem.off("highlightChanged",I.highlightChanged),e.off("visibilityChanged",I.visibilityChanged),this.glGeomItems[g]=null,this.glgeomItemEventHandlers[g]=null,this.drawIdsArray[g]=0,this.drawElementOffsets[g]=0,this.drawElementCounts[g]=0,this.freeIndices.push(g),e.isVisible()){const l=this.drawOrderToIndex.indexOf(g);this.drawOrderToIndex.splice(l,1),this.indexToDrawIndex[g]=-1,this.drawElementCounts[l]=0,this.drawIdsBufferDirty=!0}if(e.geomItem.isHighlighted()){const l=this.highlightedItems.indexOf(e);this.highlightedItems.splice(l,1),this.highlightedIdsBufferDirty=!0}this.emit("updated")}cleanGeomIds(){this.dirtyGeomIndices.forEach(e=>{const g=this.glGeomIdsMapping[e];if(g!=null){const t=this.renderer.glGeomLibrary.getGeomOffsetAndCount(e);g.forEach(I=>{const l=this.glGeomItems[I];if(l.isVisible()){const C=this.indexToDrawIndex[I];this.drawElementOffsets[C]=t[0],this.drawElementCounts[C]=t[1],this.drawIdsArray[C]=l.geomItemId;const n=this.highlightedItems.indexOf(l);n!=-1&&(this.highlightElementOffsets[n]=t[0],this.highlightElementCounts[n]=t[1])}})}}),this.dirtyGeomIndices=new Set}updateDrawIDsBuffer(e){(!this.drawIdsArray||this.drawOrderToIndex.length>this.drawIdsArray.length)&&(this.drawIdsArray=new Float32Array(this.drawOrderToIndex.length),this.drawElementOffsets=new Int32Array(this.drawOrderToIndex.length),this.drawElementCounts=new Int32Array(this.drawOrderToIndex.length)),this.drawOrderToIndex.forEach((l,C)=>{const n=this.glGeomItems[l];if(!n)return;const F=this.renderer.glGeomLibrary.getGeomOffsetAndCount(n.geomId);this.drawElementOffsets[C]=F[0],this.drawElementCounts[C]=n.isVisible()?F[1]:0,this.drawIdsArray[C]=n.geomItemId,this.indexToDrawIndex[l]=C}),this.dirtyGeomIndices=new Set;const g=this.renderer.gl;if(!g.multiDrawElements)return;const t=e.boundTextures++;g.activeTexture(g.TEXTURE0+t);const I=q.nextPow2(Math.ceil(Math.sqrt(this.drawOrderToIndex.length)))*2;this.drawIdsTexture?(this.drawIdsTexture.width<I||this.drawIdsTexture.height<I)&&this.drawIdsTexture.resize(I,I):this.drawIdsTexture=new Te(this.gl,{format:g.name=="webgl2"?"RED":"ALPHA",type:"FLOAT",width:I,height:I,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1});{const l=this.drawIdsTexture,C=this.drawIdsTexture.width;g.bindTexture(g.TEXTURE_2D,l.glTex);const n=0,F=0,a=1,U=l.getFormat(),d=l.getType(),s=Math.ceil((F+this.drawOrderToIndex.length)/C);let o=0,A=this.drawOrderToIndex.length,B=F;for(let Q=0;Q<s;Q++){let r;B+A>C?(r=C-B,B=0):r=A;const R=o%C,V=Math.floor(o/C),h=this.drawIdsArray.subarray(o,o+r);g.texSubImage2D(g.TEXTURE_2D,n,R,V,r,a,U,d,h),o+=r,A-=r}}g.bindTexture(g.TEXTURE_2D,null),e.boundTextures--,this.drawIdsBufferDirty=!1}updateHighlightedIDsBuffer(e){if(this.highlightedIdsBufferDirty){(!this.highlightedIdsArray||this.highlightedItems.length>this.highlightedIdsArray.length)&&(this.highlightedIdsArray=new Float32Array(this.highlightedItems.length),this.highlightElementOffsets=new Int32Array(this.highlightedItems.length),this.highlightElementCounts=new Int32Array(this.highlightedItems.length)),this.highlightedItems.forEach((l,C)=>{this.highlightedIdsArray[C]=l.geomItemId;const n=this.renderer.glGeomLibrary.getGeomOffsetAndCount(l.geomId);this.highlightElementOffsets[C]=n[0],this.highlightElementCounts[C]=n[1]});for(let l=this.highlightedItems.length;l<this.highlightElementCounts.length;l++)this.highlightElementOffsets[l]=0,this.highlightElementCounts[l]=0;this.highlightedIdsBufferDirty=!1}const g=this.renderer.gl;if(!g.multiDrawElements)return;const t=e.boundTextures++;g.activeTexture(g.TEXTURE0+t);const I=q.nextPow2(Math.ceil(Math.sqrt(this.highlightedItems.length)));this.highlightedIdsTexture?(this.highlightedIdsTexture.width<I||this.highlightedIdsTexture.height<I)&&this.highlightedIdsTexture.resize(I,I):this.highlightedIdsTexture=new Te(this.gl,{format:g.name=="webgl2"?"RED":"ALPHA",type:"FLOAT",width:I,height:I,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1});{const l=this.highlightedIdsTexture,C=this.highlightedIdsTexture.width;g.bindTexture(g.TEXTURE_2D,l.glTex);const n=0,F=0,a=1,U=l.getFormat(),d=l.getType(),s=Math.ceil((F+this.highlightedIdsArray.length)/C);let o=0,A=this.highlightedIdsArray.length,B=F;for(let Q=0;Q<s;Q++){let r;B+A>C?(r=C-B,B=0):r=A;const R=o%C,V=Math.floor(o/C),h=this.highlightedIdsArray.subarray(o,o+r);g.texSubImage2D(g.TEXTURE_2D,n,R,V,r,a,U,d,h),o+=r,A-=r}}g.bindTexture(g.TEXTURE_2D,null),e.boundTextures--}draw(e){if(this.drawIdsBufferDirty?this.updateDrawIDsBuffer(e):this.dirtyGeomIndices.size>0&&this.cleanGeomIds(),this.drawIdsArray.length!=0){if(this.drawIdsTexture){const{drawIdsTexture:g}=e.unifs;this.drawIdsTexture.bindToUniform(e,g)}this.bindAndRender(e,this.drawIdsArray,this.drawElementCounts,this.drawElementOffsets,this.drawOrderToIndex.length)}}drawHighlighted(e){if(this.highlightedItems.length!=0){if(this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(e),this.highlightedIdsTexture){const{drawIdsTexture:g}=e.unifs;this.highlightedIdsTexture.bindToUniform(e,g)}this.bindAndRender(e,this.highlightedIdsArray,this.highlightElementCounts,this.highlightElementOffsets,this.highlightedItems.length)}}drawGeomData(e){if(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(e),this.drawOrderToIndex.length!=0){if(this.drawIdsTexture){const{drawIdsTexture:g}=e.unifs;this.drawIdsTexture.bindToUniform(e,g)}this.bindAndRender(e,this.drawIdsArray,this.drawElementCounts,this.drawElementOffsets,this.drawOrderToIndex.length)}}bindAndRender(e,g,t,I,l){const C=this.gl,n=e.unifs;n.instancedDraw&&C.uniform1i(e.unifs.instancedDraw.location,1),e.bindViewports(n,()=>{this.multiDraw(e,g,t,I,l)})}sortItems(e){const g=new Float32Array(this.drawOrderToIndex.length);this.drawOrderToIndex.forEach(t=>{const I=this.glGeomItems[t];if(I){const l=I.geomItem.boundingBoxParam.value,C=l.center(),n=l.size(),F=C.distanceTo(e)-n;g[t]=F}}),this.drawOrderToIndex.sort((t,I)=>g[I]-g[t]),this.drawOrderToIndex.forEach((t,I)=>{const l=this.glGeomItems[t];l&&(this.drawIdsArray[I]=l.geomItemId,this.indexToDrawIndex[t]=I)}),this.drawIdsBufferDirty=!0,this.viewPos=e}destroy(){this.drawIdsTexture&&this.drawIdsTexture.destroy(),this.highlightedIdsTexture&&this.highlightedIdsTexture.destroy(),this.emit("destructing")}}class bA extends ri{multiDraw(e,g,t,I,l){const C=this.gl;if(C.multiDrawArrays){const{occluded:n}=e.unifs;n&&C.uniform1i(n.location,0),C.multiDrawElements(C.LINES,t,0,C.UNSIGNED_INT,I,0,l),n&&(C.uniform1i(n.location,1),C.depthFunc(C.GREATER),C.multiDrawElements(C.LINES,t,0,C.UNSIGNED_INT,I,0,l),C.depthFunc(C.LEQUAL))}else{const{geomItemId:n,occluded:F}=e.unifs;F&&C.uniform1i(F.location,0);for(let a=0;a<l;a++)C.uniform1i(n.location,g[a]),C.drawElements(C.LINES,t[a],C.UNSIGNED_INT,I[a]);if(F){C.uniform1i(F.location,1),C.depthFunc(C.GREATER);for(let a=0;a<l;a++)C.uniform1i(n.location,g[a]),C.drawElements(C.LINES,t[a],C.UNSIGNED_INT,I[a]);C.depthFunc(C.LEQUAL)}}}}class JA extends ri{multiDraw(e,g,t,I,l){const C=this.gl;if(C.multiDrawArrays)C.multiDrawArrays(C.POINTS,I,0,t,0,l);else{const{geomItemId:n}=e.unifs;for(let F=0;F<l;F++)C.uniform1i(n.location,g[F]),C.drawArrays(C.POINTS,I[F],t[F])}}}class GA extends ri{multiDraw(e,g,t,I,l){const C=this.gl;if(C.multiDrawElements)C.multiDrawElements(C.TRIANGLES,t,0,C.UNSIGNED_INT,I,0,l);else{const{geomItemId:n}=e.unifs;for(let F=0;F<l;F++)C.uniform1i(n.location,g[F]),C.drawElements(C.TRIANGLES,t[F],C.UNSIGNED_INT,I[F])}}}class xa extends Xe{constructor(e,g,t){super();this.glGeomItemSets={},this.glGeomDataShaderKey="",this.glHighlightShaderKey="",this.pass=e,this.gl=g,this.glShader=t.glShader,this.glGeomDataShader=t.glgeomdatashader?t.glgeomdatashader:t.glShader,this.glHighlightShader=t.glselectedshader?t.glselectedshader:t.glShader,this.glShaderKey=t.glShader.getId()+"multidraw-draw",this.glGeomDataShader&&(this.glGeomDataShaderKey=this.glGeomDataShader.getId()+"multidraw-geomdata"),this.glHighlightShader&&(this.glHighlightShaderKey=this.glHighlightShader.getId()+"multidraw-highlight")}getOrCreateGLGeomItemSet(e){let g;if(e instanceof hI){if(this.glGeomItemSets.CompoundGeom)return this.glGeomItemSets.CompoundGeom;g=new WA(this.pass.renderer),this.glGeomItemSets.CompoundGeom=g}else if(e instanceof ht||e instanceof Kg){if(this.glGeomItemSets.GLMesh)return this.glGeomItemSets.GLMesh;g=new GA(this.pass.renderer),this.glGeomItemSets.GLMesh=g}else if(e instanceof sg||e instanceof Gg){if(this.glGeomItemSets.GLLines)return this.glGeomItemSets.GLLines;g=new bA(this.pass.renderer),this.glGeomItemSets.GLLines=g}else if(e instanceof Rt||e instanceof ct){if(this.glGeomItemSets.GLPoints)return this.glGeomItemSets.GLPoints;g=new JA(this.pass.renderer),this.glGeomItemSets.GLPoints=g}else throw new Error("Unsupported geom type:"+e.constructor.name);return g.on("updated",()=>{this.emit("updated")}),g}addGLGeomItem(e){const g=e.geomItem.geomParam.value,t=this.getOrCreateGLGeomItemSet(g);e.GLGeomItemSet=t,t.addGLGeomItem(e)}removeGLGeomItem(e){e.GLGeomItemSet.removeGLGeomItem(e),e.GLGeomItemSet=null}bindShader(e,g,t){const I=this.gl;if(e.isCompiledForTarget(t)||(I.multiDrawElements?g.shaderopts.directives.push(`#define ENABLE_MULTI_DRAW
#extension GL_ANGLE_multi_draw : enable`):g.shaderopts.directives.push("#define ENABLE_MULTI_DRAW"),e.compileForTarget(t,g.shaderopts),g.shaderopts.directives.pop()),!e.bind(g,t))throw new Error("Unable to bind shader:"+e);this.pass.renderer.glGeomItemLibrary.bind(g),this.pass.renderer.glGeomLibrary.bind(g),this.pass.renderer.glMaterialLibrary.bind(g)}draw(e){this.bindShader(this.glShader,e,this.glShaderKey);for(const g in this.glGeomItemSets)this.glGeomItemSets[g].draw(e);this.glShader.unbind(e)}drawHighlightedGeoms(e){if(!!this.glHighlightShader){this.bindShader(this.glHighlightShader,e,this.glHighlightShaderKey);for(const g in this.glGeomItemSets)this.glGeomItemSets[g].drawHighlighted(e);this.glHighlightShader.unbind(e)}}drawGeomData(e){var g;this.bindShader(this.glGeomDataShader,e,this.glGeomDataShaderKey);const t=e.gl,{floatGeomBuffer:I,passId:l,occlusionCulling:C,viewportSize:n}=e.unifs;I&&t.uniform1i(I.location,e.floatGeomBuffer?1:0),l&&t.uniform1i(l.location,e.passIndex),C&&t.uniform1i(C.location,(g=e.occlusionCulling)!==null&&g!==void 0?g:0);for(const F in this.glGeomItemSets)this.glGeomItemSets[F].drawGeomData(e);this.glGeomDataShader.unbind(e)}sortItems(e){for(const g in this.glGeomItemSets)this.glGeomItemSets[g].sortItems(e)}}class Ri extends Ma{constructor(){super();this.__glshadermaterials={},this.__glShaderGeomSets={}}getPassType(){return dg.OPAQUE}filterGeomItem(e){const g=e.materialParam.value;return e.isOpaque()&&g.isOpaque()}checkMaterial(e){return e.isOpaque()}removeAndReAddGeomItem(e){this.removeGeomItem(e),this.__renderer.assignTreeItemToGLPass(e)}addGeomItem(e){super.addGeomItem(e);const t=e.materialParam.value,I=this.renderer.glGeomLibrary,l=this.renderer.glGeomItemLibrary;if(!t.isTextured()&&t.getShaderClass().supportsInstancing()){const d=t.getShaderName();let s=this.__glShaderGeomSets[d];if(!s){const A=this.constructShaders(d);s=new xa(this,this.__gl,A),s.on("updated",()=>{this.__renderer.requestRedraw()}),this.__glShaderGeomSets[d]=s}const o=this.renderer.glGeomItemLibrary.getGLGeomItem(e);return s.addGLGeomItem(o),o.GLShaderGeomSets=s,this.emit("updated"),!0}const C=I.constructGLGeom(e.geomParam.value),n=l.getGLGeomItem(e),F=t.getShaderName(),a=this.renderer.glMaterialLibrary.getGLMaterial(t);let U=this.__glshadermaterials[F];if(!U){const d=this.constructShaders(F);U=new vo(this.__gl,this,d),this.__glshadermaterials[F]=U,U.on("updated",()=>{this.__renderer.requestRedraw()})}return U.addGLGeomItem(n,C,a),!0}removeGeomItem(e){super.removeGeomItem(e);const g=this.renderer.glGeomItemLibrary.getGLGeomItem(e);return g.GLShaderGeomSets?(g.GLShaderGeomSets.removeGLGeomItem(g),g.GLShaderGeomSets=null,!0):(g.GLGeomItemSet&&(g.GLGeomItemSet.removeGLGeomItem(g),g.GLGeomItemSet=null),!0)}removeMaterial(e){const g=e.getShaderName(),t=this.__glshadermaterials[g];if(!t||t!=e.getMetadata("glshaderMaterials")){console.warn("Material not found in pass");return}const I=e.getMetadata("glMaterialGeomItemSets");t.removeMaterialGeomItemSets(I)}__traverseTreeAndDraw(e){for(const g in this.__glShaderGeomSets)this.__glShaderGeomSets[g].draw(e);for(const g in this.__glshadermaterials)this.__glshadermaterials[g].draw(e);e.glGeom&&e.glGeom.unbind(e)}draw(e){const g=this.__gl;g.disable(g.BLEND),g.disable(g.CULL_FACE),g.enable(g.DEPTH_TEST),g.depthFunc(g.LEQUAL),g.depthMask(!0),this.__traverseTreeAndDraw(e),e.viewport.drawSilhouettes(e)}drawHighlightedGeoms(e){const g=this.__gl;g.disable(g.CULL_FACE);for(const t in this.__glShaderGeomSets)this.__glShaderGeomSets[t].drawHighlightedGeoms(e);for(const t in this.__glshadermaterials)this.__glshadermaterials[t].drawHighlightedGeoms(e);e.glGeom&&e.glGeom.unbind(e)}drawGeomData(e){e.passIndex=this.passIndex;const g=this.__gl;g.disable(g.BLEND),g.disable(g.CULL_FACE),g.enable(g.DEPTH_TEST),g.depthFunc(g.LEQUAL),g.depthMask(!0);for(const t in this.__glShaderGeomSets)this.__glShaderGeomSets[t].drawGeomData(e);for(const t in this.__glshadermaterials)this.__glshadermaterials[t].drawGeomData(e);e.glGeom&&e.glGeom.unbind(e)}}zt.registerPass(Ri,dg.OPAQUE);class uA extends Ri{constructor(){super();this.linesGeomDataBuffer=null,this.fattenLinesShader=null,this.quad=null,this.fbo=null}init(e,g){super.init(e,g)}filterGeomItem(e){const g=e.geomParam.value;return g instanceof sg||g instanceof Gg||g instanceof Rt||g instanceof ct}draw(e){const g=this.__gl;g.enable(g.BLEND),g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA),g.enable(g.DEPTH_TEST),g.depthFunc(g.LEQUAL),g.depthMask(!0),this.__traverseTreeAndDraw(e),g.disable(g.BLEND)}drawGeomData(e){const g=this.__gl;if(e.geomDataFbo&&!e.occlusionCulling){this.linesGeomDataBuffer||(this.linesGeomDataBuffer=new Te(g,{type:this.__renderer.floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:1,height:2}),this.fattenLinesShader=new Ha(g),this.quad=new ql(g,new Dt(1,1)));const t=e.geomDataFbo,I=t.width,l=t.height;if(this.linesGeomDataBuffer.width!=I||this.linesGeomDataBuffer.height!=l){this.fbo&&(g.deleteFramebuffer(this.fbo),this.fbo=null),this.linesGeomDataBuffer.resize(I,l),this.fbo=g.createFramebuffer();const C=this.linesGeomDataBuffer.glTex,n=t.__depthTexture;g.name=="webgl2"?(g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.fbo),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,C,0),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,n,0)):(g.bindFramebuffer(g.FRAMEBUFFER,this.fbo),g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,C,0),g.framebufferTexture2D(g.FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,n,0)),hl(g,I,l)}else g.name=="webgl2"?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.fbo):g.bindFramebuffer(g.FRAMEBUFFER,this.fbo);g.colorMask(!0,!0,!0,!0),g.clearColor(0,0,0,0),g.clear(g.COLOR_BUFFER_BIT)}if(super.drawGeomData(e),e.geomDataFbo&&!e.occlusionCulling){e.geomDataFbo.bindForWriting(e),this.fattenLinesShader.bind(e);const{colorTexture:t,screenSize:I}=e.unifs;this.linesGeomDataBuffer.bindToUniform(e,t);const l=e.geomDataFbo;g.uniform2f(I.location,l.width,l.height),this.quad.bindAndDraw(e)}}}zt.registerPass(uA,dg.OPAQUE);class SA extends Ma{constructor(){super();this.itemCount=0,this.__glShaderGeomSets={},this.transparentItems=[],this.transparentItemIndices={},this.freeList=[],this.visibleItems=[],this.prevSortCameraPos=new b,this.sortCameraMovementDistance=0,this.reSort=!1}init(e,g){super.init(e,g),this.itemCount=0,this.__glShaderGeomSets={},this.transparentItems=[],this.transparentItemIndices={},this.freeList=[],this.visibleItems=[],this.prevSortCameraPos=new b(999,999,999),this.sortCameraMovementDistance=.25,this.reSort=!1}getPassType(){return dg.TRANSPARENT}filterGeomItem(e){const g=e.geomParam.value;if(g instanceof sg||g instanceof Rt||g instanceof ct||g instanceof Gg)return!1;const t=e.materialParam.value;return!e.isOpaque()||!t.isOpaque()}resortNeeded(){this.reSort=!0}addGeomItem(e){super.addGeomItem(e),this.itemCount++;const g=this.listenerIDs[e.getId()],t=e.materialParam.value,I=t.getShaderName(),l=this.constructShaders(I);if(!t.isTextured()&&t.getShaderClass().supportsInstancing()){let s=this.__glShaderGeomSets[I];s||(s=new xa(this,this.__gl,l),s.on("updated",()=>{this.renderer.requestRedraw()}),this.__glShaderGeomSets[I]=s);const o=this.renderer.glGeomItemLibrary.getGLGeomItem(e);s.addGLGeomItem(o),g["glGeomItem.visibilityChanged"]=o.on("visibilityChanged",()=>{this.resortNeeded()}),this.emit("updated"),o.GLShaderGeomSets=s,this.reSort=!0;return}const C=this.renderer.glGeomLibrary.constructGLGeom(e.geomParam.value),n=this.renderer.glGeomItemLibrary.getGLGeomItem(e);if(!n)throw new Error("glGeomItem not found for geomItem:"+e.getName());const F=this.renderer.glMaterialLibrary.getGLMaterial(t),a=s=>{if(s.visible)this.visibleItems.push(U);else{const o=this.visibleItems.indexOf(U);this.visibleItems.splice(o,1)}this.reSort=!0};g["glGeomItem.visibilityChanged"]=n.on("visibilityChanged",a),g["GeomMat.valueChanged"]=e.geomMatParam.on("valueChanged",()=>{this.reSort=!0});const U={geomItem:e,shaders:l,glGeom:C,glMaterial:F,glGeomItem:n,material:t};let d;this.freeList.length>0?d=this.freeList.pop():d=this.transparentItems.length,this.transparentItems[d]=U,this.transparentItemIndices[e.getId()]=d,e.isVisible()&&this.visibleItems.push(U),this.reSort=!0}removeGeomItem(e){this.itemCount--;const g=this.listenerIDs[e.getId()];super.removeGeomItem(e);const t=this.renderer.glGeomItemLibrary.getGLGeomItem(e);if(!t)throw new Error("glGeomItem not found for geomItem:"+e.getName());if(t.removeListenerById("visibilityChanged",g["glGeomItem.visibilityChanged"]),t.GLShaderGeomSets)t.GLShaderGeomSets.removeGLGeomItem(t),t.GLShaderGeomSets=null;else{const I=this.transparentItemIndices[e.getId()],l=this.transparentItems[I];delete this.transparentItemIndices[e.getId()],this.transparentItems[I]=null,this.freeList.push(I);const C=this.visibleItems.indexOf(l);C!=-1&&this.visibleItems.splice(C,1)}return this.emit("updated"),!0}sortItems(e){for(const g in this.__glShaderGeomSets)this.__glShaderGeomSets[g].sortItems(e);for(const g of this.visibleItems){const t=g.glGeomItem.geomItem.geomMatParam.value;g.dist=t.translation.distanceTo(e)}this.visibleItems.sort((g,t)=>g.dist>t.dist?-1:g.dist<t.dist?1:0),this.reSort=!1}_drawItem(e,g,t){t.currentGLMaterial!=g.glMaterial&&(t.currentGLMaterial=g.glMaterial,t.currentGLMaterial.bind(e)),t.currentGLGeom!=g.glGeom&&(t.currentGLGeom=g.glGeom,t.currentGLGeom.bind(e)),g.glGeomItem.bind(e),e.bindViewports(e.unifs,()=>{t.currentGLGeom.draw(e)})}_drawItems(e){for(const t in this.__glShaderGeomSets)this.__glShaderGeomSets[t].draw(e);const g={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const t of this.visibleItems){const I=t.shaders.glShader;if(g.currentglShader!=I){if(!I.bind(e,"color"))continue;const l=this.__gl,C=e.unifs;C.instancedDraw&&l.uniform1i(C.instancedDraw.location,0),this.renderer.glGeomItemLibrary.bind(e),g.currentglShader=I}this._drawItem(e,t,g)}}draw(e){if(this.itemCount==0)return;const g=this.__gl,t=e.viewXfo.tr;if(this.reSort||t.distanceTo(this.prevSortCameraPos)>this.sortCameraMovementDistance){if(this.sortItems(t),this.prevSortCameraPos=t,e.vrviewport)this.sortCameraMovementDistance=e.viewScale*.2;else if(e.viewport){const I=e.viewport.getCamera();this.sortCameraMovementDistance=I.getFocalDistance()*.3}}g.enable(g.DEPTH_TEST),g.depthFunc(g.LESS),g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),e.pass="ADD",g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA),g.enable(g.CULL_FACE),g.cullFace(g.BACK),this._drawItems(e),g.disable(g.BLEND),g.depthMask(!0)}drawHighlightedGeoms(e){const g=this.__gl;g.disable(g.CULL_FACE);for(const I in this.__glShaderGeomSets)this.__glShaderGeomSets[I].drawHighlightedGeoms(e);const t={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const I of this.visibleItems){if(!I.geomItem.isHighlighted()||!I.shaders.glselectedshader)continue;const l=I.shaders;if(t.currentglShader!=l.glselectedshader){if(!l.glselectedshader.bind(e,"highlight"))continue;t.currentglShader=l.glselectedshader}const{floatGeomBuffer:C,passId:n,instancedDraw:F}=e.unifs;C&&g.uniform1i(C.location,g.floatGeomBuffer?1:0),n&&g.uniform1i(n.location,this.passIndex),F&&g.uniform1i(F.location,0),this.renderer.glGeomItemLibrary.bind(e),this._drawItem(e,I,t)}t.currentGLGeom&&t.currentGLGeom.unbind(e)}drawGeomData(e){const g=this.__gl;g.disable(g.BLEND),g.disable(g.CULL_FACE),g.enable(g.DEPTH_TEST),g.depthFunc(g.LESS),g.depthMask(!0);for(const I in this.__glShaderGeomSets)this.__glShaderGeomSets[I].drawGeomData(e);const t={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const I of this.visibleItems){if(!I.glGeomItem.geomItem.isSelectable())continue;const l=I.shaders;if(!l.glgeomdatashader)continue;if(t.currentglShader!=l.glgeomdatashader){if(!l.glgeomdatashader.bind(e,"geomdata"))continue;t.currentglShader=l.glgeomdatashader}const{floatGeomBuffer:C,passId:n,instancedDraw:F}=e.unifs;C&&g.uniform1i(C.location,g.floatGeomBuffer?1:0),n&&g.uniform1i(n.location,this.passIndex),F&&g.uniform1i(F.location,0),this.renderer.glGeomItemLibrary.bind(e),this._drawItem(e,I,t)}t.currentGLGeom&&t.currentGLGeom.unbind(e)}}zt.registerPass(SA,dg.TRANSPARENT);var NA=`

precision highp float;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

uniform vec2 pos;
uniform vec2 size;
uniform vec2 srctextureDim;
const int border = 2;

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID();
  v_texCoord = position+0.5;
  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * size * 2.0), 0.0, 1.0);

  vec2 borderVec2 = vec2(float(border), float(border));
  v_texCoord *= (srctextureDim + (borderVec2 * 2.0)) / srctextureDim;
  v_texCoord -= borderVec2 / srctextureDim;
}

`,pA=`
precision highp float;
#define GLSLIFY 1

uniform sampler2D srctexture;
uniform vec2 srctextureDim;
uniform bool alphaFromLuminance;
uniform bool invert;

/* VS Outputs */
varying vec2 v_texCoord;

float luminanceFromRGB(vec3 rgb) {
  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;
}

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
  vec2 pixelCoord = v_texCoord*srctextureDim;
  vec2 uv = v_texCoord;

  // Wrap X coords
  if (pixelCoord.x < 0.0) {
    uv.x += 1.0/srctextureDim.x;
    uv.y = 1.0 - uv.y;
  }
  else if (pixelCoord.x > srctextureDim.x) {
    uv.x -= 1.0/srctextureDim.x;
    uv.y = 1.0 - uv.y;
  }

  // Wrap Y coords
  if (pixelCoord.y < 0.0) {
    uv.y += 1.0/srctextureDim.y;
    uv.x = 1.0 - uv.x;
  }
  else if (pixelCoord.y > srctextureDim.y) {
    uv.y -= 1.0/srctextureDim.y;
    uv.x = 1.0 - uv.x;
  }

  vec4 texel = texture2D(srctexture, uv);

#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  // TODO: check why we pre-multiply alphas here.
  // fragColor = vec4(texel.rgb/texel.a, texel.a);

  if (alphaFromLuminance) {
    fragColor = vec4(texel.rgb, luminanceFromRGB(texel.rgb));
  }
  else {
    fragColor = texel;
  }
  
  if (invert) {
    fragColor = vec4(1.0) - fragColor;
  }

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}

`;class yA extends Pe{constructor(e){super(e,"AtlasLayoutShader");this.setShaderStage("VERTEX_SHADER",NA),this.setShaderStage("FRAGMENT_SHADER",pA)}}class XA extends ZI{constructor(e,g,t="RGBA",I="FLOAT"){super(e);this.__asyncCount=0,this.loaded=!1,this.ready=!1,this.__layout=[],this.__layoutVec4s=[],this.__atlasLayoutShaderBinding=null,this.__atlasLayoutShader=null,this.__name=g,this.__formatParam=t,this.__typeParam=I,this.clearColor=new E(0,0,0,0),this.__subImages=[],this.__layoutNeedsRegeneration=!1,this.__asyncCount=0,this.loaded=!1}incAsyncCount(e=1){this.__asyncCount+=e,this.ready=!1}decAsyncCount(){this.__asyncCount>0&&(this.__asyncCount--,this.__asyncCount==0&&(this.loaded=!0,this.emit("loaded")))}isLoaded(){return this.__asyncCount==0}addSubImage(e){if(e instanceof ug){const g=new Te(this.__gl,e);e.isLoaded()||(this.incAsyncCount(),e.on("loaded",()=>{this.decAsyncCount()})),e.setMetadata("ImageAtlas_gltex",g),g.addRef(this);const t=()=>{this.__layoutNeedsRegeneration=!0,this.renderAtlas()};e.on("updated",t),this.__subImages.push(g)}else{const g=e;g.addRef(this),this.__subImages.push(g)}return this.__layoutNeedsRegeneration=!0,this.__subImages.length-1}removeSubImage(e){let g;if(e instanceof ug){const I=e.getMetadata("ImageAtlas_gltex");g=this.__subImages.indexOf(I),e.deleteMetadata("ImageAtlas_gltex")}else g=this.__subImages.indexOf(e);this.__subImages[g].removeRef(this),this.__subImages.splice(g,1),this.__layoutNeedsRegeneration=!0}getSubImage(e){return this.__subImages[e]}numSubImages(){return this.__layout?this.__layout.length:this.__subImages.length}generateAtlasLayout(e){if(this.__subImages.length==0){this.__layoutNeedsRegeneration=!1;return}const g=2,t=[];this.__subImages.forEach((U,d)=>{t.push({w:U.width+g*2,h:U.height+g*2,area:U.width*U.height,index:d})}),t.sort((U,d)=>U.area>d.area?-1:U.area<d.area?1:0);const I=new gU;I.fit(t),this.__layout=[],t.forEach((U,d)=>{U.fit?this.__layout[U.index]={pos:new f(U.fit.x+g,U.fit.y+g),size:new f(U.w,U.h)}:console.warn("Unable to fit image")});const l=I.root.w,C=I.root.h;this.configure({width:l,height:C,format:this.__typeParam=="FLOAT"&&this.__formatParam=="RGB"?"RGBA":this.__formatParam,type:this.__typeParam,filter:"LINEAR"});const n=this.__gl;if(n.__quadVertexIdsBuffer||n.setupInstancedQuad(),!this.__atlasLayoutShader){this.__atlasLayoutShader=new yA(this.__gl);const U=[];n.name=="webgl2"&&U.push("#define ENABLE_ES3");const d=this.__atlasLayoutShader.compileForTarget("GLImageAtlas",{directives:U});this.__atlasLayoutShaderBinding=og(this.__gl,d.attrs,n.__quadattrbuffers,n.__quadIndexBuffer)}const F=1;let a=Math.round(Math.sqrt(this.__layout.length*F)+.5);if(a=q.nextPow2(a),a%F!=0&&(a+=F-a%F),!n.floatTexturesSupported)this.__layoutVec4s=[],this.__layout.forEach((U,d)=>{this.__layoutVec4s[d]=[U.pos.x/l,U.pos.y/C,U.size.x/l,U.size.y/C]});else{const U=new Float32Array(a*a*4);for(let d=0;d<this.__layout.length;d++){const s=this.__layout[d];new Be(new Float32Array(U.buffer,d*4*4,4)).set(s.pos.x/l,s.pos.y/C,s.size.x/l,s.size.y/C)}!this.__atlasLayoutTexture||this.__atlasLayoutTexture.width!=a||this.__atlasLayoutTexture.height!=a?(this.__atlasLayoutTexture&&this.__atlasLayoutTexture.destroy(),this.__atlasLayoutTexture=new Te(n,{format:"RGBA",type:"FLOAT",filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1,width:a,height:a,data:U})):this.__atlasLayoutTexture.bufferData(U,a,a)}this.textureDesc[0]=this.width,this.textureDesc[1]=this.height,this.textureDesc[2]=this.__atlasLayoutTexture.width,this.__layoutNeedsRegeneration=!1}getLayoutData(e){return this.__layoutVec4s[e]}renderAtlas(e=!1,g=0){if(this.__subImages.length==0)return;this.__layoutNeedsRegeneration&&this.generateAtlasLayout();const t=this.__gl,I={};this.bindForWriting(I,!0),this.__atlasLayoutShader.bind(I,"GLImageAtlas"),this.__atlasLayoutShaderBinding.bind(I);const l=new f(1/this.width,1/this.height),C=I.unifs;for(let n=g;n<this.__subImages.length;n++){const F=this.__subImages[n],a=this.__layout[n];!F.bindToUniform(I,C.srctexture)||(t.uniform2fv(C.pos.location,a.pos.multiply(l).asArray()),t.uniform2fv(C.size.location,a.size.multiply(l).asArray()),t.uniform2f(C.srctextureDim.location,F.width,F.height),t.uniform1i(C.alphaFromLuminance.location,F.alphaFromLuminance?1:0),t.uniform1i(C.invert.location,F.invert?1:0),t.drawQuad(),I.boundTextures--)}e&&this.cleanup(),this.unbind(I),this.emit("updated")}isReady(){return this.__atlasLayoutTexture!=null}bindToUniform(e,g){super.bindToUniform(e,g);const t=e.unifs;if(this.__atlasLayoutTexture){const I=t[g.name+"_layout"];I&&this.__atlasLayoutTexture.bindToUniform(e,I);const l=t[g.name+"_desc"];l&&this.__gl.uniform4fv(l.location,this.textureDesc)}else{const I=t[g.name+"_desc"];I&&this.__gl.uniform4f(I.location,this.width,this.height,0,0)}return!0}cleanup(){for(const e of this.__subImages)e.removeRef(this);this.__subImages=[],this.destroy()}destroy(){this.cleanup(),super.destroy()}}const pg=7;class kA extends Ga{constructor(){super();this.atlas=null,this.indexArrayUpdateNeeded=!1,this.instanceIdsBuffer=null,this.indexArray=new Float32Array(0),this.glshader=null,this.shaderComp={},this.shaderBinding=null,this.modelMatrixArray=[],this.billboardDataArray=[],this.tintColorArray=[],this.width=0,this.drawItemsTexture=null,this.billboards=[],this.dirtyBillboards=new Set,this.freeIndices=[],this.drawCount=0,this.threshold=0,this.updateRequested=!1,this.prevSortCameraPos=new b}init(e,g){super.init(e,g),this.atlas=new XA(this.renderer.gl,"Billboards","RGBA","UNSIGNED_BYTE"),this.atlas.clearColor=new E(1,1,1,0);const t=I=>this.emit("updated",I);this.atlas.on("loaded",t),this.atlas.on("updated",t)}getPassType(){return dg.TRANSPARENT}itemAddedToScene(e,g){return e instanceof cI?(this.addBillboard(e),!0):!1}itemRemovedFromScene(e,g){return e instanceof cI?(this.removeBillboard(e),!0):!1}addBillboard(e){const g=e.imageParam,t=g.value;if(!t){g.on("valueChanged",()=>this.addBillboard(e));return}let I;this.freeIndices.length>0?I=this.freeIndices.pop():I=this.billboards.length;const l=this.atlas.addSubImage(t);e.setMetadata("GLBillboardsPass_Index",I);const C=()=>{e.isVisible()?(this.drawCount++,this.dirtyBillboards.add(I)):this.drawCount--,this.reqUpdateIndexArray()};e.on("visibilityChanged",C);const n=()=>{e.isVisible()&&(this.dirtyBillboards.add(I),this.emit("updated"))};e.globalXfoParam.on("valueChanged",n),e.alphaParam.on("valueChanged",n),e.on("highlightChanged",n),e.isVisible()&&this.drawCount++,this.billboards[I]={billboard:e,imageIndex:l,visibilityChanged:C,updateBillboard:n},this.indexArrayUpdateNeeded=!0,this.requestUpdate()}removeBillboard(e){const g=e.getMetadata("GLBillboardsPass_Index");if(g==-1){console.warn("Billboard already removed.");return}const t=this.billboards[g],I=t.billboard.imageParam.value;this.atlas.removeSubImage(I),e.off("visibilityChanged",t.visibilityChanged),e.off("highlightChanged",t.updateBillboard),e.globalXfoParam.off("valueChanged",t.updateBillboard),e.alphaParam.off("valueChanged",t.updateBillboard),this.billboards[g]=null,this.freeIndices.push(g),e.isVisible()&&this.drawCount--,this.indexArrayUpdateNeeded=!0,this.requestUpdate()}populateBillboardDataArray(e,g,t){const I=e.billboard,l=I.globalXfoParam.value.toMat4(),C=I.pixelsPerMeterParam.value,n=I.pivotParam.value,F=1/C;let a=0;I.alignedToCameraParam.value&&(a|=1<<2),I.drawOnTopParam.value&&(a|=1<<3),I.fixedSizeOnscreenParam.value&&(a|=1<<4);const U=I.alphaParam.value,d=I.colorParam.value,s=g*pg*4,o=new Be(new Float32Array(t.buffer,s*4,4)),A=new Be(new Float32Array(t.buffer,(s+4)*4,4)),B=new Be(new Float32Array(t.buffer,(s+8)*4,4)),Q=new Be(new Float32Array(t.buffer,(s+12)*4,4));if(o.set(l.xAxis.x,l.yAxis.x,l.zAxis.x,l.translation.x),A.set(l.xAxis.y,l.yAxis.y,l.zAxis.y,l.translation.y),B.set(l.xAxis.z,l.yAxis.z,l.zAxis.z,l.translation.z),Q.set(F,a,e.imageIndex,U),new Be(new Float32Array(t.buffer,(s+16)*4,4)).set(n.x,n.y,0,0),new Be(new Float32Array(t.buffer,(s+20)*4,4)).set(d.r,d.g,d.b,d.a),I.isHighlighted()){const V=I.getHighlight();new Be(new Float32Array(t.buffer,(s+24)*4,4)).set(V.r,V.g,V.b,V.a)}}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.emit("updated"))}reqUpdateIndexArray(){this.indexArrayUpdateNeeded||(this.indexArrayUpdateNeeded=!0,this.emit("updated"))}updateIndexArray(){const e=this.__gl;this.indexArray&&this.indexArray.length!=this.drawCount&&(e.deleteBuffer(this.instanceIdsBuffer),this.instanceIdsBuffer=null),this.indexArray=new Float32Array(this.drawCount);let g=0;for(let t=0;t<this.billboards.length;t++)this.billboards[t]&&this.billboards[t].billboard.isVisible()&&(this.indexArray[g]=t,g++);this.instanceIdsBuffer||(this.instanceIdsBuffer=e.createBuffer()),e.bindBuffer(e.ARRAY_BUFFER,this.instanceIdsBuffer),e.bufferData(e.ARRAY_BUFFER,this.indexArray,e.STATIC_DRAW),this.indexArrayUpdateNeeded=!1}updateBillboards(e){const g=()=>{this.indexArrayUpdateNeeded&&this.updateIndexArray();const t=this.__gl;if(!this.glshader){t.__quadVertexIdsBuffer||t.setupInstancedQuad(),this.glshader=new xo(t);const l=this.glshader.compileForTarget("GLBillboardsPass",e.shaderopts);this.shaderBinding=og(t,l.attrs,t.__quadattrbuffers,t.__quadIndexBuffer)}if(this.atlas.renderAtlas(),!t.floatTexturesSupported||!t.drawElementsInstanced){this.modelMatrixArray=[],this.billboardDataArray=[],this.tintColorArray=[],this.indexArray.forEach(l=>{const C=this.billboards[l],n=C.billboard,F=n.globalXfoParam.value.toMat4(),a=n.pixelsPerMeterParam.value,U=1/a;let d=0;n.alignedToCameraParam.value&&(d|=4),n.drawOnTopParam.value&&(d|=8),n.fixedSizeOnscreenParam.value&&(d|=16);const s=n.alphaParam.value,o=n.colorParam.value;this.modelMatrixArray[l]=F.asArray(),this.billboardDataArray[l]=[U,d,C.imageIndex,s],this.tintColorArray[l]=[o.r,o.g,o.b,o.a]}),this.updateRequested=!1;return}let I=Math.round(Math.sqrt((this.billboards.length-this.freeIndices.length)*pg)+.5);if(I%pg!=0&&(I+=pg-I%pg),this.width=I,this.drawItemsTexture)this.drawItemsTexture.resize(I,I);else{const l={format:"RGBA",type:"FLOAT",width:I,height:I,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1};this.drawItemsTexture=new Te(t,l),this.drawItemsTexture.clear()}this.indexArray.forEach(l=>{l!=-1&&this.updateBillboard(l)}),this.updateRequested=!1};this.atlas.isLoaded()?g():this.atlas.on("loaded",g)}updateBillboard(e){if(this.drawCount==0||!this.drawItemsTexture)return;const g=this.billboards[e];if(!g.billboard.isVisible())return;const t=this.__gl,I=new Float32Array(pg*4);this.populateBillboardDataArray(g,0,I),t.bindTexture(t.TEXTURE_2D,this.drawItemsTexture.glTex);const l=e*pg%this.width,C=Math.floor(e*pg/this.width),n=pg,F=1,a=this.drawItemsTexture.getType(),U=this.drawItemsTexture.getFormat();if(a==t.FLOAT)t.texSubImage2D(t.TEXTURE_2D,0,l,C,n,F,U,a,I);else{const d=q.convertFloat32ArrayToUInt16Array(I);t.texSubImage2D(t.TEXTURE_2D,0,l,C,n,F,U,a,d)}}sort(e){for(const t of this.billboards){const{billboard:I}=t;if(I&&I.isVisible()){const l=I.globalXfoParam.value;t.dist=l.tr.distanceTo(e)}}this.indexArray.sort((t,I)=>t==-1?1:I==-1||this.billboards[t].dist>this.billboards[I].dist?-1:this.billboards[t].dist<this.billboards[I].dist?1:0);const g=this.__gl;g.floatTexturesSupported&&this.instanceIdsBuffer&&(g.bindBuffer(g.ARRAY_BUFFER,this.instanceIdsBuffer),g.bufferData(g.ARRAY_BUFFER,this.indexArray,g.STATIC_DRAW))}__draw(e,g){const t=this.__gl;if(!this.glshader)return;this.glshader.bind(e,g),this.shaderBinding.bind(e);const I=e.unifs,{atlasBillboards:l,passId:C,floatGeomBuffer:n,inVR:F}=e.unifs;if(l&&this.atlas.bindToUniform(e,I.atlasBillboards),n&&t.uniform1i(n.location,e.floatGeomBuffer?1:0),C&&t.uniform1i(C.location,this.passIndex),F&&t.uniform1i(F.location,e.vrPresenting?1:0),!t.floatTexturesSupported||!t.drawElementsInstanced){const{modelMatrix:a,billboardData:U,tintColor:d,layoutData:s}=e.unifs,o=this.indexArray.length;for(let A=0;A<o;A++)t.uniformMatrix4fv(a.location,!1,this.modelMatrixArray[A]),t.uniform4fv(U.location,this.billboardDataArray[A]),t.uniform4fv(d.location,this.tintColorArray[A]),t.uniform4fv(s.location,this.atlas.getLayoutData(this.billboards[A].imageIndex)),e.bindViewports(I,()=>{t.drawQuad()})}else{const{instancesTexture:a,instancesTextureSize:U}=e.unifs;this.drawItemsTexture.bindToUniform(e,a),t.uniform1i(U.location,this.width);{const d=e.attrs.instanceIds.location;t.enableVertexAttribArray(d),t.bindBuffer(t.ARRAY_BUFFER,this.instanceIdsBuffer),t.vertexAttribPointer(d,1,t.FLOAT,!1,4,0),t.vertexAttribDivisor(d,1)}e.bindViewports(I,()=>{t.drawElementsInstanced(t.TRIANGLES,6,t.UNSIGNED_SHORT,0,this.drawCount)})}}draw(e){if(this.drawCount==0||(this.updateRequested&&this.updateBillboards(e),this.dirtyBillboards.size>0&&(this.dirtyBillboards.forEach(l=>{this.updateBillboard(l)}),this.dirtyBillboards.clear()),this.indexArrayUpdateNeeded&&this.updateIndexArray(),!this.glshader))return;const g=e.viewXfo.tr;if(g.distanceTo(this.prevSortCameraPos)>this.threshold)if(this.sort(g),this.prevSortCameraPos=g.clone(),this.drawCount>1){const l=this.indexArray[this.indexArray.length-1],C=this.indexArray[this.indexArray.length-2],n=this.billboards[l].billboard,F=this.billboards[C].billboard,a=n.globalXfoParam.value.tr,U=F.globalXfoParam.value.tr;this.threshold=a.distanceTo(U)}else this.threshold=9999;const I=this.__gl;I.depthMask(!1),I.disable(I.CULL_FACE),I.enable(I.BLEND),I.blendEquation(I.FUNC_ADD),I.blendFunc(I.SRC_ALPHA,I.ONE_MINUS_SRC_ALPHA),this.__draw(e,"DRAW_COLOR"),I.disable(I.BLEND),I.depthMask(!0)}drawHighlightedGeoms(e){this.drawCount!=0&&this.__draw(e,"DRAW_HIGHLIGHT")}drawGeomData(e){this.drawCount!=0&&this.__draw(e,"DRAW_GEOMDATA")}getGeomItemAndDist(e){let g,t;if(e instanceof Float32Array?(g=Math.round(e[1]),t=e[3]):(g=e[0]+((e[1]&63)<<8),t=q.decode16BitFloatFrom2xUInt8(e.slice(2,3))),g>=this.billboards.length){console.warn("Invalid Draw Item id:"+g+" NumBillboards:"+(this.billboards.length-1));return}return{geomItem:this.billboards[g].billboard,componentId:0,dist:t}}}zt.registerPass(kA,dg.TRANSPARENT);class fA extends Ri{constructor(){super()}getPassType(){return dg.OVERLAY}filterGeomItem(e){if(e.isOverlay())return!0;const g=e.materialParam.value.getShaderClass();return!!(g&&g.isOverlay())}draw(e){const g=this.__gl;g.clear(g.DEPTH_BUFFER_BIT),g.enable(g.CULL_FACE),g.cullFace(g.BACK),g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),e.pass="ADD",g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA),this.__traverseTreeAndDraw(e),g.disable(g.BLEND)}drawGeomData(e){const g=this.__gl;g.clear(g.DEPTH_BUFFER_BIT),g.enable(g.CULL_FACE),g.cullFace(g.BACK),g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),e.pass="ADD",g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA),super.drawGeomData(e),g.disable(g.BLEND),g.enable(g.DEPTH_TEST)}}zt.registerPass(fA,dg.OVERLAY);const ml=new OF(Aa);console.log(`Zea Engine v${Aa}`);var EA="@zeainc/zea-ux",TA="4.0.5",YA="Zea UX",vA="dist/index.cjs.js",hi="dist/index.esm.js",MA="dist/index.umd.js",HA="dist/zea-ux.d.ts",xA=["dist/","css/"],wA=["Zea","UX"],DA={"build:tsc":"npx tsc","build:tsc:watch":"npx tsc --watch","clean:build":"rm -Rf dist/ buildcache","build:rollup":"rollup -c","build:rollup:watch":"rollup -w -c",build:"npm-run-all clean:build build:rollup",dev:"npm-run-all --parallel build:rollup:watch start:watch",start:"es-dev-server --app-index testing-e2e/index.html --open","start:watch":"es-dev-server --app-index testing-e2e/index.html --open --watch",release:"standard-version",dist:"yarn publish --access=public",docs:"adg --config adg.config.json","docs-w":"adg -w --config=adg.config.json","docs:serve":"docsify serve docs/",lint:"eslint src/",prepare:"yarn run build",test:"jest",generate:"plop","test:coverage":"jest --coverage","test:debug":"node --inspect ./node_modules/jest/bin/jest.js --runInBand --watch","test:watch":"jest --watch","test:e2e":"percy exec cypress run --browser chrome --headless","test:e2e:watch":"percy exec cypress open","to-cleanup":"rm -Rf dist/ node_modules/ yarn.lock","to-link-packages":"yarn link @zeainc/zea-engine"},KA={type:"git",url:"git+ssh://git@github.com/ZeaInc/zea-ux.git"},LA={url:"https://github.com/ZeaInc/zea-ux/issues"},zA="https://github.com/ZeaInc/zea-ux#readme",_A="Zea Inc.",OA="MIT",PA={"@babel/preset-env":"^7.12.7","@percy/cypress":"^2.3.1","@rollup/plugin-commonjs":"^21.0.1","@rollup/plugin-json":"^4.1.0","@rollup/plugin-node-resolve":"^13.0.6","@zeainc/jsdocs2md":"^0.0.7","@zeainc/zea-collab":"^6.0.1","@zeainc/zea-engine":"^4",canvas:"^2.6.1",copyfiles:"^2.4.1",cypress:"^5.6.0","docsify-cli":"^4.4.2",documentation:"^13.1.0","es-dev-server":"^1.60.1",eslint:"^7.14.0","eslint-config-google":"^0.14.0","eslint-config-prettier":"^6.15.0","eslint-plugin-prettier":"^3.2.0",husky:"^4.3.0","husky-run":"^0.0.0",jest:"^26.6.3","npm-run-all":"^4.1.5",plop:"^2.7.4",prettier:"^2.2.1",rollup:"^2.34.1","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-dts":"^4.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-terser":"^7.0.2","rollup-plugin-typescript":"^1.0.1","standard-version":"^9.0.0","ts-node":"^10.4.0",tslib:"^2.3.1",typescript:"^4.4.4"},jA={"dom-to-image":"^2.6.0"},qA={hooks:{"disabled=pre-commit":"npm test","disabled=pre-push":"npm test"}},$A={name:EA,version:TA,description:YA,main:vA,module:hi,browser:MA,types:HA,files:xA,keywords:wA,scripts:DA,repository:KA,bugs:LA,homepage:zA,author:_A,license:OA,devDependencies:PA,dependencies:jA,husky:qA};function Et(i){if(typeof i=="undefined"){console.warn("undefined event");return}if(i instanceof fg)return i.pointerRay;if(i instanceof nt)return i.touches[0].touchRay;if(i instanceof it){const e=i.controller.getTipXfo(),g=e.ori.getZaxis().negate();return new Ag(e.tr,g)}else return console.warn("unhandled pointer event"),new Ag}class mI extends H{constructor(e){super(e);this.captured=!1,this.colorParam=new Fg("Color",new E),this.highlightColorParam=new Fg("HighlightColor",new E(1,1,1)),this.addParameter(this.colorParam),this.addParameter(this.highlightColorParam)}highlight(){this.emit("highlight")}unhighlight(){this.emit("unhighlight")}getManipulationPlane(){const e=this.globalXfoParam.value;return new Ag(e.tr,e.ori.getZaxis())}onPointerEnter(e){this.highlight()}onPointerLeave(e){this.unhighlight()}onPointerDown(e){e.setCapture(this),e.stopPropagation(),this.captured=!0,this.changedTouches&&this.highlight(),e.pointerType=="mouse"||e.pointerType=="touch"?this.handlePointerDown(e):e.pointerType=="xr"&&this.onVRControllerButtonDown(e)}onPointerMove(e){this.captured&&(e.stopPropagation(),e.pointerType=="mouse"||e.pointerType=="touch"?this.handlePointerMove(e):e.pointerType=="xr"&&this.onVRPoseChanged(e)),e.preventDefault()}onPointerUp(e){this.captured&&(e.releaseCapture(),e.stopPropagation(),this.captured=!1,this.changedTouches&&this.unhighlight(),e.pointerType=="mouse"||e.pointerType=="touch"?this.handlePointerUp(e):e.pointerType=="xr"&&this.onVRControllerButtonUp(e))}onWheel(e){}handlePointerDown(e){this.gizmoRay=this.getManipulationPlane();const g=Et(e),t=g.intersectRayPlane(this.gizmoRay);this.grabPos=g.pointAtDist(t),this.onDragStart(e)}handlePointerMove(e){const g=Et(e),t=g.intersectRayPlane(this.gizmoRay);this.holdPos=g.pointAtDist(t),this.onDrag(e)}handlePointerUp(e){const g=Et(e);if(g){const t=g.intersectRayPlane(this.gizmoRay);this.releasePos=g.pointAtDist(t)}this.onDragEnd(e)}onVRControllerButtonDown(e){this.activeController=e.controller;const g=this.activeController.getTipXfo().clone(),t=this.getManipulationPlane(),I=g.tr.subtract(t.start),l=g.tr.subtract(t.dir.scale(I.dot(t.dir)));this.grabPos=l,this.onDragStart(e)}onVRPoseChanged(e){if(this.activeController){const g=this.activeController.getTipXfo(),t=this.getManipulationPlane(),I=g.tr.subtract(t.start),l=g.tr.subtract(t.dir.scale(I.dot(t.dir)));this.holdPos=l,this.onDrag(e)}}onVRControllerButtonUp(e){this.activeController==e.controller&&(this.activeController.getTipXfo(),this.onDragEnd(e),this.activeController=void 0)}onDragStart(e){console.warn("@Handle#onDragStart - Implement me!",e)}onDrag(e){console.warn("@Handle#onDrag - Implement me!",e)}onDragEnd(e){console.warn("@Handle#onDragEnd - Implement me!",e)}setTargetParam(e,g){console.warn("setTargetParam not implemented")}}class wa extends mI{constructor(e){super(e)}handlePointerDown(e){this.gizmoRay=this.getManipulationPlane();const g=Et(e);this.grabDist=g.intersectRayVector(this.gizmoRay)[1];const t=this.gizmoRay.pointAtDist(this.grabDist);this.grabPos=t,this.onDragStart(e)}handlePointerMove(e){const t=Et(e).intersectRayVector(this.gizmoRay)[1];this.holdPos=this.gizmoRay.pointAtDist(t),this.holdDist=t,this.value=t,this.delta=t-this.grabDist,this.onDrag(e)}handlePointerUp(e){const g=Et(e);if(g){const t=g.intersectRayVector(this.gizmoRay)[1],I=this.gizmoRay.pointAtDist(t);this.releasePos=I}this.onDragEnd(e)}onVRControllerButtonDown(e){this.gizmoRay=this.getManipulationPlane(),this.activeController=e.controller;const g=this.activeController.getTipXfo();this.grabDist=g.tr.subtract(this.gizmoRay.start).dot(this.gizmoRay.dir),this.grabPos=this.gizmoRay.start.add(this.gizmoRay.dir.scale(this.grabDist)),this.onDragStart(e)}onVRPoseChanged(e){const t=this.activeController.getTipXfo().tr.subtract(this.gizmoRay.start).dot(this.gizmoRay.dir);this.holdPos=this.gizmoRay.start.add(this.gizmoRay.dir.scale(t)),this.value=t,this.delta=t-this.grabDist,this.onDrag(e)}onVRControllerButtonUp(e){this.activeController==e.controller&&(this.onDragEnd(),this.activeController=void 0)}}class Ge extends Xe{constructor(){super();this.__undoStack=[],this.__redoStack=[],this.__currChange=null,this.__currChangeUpdated=this.__currChangeUpdated.bind(this)}flush(){for(const e of this.__undoStack)e.destroy();this.__undoStack=[];for(const e of this.__redoStack)e.destroy();this.__redoStack=[],this.__currChange&&(this.__currChange.off("updated",this.__currChangeUpdated),this.__currChange=null)}addChange(e){this.__currChange&&this.__currChange.off&&this.__currChange.off("updated",this.__currChangeUpdated),this.__undoStack.push(e),this.__currChange=e,this.__currChange.on&&this.__currChange.on("updated",this.__currChangeUpdated);for(const g of this.__redoStack)g.destroy();this.__redoStack=[],this.emit("changeAdded",{change:e})}getCurrentChange(){return this.__currChange}__currChangeUpdated(e){this.emit("changeUpdated",e)}undo(e=!0){if(this.__undoStack.length>0){this.__currChange&&(this.__currChange.off("updated",this.__currChangeUpdated),this.__currChange=null);const g=this.__undoStack.pop();g.undo(),e&&(this.__redoStack.push(g),this.emit("changeUndone"))}}cancel(){this.__undoStack.length>0&&(this.__currChange&&(this.__currChange.off("updated",this.__currChangeUpdated),this.__currChange=null),this.__undoStack.pop().undo())}redo(){if(this.__redoStack.length>0){const e=this.__redoStack.pop();e.redo(),this.__undoStack.push(e),this.emit("changeRedone")}}constructChange(e){return S.constructClass(e)}static isChangeClassRegistered(e){try{const g=S.getClassName(Object.getPrototypeOf(e).constructor);return!0}catch{return!1}}static getChangeClassName(e){return S.getClassName(Object.getPrototypeOf(e).constructor)}static registerChange(e,g){S.register(e,g)}static getInstance(){return rC||(rC=new Ge),rC}}let rC;class Ng extends Xe{constructor(e){super();this.secondaryChanges=[],this.suppressPrimaryChange=!1,this.name=e||Ge.getChangeClassName(this)}addSecondaryChange(e){const g=this.secondaryChanges.length;return this.secondaryChanges.push(e),g}undo(){this.secondaryChanges.forEach(e=>e.undo())}redo(){this.secondaryChanges.forEach(e=>e.redo())}update(e){throw new Error("Implement me")}toJSON(e){return{}}fromJSON(e,g){}updateFromJSON(e){this.update(e)}destroy(){}}class _t extends Ng{constructor(e,g){if(e){super(e?e.getName()+" Changed":"ParameterValueChange");this.prevValue=e.getValue(),this.param=e,g!=null&&(this.nextValue=g,this.param.value=this.nextValue)}else super()}undo(){this.param&&!this.suppressPrimaryChange&&(this.param.value=this.prevValue),super.undo()}redo(){this.param&&!this.suppressPrimaryChange&&(this.param.value=this.nextValue),super.redo()}update(e){!this.param||(this.nextValue=e.value,this.param.value=this.nextValue,this.emit("updated",e))}toJSON(e){const g={name:this.name,paramPath:this.param.getPath()};return this.nextValue!=null&&(this.nextValue.toJSON?g.value=this.nextValue.toJSON():g.value=this.nextValue),g}fromJSON(e,g){const t=g.appData.scene.getRoot().resolvePath(e.paramPath,1);if(!t||!(t instanceof Le)){console.warn("resolvePath is unable to resolve",e.paramPath);return}this.param=t,this.prevValue=this.param.getValue(),this.prevValue.clone?this.nextValue=this.prevValue.clone():this.nextValue=this.prevValue,this.name=e.name,e.value!=null&&this.updateFromJSON(e)}updateFromJSON(e){!this.param||(this.nextValue.fromJSON?this.nextValue.fromJSON(e.value):this.nextValue=e.value,this.param.value=this.nextValue)}}Ge.registerChange("ParameterValueChange",_t);class ci extends Ve{constructor(e){super(e);this.baseColorParam=new ye("BaseColor",new E(1,1,.5)),this.maintainScreenSizeParam=new k("MaintainScreenSize",0),this.overlayParam=new k("Overlay",0,[0,1]),this.__shaderName="HandleShader",this.addParameter(this.baseColorParam),this.addParameter(this.maintainScreenSizeParam),this.addParameter(this.overlayParam)}}S.register("HandleMaterial",ci);class eB extends Pe{constructor(e){super(e);this.__shaderStages.VERTEX_SHADER=ue.parseShader("HandleShader.vertexShader",`
precision highp float;

attribute vec3 positions;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif

<%include file="GLSLUtils.glsl"/>
<%include file="stack-gl/transpose.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

#ifdef ENABLE_MULTI_DRAW
<%include file="materialparams.glsl"/>
#else
uniform int MaintainScreenSize;
uniform float Overlay;
#endif

/* VS Outputs */
varying float v_drawItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif

void main(void) {
  int drawItemId = getDrawItemId();
  v_drawItemId = float(drawItemId);
  v_geomItemData  = getInstanceData(drawItemId);

  //////////////////////////////////////////////
  // Material

#ifdef ENABLE_MULTI_DRAW
  vec2 materialCoords = v_geomItemData.zw;
  vec4 materialValue1 = getMaterialValue(materialCoords, 1);
  int maintainScreenSize = int(materialValue1.x + 0.5);
  float overlay = materialValue1.y;
#else
  int maintainScreenSize = MaintainScreenSize;
  float overlay = Overlay;
#endif

  //////////////////////////////////////////////
  // Matrix
  
  mat4 modelMatrix = getModelMatrix(drawItemId);
  if (maintainScreenSize != 0) {
    // Remove the scale from the model matrix.
    vec3 row0 = normalize(vec3(modelMatrix[0][0], modelMatrix[0][1], modelMatrix[0][2]));
    vec3 row1 = normalize(vec3(modelMatrix[1][0], modelMatrix[1][1], modelMatrix[1][2]));
    vec3 row2 = normalize(vec3(modelMatrix[2][0], modelMatrix[2][1], modelMatrix[2][2]));
    modelMatrix = mat4(
      row0.x, row0.y, row0.z, 0.0,
      row1.x, row1.y, row1.z, 0.0,
      row2.x, row2.y, row2.z, 0.0,
      modelMatrix[3][0], modelMatrix[3][1], modelMatrix[3][2], 1.0
    );
  }
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  if (maintainScreenSize != 0) {
    float dist = modelViewMatrix[3][2];
    float sc = abs(dist); // Note: items in front of the camera will have a negative value here.
    mat4 scmat = mat4(
      sc, 0.0, 0.0, 0.0,
      0.0, sc, 0.0, 0.0,
      0.0, 0.0, sc, 0.0,
      0.0, 0.0, 0.0, 1.0
    );
    modelViewMatrix = modelViewMatrix * scmat;
  }

  vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);
  gl_Position = projectionMatrix * viewPos;

  if(overlay > 0.0){
    gl_Position.z = mix(gl_Position.z, -gl_Position.w, overlay);
  }

  v_viewPos = viewPos.xyz;
  v_textureCoord = texCoords;
  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y
}
`),this.__shaderStages.FRAGMENT_SHADER=ue.parseShader("HandleShader.fragmentShader",`
precision highp float;

<%include file="GLSLUtils.glsl"/>
<%include file="math/constants.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="stack-gl/gamma.glsl"/>
<%include file="materialparams.glsl"/>


#if defined(DRAW_COLOR)

uniform color BaseColor;

#ifdef ENABLE_TEXTURES
uniform sampler2D BaseColorTex;
uniform int BaseColorTexType;
#endif

#elif defined(DRAW_GEOMDATA)

uniform int isOrthographic;
import 'surfaceGeomData.glsl'

#elif defined(DRAW_HIGHLIGHT)

#ifdef ENABLE_FLOAT_TEXTURES
vec4 getHighlightColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);
}
#else // ENABLE_FLOAT_TEXTURES

uniform vec4 highlightColor;

vec4 getHighlightColor() {
    return highlightColor;
}

#endif // ENABLE_FLOAT_TEXTURES

#endif // DRAW_HIGHLIGHT

/* VS Outputs */
varying float v_drawItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif


#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  int drawItemId = int(v_drawItemId + 0.5);

  //////////////////////////////////////////////
  // Color
#if defined(DRAW_COLOR)


#ifdef ENABLE_MULTI_DRAW

  vec2 materialCoords = v_geomItemData.zw;
  vec4 baseColor = toLinear(getMaterialValue(materialCoords, 0));

#else // ENABLE_MULTI_DRAW

#ifndef ENABLE_TEXTURES
  vec4 baseColor = toLinear(BaseColor);
#else
  vec4 baseColor = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);
#endif // ENABLE_TEXTURES

#endif // ENABLE_MULTI_DRAW

  fragColor = baseColor;

#ifdef ENABLE_INLINE_GAMMACORRECTION
  fragColor.rgb = toGamma(fragColor.rgb);
#endif

  //////////////////////////////////////////////
  // GeomData
#elif defined(DRAW_GEOMDATA)

  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_drawItemId, isOrthographic);
  //////////////////////////////////////////////
  // Highlight
#elif defined(DRAW_HIGHLIGHT)
  
  fragColor = getHighlightColor(drawItemId);

#endif // DRAW_HIGHLIGHT


#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`)}static getPackedMaterialData(e){const g=new Float32Array(8),t=e.getParameter("BaseColor").getValue();return g[0]=t.r,g[1]=t.g,g[2]=t.b,g[3]=t.a,g[4]=e.getParameter("MaintainScreenSize").getValue(),g[5]=e.getParameter("Overlay").getValue(),g}static isOverlay(){return!0}static getMaterialTemplate(){return gB}}const gB=new ci("HandleShader_template");S.register("HandleShader",eB);const Da=(i,e)=>{i.update();const g=i.getVertexAttribute("positions");for(let t=0;t<g.getCount();t++){const I=g.getValueRef(t),l=e.transformVec3(I);I.set(l.x,l.y,l.z)}};class eC extends Ng{constructor(e,g){super("SelectionXfoChange");this.treeItems=[],this.localXfos=[],this.prevValues=[],this.newValues=[],this.treeItems=e,this.baseXfo=g;const t=g.inverse();this.treeItems.forEach(I=>{this.localXfos.push(t.multiply(I.globalXfoParam.value)),this.prevValues.push(I.globalXfoParam.value),this.newValues.push(I.globalXfoParam.value)})}setDeltaXfo(e){const g=this.baseXfo.clone();g.tr=e.tr.add(g.tr),g.ori=e.ori.multiply(g.ori),g.sc=e.sc.multiply(g.sc),this.prevValues.forEach((t,I)=>{const l=g.multiply(this.localXfos[I]);this.newValues[I]=l,this.treeItems[I].globalXfoParam.value=this.newValues[I].clone()}),this.emit("updated")}setDone(){this.emit("done")}undo(){this.treeItems.forEach((e,g)=>{e.globalXfoParam.value=this.prevValues[g]}),super.undo()}redo(){this.treeItems.forEach((e,g)=>{e.globalXfoParam.value=this.newValues[g]}),super.redo()}update(e){this.newValues=e.newValues,this.treeItems.forEach((g,t)=>{g.globalXfoParam.value=this.newValues[t]}),this.emit("updated",e)}toJSON(e){const g={name:this.name,treeItems:[],prevValues:[],newValues:[]};return this.treeItems.forEach((t,I)=>{g.treeItems[I]=this.treeItems[I].getPath(),g.prevValues[I]=this.prevValues[I].toJSON(),g.newValues[I]=this.newValues[I].toJSON()}),g}fromJSON(e,g){const t=g.appData.scene.getRoot().resolvePath(e.paramPath,1);if(!t||!(t instanceof Le)){console.warn("resolvePath is unable to resolve",e.paramPath);return}e.treeItems.forEach((I,l)=>{this.treeItems[l]=g.appData.scene.getRoot().resolvePath(I,1),this.prevValues[l]||(this.prevValues[l]=new v),this.prevValues[l].fromJSON(e.prevValues[l]),this.newValues[l]||(this.newValues[l]=new v),this.newValues[l].fromJSON(e.newValues[l])})}updateFromJSON(e){e.treeItems.forEach((g,t)=>{this.prevValues[t].fromJSON(e.prevValues[t]),this.newValues[t].fromJSON(e.newValues[t])})}}Ge.registerChange("SelectionXfoChange",eC);class Cl extends wa{constructor(e,g=.1,t=.003,I=new E){super(e);this.colorParam.value=I,this.handleMat=new Ve("handle","HandleShader"),this.handleMat.getParameter("BaseColor").value=I,this.handleMat.getParameter("MaintainScreenSize").value=1,this.handleMat.getParameter("Overlay").value=.9;const l=new Ci(t,g,64);l.baseZAtZeroParam.value=!0;const C=new li(t*4,t*10,64,!0),n=new ge("handle",l,this.handleMat),F=new ge("tip",C,this.handleMat),a=new v;a.tr.set(0,0,g),Da(C,a),this.colorParam.on("valueChanged",()=>{this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}),this.addChild(n),this.addChild(F)}highlight(){super.highlight(),this.handleMat.getParameter("BaseColor").value=this.highlightColorParam.getValue()}unhighlight(){super.unhighlight(),this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}setSelectionGroup(e){this.selectionGroup=e}setTargetParam(e,g=!0){if(this.param=e,g){const t=()=>{this.globalXfoParam.value=e.getValue()};t(),e.on("valueChanged",t)}}getTargetParam(){return this.param?this.param:this.globalXfoParam}onDragStart(e){const g=this.getTargetParam();if(this.baseXfo=g.getValue(),this.selectionGroup){const t=this.selectionGroup.getItems();this.change=new eC(Array.from(t),this.globalXfoParam.value),Ge.getInstance().addChange(this.change)}else this.change=new _t(g),Ge.getInstance().addChange(this.change)}onDrag(e){const g=this.holdPos.subtract(this.grabPos);if(this.selectionGroup){const t=this.change,I=new v(g);t.setDeltaXfo(I)}else{const t=this.baseXfo.clone();t.tr.addInPlace(g),this.change.update({value:t})}}onDragEnd(e){this.selectionGroup&&this.change.setDone(),this.change=null}}class Ka extends mI{constructor(e){super(e);this.deltaXfo=new v,this.offsetXfo=new v}setSelectionGroup(e){this.selectionGroup=e}setTargetParam(e,g=!0){if(this.param=e,g){const t=()=>{this.globalXfoParam.value=e.getValue()};t(),e.on("valueChanged",t)}}getTargetParam(){return this.param?this.param:this.globalXfoParam}onDragStart(e){if(this.baseXfo=this.globalXfoParam.value.clone(),this.baseXfo.sc.set(1,1,1),this.deltaXfo=new v,this.vec0=this.grabPos.subtract(this.baseXfo.tr),this.grabCircleRadius=this.vec0.length(),this.vec0.normalizeInPlace(),this.selectionGroup){this.offsetXfo=this.localXfoParam.value.inverse();const g=this.selectionGroup.getItems();this.change=new eC(Array.from(g),this.baseXfo),Ge.getInstance().addChange(this.change)}else{const g=this.getTargetParam(),t=g.value;this.offsetXfo=this.baseXfo.inverse().multiply(t),this.change=new _t(g),Ge.getInstance().addChange(this.change)}}onDrag(e){const g=this.holdPos.subtract(this.baseXfo.tr);g.normalizeInPlace();const t=1;let I=this.vec0.angleTo(g)*t;if(this.vec0.cross(g).dot(this.baseXfo.ori.getZaxis())<0&&(I=-I),this.range&&(I=q.clamp(I,this.range[0],this.range[1])),(e instanceof fg||e instanceof nt)&&e.shiftKey){const n=22.5*(Math.PI/180);I=Math.floor(I/n)*n}if(this.deltaXfo.ori.setFromAxisAndAngle(this.baseXfo.ori.getZaxis(),I),this.selectionGroup)this.change.setDeltaXfo(this.deltaXfo);else{const C=this.baseXfo.multiply(this.deltaXfo).multiply(this.offsetXfo);this.change.update({value:C})}}onDragEnd(e){this.selectionGroup&&this.change.setDone(),this.change=null}}class il extends Ka{constructor(e,g,t,I=new E(1,1,0)){super(e);this.radiusParam=new k("Radius",g),this.colorParam.value=I,this.addParameter(this.radiusParam),this.handleMat=new Ve("handle","HandleShader"),this.handleMat.getParameter("BaseColor").value=I,this.handleMat.getParameter("MaintainScreenSize").value=1,this.handleMat.getParameter("Overlay").value=.9;const l=new ba(t,g,64,Math.PI*.5);this.handle=new ge("handle",l,this.handleMat),this.handleXfo=new v,this.radiusParam.on("valueChanged",()=>{g=this.radiusParam.getValue(),l.outerRadiusParam.value=g,l.innerRadiusParam.value=g*.02}),this.colorParam.on("valueChanged",()=>{this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}),this.addChild(this.handle)}highlight(){super.highlight(),this.handleMat.getParameter("BaseColor").value=this.highlightColorParam.getValue()}unhighlight(){super.unhighlight(),this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}getBaseXfo(){return this.globalXfoParam.value}onDragStart(e){super.onDragStart(e)}onDrag(e){super.onDrag(e)}onDragEnd(e){super.onDragEnd(e)}}class tB extends mI{constructor(e){super(e);this.fullXfoManipulationInVR=!0}setSelectionGroup(e){this.selectionGroup=e}setTargetParam(e,g=!0){if(this.param=e,g){const t=()=>{this.globalXfoParam.value=e.getValue()};t(),e.on("valueChanged",t)}}getTargetParam(){return this.param?this.param:this.globalXfoParam}onDragStart(e){this.grabPos=this.grabPos;const g=this.getTargetParam();if(this.baseXfo=g.value,this.selectionGroup){const t=this.selectionGroup.getItems();this.change=new eC(Array.from(t),this.globalXfoParam.value),Ge.getInstance().addChange(this.change)}else this.change=new _t(g),Ge.getInstance().addChange(this.change)}onDrag(e){const g=this.holdPos.subtract(this.grabPos);if(this.selectionGroup){const t=this.change,I=new v(g);t.setDeltaXfo(I)}else{const t=this.baseXfo.clone();t.tr.addInPlace(g),this.change.update({value:t})}}onDragEnd(e){this.selectionGroup&&this.change.setDone(),this.change=null}onVRControllerButtonDown(e){if(this.fullXfoManipulationInVR){this.activeController=e.controller;const g=this.activeController.getTipXfo(),t=this.globalXfoParam.value;this.grabOffset=g.inverse().multiply(t)}else super.onVRControllerButtonDown(e)}onVRPoseChanged(e){if(this.fullXfoManipulationInVR){const t=this.activeController.getTipXfo().multiply(this.grabOffset);if(this.change)this.change.update({value:t});else{const I=this.getTargetParam();I.value=t}}else super.onVRPoseChanged(e)}onVRControllerButtonUp(e){this.fullXfoManipulationInVR?this.change=null:super.onVRControllerButtonUp(e)}}class nl extends tB{constructor(e,g,t,I=new E){super(e);this.sizeParam=new k("Size",g),this.addParameter(this.sizeParam),this.colorParam.value=I,this.handleMat=new Ve("handle","HandleShader"),this.handleMat.getParameter("BaseColor").value=I,this.handleMat.getParameter("MaintainScreenSize").value=1,this.handleMat.getParameter("Overlay").value=.9;const l=new Hl(g,g,g*.02),C=new v;C.tr=t,Da(l,C),this.handle=new ge("handle",l,this.handleMat),this.sizeParam.on("valueChanged",()=>{g=this.sizeParam.getValue(),l.sizeXParam.value=g,l.sizeYParam.value=g,l.sizeZParam.value=g*.02}),this.colorParam.on("valueChanged",()=>{this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}),this.addChild(this.handle)}highlight(){super.highlight(),this.handleMat.getParameter("BaseColor").value=this.highlightColorParam.getValue()}unhighlight(){super.unhighlight(),this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}}class IB extends H{constructor(e=.1,g=.003){super("XfoHandle");this.highlightColorParam=new Fg("HighlightColor",new E(1,1,1)),this.highlightColorParam.on("valueChanged",()=>{const a=this.highlightColorParam.getValue();this.traverse(U=>{U instanceof mI&&(U.highlightColorParam.value=a)})}),this.addParameter(this.highlightColorParam);const t=new H("Translate");this.addChild(t);const I=new E(1,.1,.1),l=new E("#32CD32"),C=new E("#1E90FF");I.a=1,l.a=1,C.a=1;{const a=new Cl("linearX",e,g,I),U=new v;U.ori.setFromAxisAndAngle(new b(0,1,0),Math.PI*.5),a.localXfoParam.value=U,t.addChild(a)}{const a=new Cl("linearY",e,g,l),U=new v;U.ori.setFromAxisAndAngle(new b(1,0,0),Math.PI*-.5),a.localXfoParam.value=U,t.addChild(a)}{const a=new Cl("linearZ",e,g,C);t.addChild(a)}const n=e*.35;{const a=new nl("planarXY",n,new b(n*.5,n*.5,0),C),U=new v;a.localXfoParam.value=U,t.addChild(a)}{const a=new nl("planarYZ",n,new b(n*-.5,n*.5,0),I),U=new v;U.ori.setFromAxisAndAngle(new b(0,1,0),Math.PI*.5),a.localXfoParam.value=U,t.addChild(a)}{const a=new nl("planarXZ",n,new b(n*.5,n*.5,0),l),U=new v;U.ori.setFromAxisAndAngle(new b(1,0,0),Math.PI*.5),a.localXfoParam.value=U,t.addChild(a)}const F=new H("Rotate");this.addChild(F);{const a=new il("rotationX",e*.75,g,I),U=new v;U.ori.setFromEulerAngles(new lt(Math.PI*-.5,Math.PI*-.5,0)),a.localXfoParam.value=U,F.addChild(a)}{const a=new il("rotationY",e*.75,g,l),U=new v;U.ori.setFromAxisAndAngle(new b(1,0,0),Math.PI*-.5),a.localXfoParam.value=U,F.addChild(a)}{const a=new il("rotationZ",e*.75,g,C),U=new v;U.ori.setFromAxisAndAngle(new b(0,0,1),Math.PI*.5),a.localXfoParam.value=U,F.addChild(a)}}showHandles(e){e?this.setVisible(!0):this.setVisible(!1)}setTargetParam(e,g=!0){this.param=e,this.traverse(t=>{t instanceof mI&&t.setTargetParam(e,!1)})}setSelectionGroup(e){this.traverse(g=>{(g instanceof Cl||g instanceof nl||g instanceof il)&&g.setSelectionGroup(e)})}}class lB extends ag{constructor(e,g){super();this.xfoModeInput=new xU("InitialXfoMode"),this.xfoOutput=new Yl("GroupGlobalXfo"),this.addInput(this.xfoModeInput).setParam(e),this.addOutput(this.xfoOutput).setParam(g),this.currGroupXfo=new v}addItem(e){const g=new Pg("MemberGlobalXfo"+this.getNumInputs());g.setParam(e.globalXfoParam),this.addInput(g),this.setDirty()}removeItem(e){const g=e.globalXfoParam;for(let t=1;t<this.getNumInputs();t++){const I=this.getInputByIndex(t);if(I.getParam()==g){this.removeInput(I),this.setDirty();return}}throw new Error("Item not found in SelectionGroupXfoOperator")}backPropagateValue(e){const g=this.currGroupXfo.inverse(),t=e.multiply(g);t.ori.normalizeInPlace(),this.currGroupXfo=t.multiply(this.currGroupXfo);for(let I=1;I<this.getNumInputs();I++){const l=this.getInputByIndex(I),C=l.getValue(),n=t.multiply(C);l.setValue(n)}}evaluate(){if(this.currGroupXfo=new v,this.getNumInputs()==1){this.xfoOutput.setClean(this.currGroupXfo);return}const e=this.xfoModeInput.getValue();if(e==at.INITIAL_XFO_MODES.manual){this.currGroupXfo=this.xfoOutput.getValue().clone();return}else if(e==at.INITIAL_XFO_MODES.first){const g=this.getInputByIndex(1).getValue();this.currGroupXfo.tr=g.tr.clone(),this.currGroupXfo.ori=g.ori.clone()}else if(e==at.INITIAL_XFO_MODES.average){this.currGroupXfo.ori.set(0,0,0,0);let g=0;for(let t=1;t<this.getNumInputs();t++){const I=this.getInputByIndex(t).getValue();this.currGroupXfo.tr.addInPlace(I.tr),g==0&&this.currGroupXfo.ori.addInPlace(I.ori),g++}this.currGroupXfo.tr.scaleInPlace(1/g)}else if(e==at.INITIAL_XFO_MODES.globalOri){let g=0;for(let t=1;t<this.getNumInputs();t++){const I=this.getInputByIndex(t).getValue();this.currGroupXfo.tr.addInPlace(I.tr),g++}this.currGroupXfo.tr.scaleInPlace(1/g)}else throw new Error("Invalid KinematicGroup.INITIAL_XFO_MODES.");this.currGroupXfo.ori.normalizeInPlace(),this.xfoOutput.setClean(this.currGroupXfo)}}const rn={disabled:0,manual:1,first:2,average:3,globalOri:4};class Zi extends wI{constructor(e){super();this.initialXfoModeParam=new OC("InitialXfoMode",rn.average,["manual","first","average","global"]);let g,t;e.selectionOutlineColor?g=e.selectionOutlineColor:g=new E(3/255,227/255,172/255,.1),e.branchSelectionOutlineColor?t=e.branchSelectionOutlineColor:(t=g.lerp(new E("white"),.5),t.a=.1),this.highlightColorParam.value=g,this.addParameter(new Fg("SubtreeHighlightColor",t)),this.itemsParam.setFilterFn(I=>I instanceof jg),this.addParameter(this.initialXfoModeParam),this.selectionGroupXfoOp=new lB(this.initialXfoModeParam,this.globalXfoParam)}static get INITIAL_XFO_MODES(){return rn}clone(){const e=new Zi;return e.copyFrom(this),e}bindItem(e,g){if(e instanceof H){const t=this.highlightColorParam.value;t.a=this.highlightFillParam.value,e.addHighlight("selected"+this.getId(),t,!1);const I=this.getParameter("SubtreeHighlightColor").getValue();e.getChildren().forEach(l=>{l instanceof H&&l.addHighlight("branchselected"+this.getId(),I,!0)}),this.selectionGroupXfoOp.addItem(e)}}unbindItem(e,g){e instanceof H&&(e.removeHighlight("selected"+this.getId()),e.getChildren().forEach(t=>{t instanceof H&&t.removeHighlight("branchselected"+this.getId(),!0)}),this.selectionGroupXfoOp.removeItem(e))}}class kt extends Ng{constructor(e,g,t){super("SelectionChange");this.__selectionManager=e,this.__prevSelection=g,this.__newSelection=t}undo(){this.__selectionManager.setSelection(this.__prevSelection,!1)}redo(){this.__selectionManager.setSelection(this.__newSelection,!1)}toJSON(e){const g=super.toJSON(e),t=[];for(const I of this.__newSelection)t.push(I.getPath());return g.itemPaths=t,g}fromJSON(e,g){super.fromJSON(e,g),this.__selectionManager=g.appData.selectionManager,this.__prevSelection=new Set(this.__selectionManager.getSelection());const t=g.appData.scene.getRoot(),I=new Set;for(const l of e.itemPaths)I.add(t.resolvePath(l,1));this.__newSelection=I,this.__selectionManager.setSelection(this.__newSelection,!1)}}Ge.registerChange("SelectionChange",kt);class La extends Ng{constructor(e,g){super("Selection Visibility Change");this.selection=e,this.state=g,this._changeItemsVisibility(this.state)}undo(){this._changeItemsVisibility(!this.state)}redo(){this._changeItemsVisibility(this.state)}_changeItemsVisibility(e){for(const g of this.selection)g.getParameter("Visible").value=e}}Ge.registerChange("ToggleSelectionVisibility",La);class CB extends Xe{constructor(e,g={}){super();this.leadSelection=void 0,this.appData=e,this.selectionGroup=new Zi(g),g.enableXfoHandles===!0&&(this.xfoHandle=new IB(.1,.002),this.xfoHandle.setSelectionGroup(this.selectionGroup),this.xfoHandle.setVisible(!1),this.xfoHandle.highlightColorParam.value=new E(1,1,0),this.xfoHandleVisible=!0,this.selectionGroup.addChild(this.xfoHandle)),this.appData.renderer&&this.setRenderer(this.appData.renderer)}setRenderer(e){if(this.__renderer==e){console.warn("Renderer already set on SelectionManager");return}this.__renderer=e,this.__renderer.addTreeItem(this.selectionGroup)}setXfoMode(e){this.xfoHandle&&(this.selectionGroup.initialXfoModeParam.value=e)}showHandles(e){this.xfoHandleVisible=e}updateHandleVisibility(){if(!this.xfoHandle)return;const e=this.selectionGroup.getItems(),g=Array.from(e).length>0;this.xfoHandle.setVisible(g&&this.xfoHandleVisible),this.__renderer.requestRedraw()}getSelection(){return this.selectionGroup.getItems()}setSelection(e,g=!0){const t=new Set(this.selectionGroup.getItems()),I=new Set(t);for(const l of e)t.has(l)||(l.setSelected(!0),t.add(l));for(const l of t)e.has(l)||(l.setSelected(!1),t.delete(l));if(this.selectionGroup.setItems(t),t.size>0?this.__setLeadSelection(t.values().next().value):this.__setLeadSelection(),this.updateHandleVisibility(),g){const l=new kt(this,I,t);Ge.getInstance().addChange(l)}this.emit("selectionChanged",{prevSelection:I,selection:t})}__setLeadSelection(e){this.leadSelection!=e&&(this.leadSelection=e,this.emit("leadSelectionChanged",{treeItem:e}))}toggleItemSelection(e,g=!0){const t=new Set(this.selectionGroup.getItems()),I=new Set(t);if(g&&!(t.size==1&&t.has(e))){let n=!0;if(t.has(e)){let F=1;e.traverse(a=>{t.has(a)&&F++}),n=F!=t.size}n&&(Array.from(t).forEach(F=>{F.setSelected(!1)}),t.clear())}let l;t.has(e)?(e.setSelected(!1),t.delete(e),l=!1):(e.setSelected(!0),t.add(e),l=!0),this.selectionGroup.setItems(t),l&&t.size===1?this.__setLeadSelection(e):l||(t.size===1?this.__setLeadSelection(t.values().next().value):t.size===0&&this.__setLeadSelection());const C=new kt(this,I,t);Ge.getInstance().addChange(C),this.updateHandleVisibility(),this.emit("selectionChanged",{prevSelection:I,selection:t})}clearSelection(e=!0){const g=new Set(this.selectionGroup.getItems());if(g.size==0)return!1;let t;e&&(t=new Set(g));for(const I of g)I.setSelected(!1);if(g.clear(),this.selectionGroup.setItems(g),this.__setLeadSelection(),this.updateHandleVisibility(),e){const I=new kt(this,t,g);Ge.getInstance().addChange(I),this.emit("selectionChanged",{selection:g,prevSelection:t})}return!0}selectItems(e,g=!0){const t=new Set(this.selectionGroup.getItems()),I=new Set(t);g&&t.clear();for(const C of e)t.has(C)||(C.setSelected(!0),t.add(C));const l=new kt(this,I,t);Ge.getInstance().addChange(l),this.selectionGroup.setItems(t),t.size===1?this.__setLeadSelection(t.values().next().value):t.size===0&&this.__setLeadSelection(),this.updateHandleVisibility(),this.emit("selectionChanged",{prevSelection:I,selection:t})}deselectItems(e){const g=new Set(this.selectionGroup.getItems()),t=new Set(g);for(const l of e)g.has(l)&&(l.setSelected(!1),g.delete(l));this.selectionGroup.setItems(g);const I=new kt(this,t,g);Ge.getInstance().addChange(I),g.size===1?this.__setLeadSelection(g.values().next().value):g.size===0&&this.__setLeadSelection(),this.updateHandleVisibility(),this.emit("selectionChanged",{prevSelection:t,selection:g})}toggleSelectionVisibility(){if(this.leadSelection){const e=this.selectionGroup.getItems(),g=!this.leadSelection.getVisible(),t=new La(e,g);Ge.getInstance().addChange(t)}}startPickingMode(e,g,t,I){console.log(e),this.__pickCB=g,this.__pickFilter=t,this.__pickCount=I,this.__picked=[]}pickingFilter(e){return this.__pickFilter(e)}pickingModeActive(){return this.__pickCB!=null}cancelPickingMode(){this.__pickCB=void 0}pick(e){if(this.__pickCB){if(Array.isArray(e))this.__pickFilter?this.__picked=this.__picked.concat(e.filter(this.__pickFilter)):this.__picked=this.__picked.concat(e);else{if(this.__pickFilter&&!this.__pickFilter(e))return;this.__picked.push(e)}this.__picked.length==this.__pickCount&&(this.__pickCB(this.__picked),this.__pickCB=void 0)}}}class iB extends Ng{constructor(e,g,t){if(e){super(e.getName()+" Added");this.treeItem=e,this.owner=g,this.selectionManager=t,this.prevSelection=new Set(this.selectionManager.getSelection()),this.treeItemIndex=this.owner.getChildIndex(this.owner.addChild(this.treeItem)),this.selectionManager.setSelection(new Set([this.treeItem]),!1)}else super()}undo(){this.treeItem instanceof ag?this.treeItem.detach():this.treeItem instanceof H&&this.treeItem.traverse(e=>{e instanceof ag&&e.detach()},!1),this.owner.removeChild(this.treeItemIndex),this.selectionManager&&this.selectionManager.setSelection(this.prevSelection,!1)}redo(){this.treeItem instanceof ag?this.treeItem.reattach():this.treeItem instanceof H&&this.treeItem.traverse(e=>{e instanceof ag&&e.reattach()},!1),this.owner.addChild(this.treeItem),this.selectionManager&&this.selectionManager.setSelection(new Set([this.treeItem]),!1)}toJSON(e){return{name:this.name,treeItem:this.treeItem.toJSON(e),treeItemPath:this.treeItem.getPath(),treeItemIndex:this.treeItemIndex}}fromJSON(e,g){const t=S.constructClass(e.treeItem.type);if(!t){console.warn("resolvePath is unable to construct",e.treeItem);return}this.name=e.name,this.treeItem=t,this.treeItem.fromJSON(e.treeItem,g),this.treeItemIndex=this.owner.getChildIndex(this.owner.addChild(this.treeItem))}destroy(){}}Ge.registerChange("TreeItemAddChange",iB);class nB extends Ng{constructor(e,g){if(e){super(e.getName()+" Moved");this.treeItem=e,this.oldOwner=this.treeItem.getOwner(),this.oldOwnerIndex=this.oldOwner.getChildIndex(this.treeItem),this.newOwner=g,this.newOwner.addChild(this.treeItem,!0)}else super()}undo(){this.oldOwner.insertChild(this.treeItem,this.oldOwnerIndex,!0)}redo(){this.newOwner.addChild(this.treeItem,!0)}toJSON(e){return{name:this.name,treeItemPath:this.treeItem.getPath(),newOwnerPath:this.newOwner.getPath()}}fromJSON(e,g){if(!g||!g.scene)return;const t=g.scene.getRoot().resolvePath(e.treeItemPath,1);if(!t){console.warn("resolvePath is unable to resolve",e.treeItemPath);return}const I=g.scene.getRoot().resolvePath(e.newOwnerPath,1);if(!I){console.warn("resolvePath is unable to resolve",e.newOwnerPath);return}this.name=e.name,this.treeItem=t,this.newOwner=I,this.oldOwner=this.treeItem.getOwner(),this.oldOwnerIndex=this.oldOwner.getChildIndex(this.treeItem),this.newOwner.addChild(this.treeItem,!0)}}Ge.registerChange("TreeItemMoveChange",nB);class aB extends Ng{constructor(e,g){super();if(this.items=[],this.itemOwners=[],this.itemPaths=[],this.itemIndices=[],e){this.selectionManager=g.selectionManager,this.prevSelection=new Set(this.selectionManager.getSelection()),this.items=e,this.newSelection=new Set(this.prevSelection);const t=[];this.items.forEach(I=>{const l=I.getOwner(),C=l.getChildIndex(I);t.push(I.getName()),this.itemOwners.push(l),this.itemPaths.push(I.getPath()),this.itemIndices.push(C),this.selectionManager&&this.newSelection.has(I)&&this.newSelection.delete(I),I instanceof ag?I.detach():I instanceof H&&I.traverse(n=>{n instanceof ag&&n.detach(),this.selectionManager&&this.newSelection.has(n)&&this.newSelection.delete(n)},!1),l.removeChild(C)}),this.selectionManager.setSelection(this.newSelection,!1),this.name=t+" Deleted"}}undo(){this.items.forEach((e,g)=>{this.itemOwners[g].insertChild(e,this.itemIndices[g],!1,!1),e instanceof ag?e.reattach():e instanceof H&&e.traverse(t=>{t instanceof ag&&t.reattach()},!1)}),this.selectionManager&&this.selectionManager.setSelection(this.prevSelection,!1)}redo(){this.selectionManager&&this.selectionManager.setSelection(this.newSelection,!1),this.items.forEach((e,g)=>{this.itemOwners[g].removeChild(this.itemIndices[g]),e instanceof ag?e.detach():e instanceof H&&e.traverse(t=>{t instanceof ag&&t.detach()},!1)})}toJSON(e){const g={name:this.name,items:[],itemPaths:this.itemPaths,itemIndices:this.itemIndices};return this.items.forEach(t=>{g.items.push(t.toJSON())}),g}fromJSON(e,g){this.name=e.name,e.itemPaths.forEach(t=>{const I=g.scene.getRoot().resolvePath(t,1);if(!I){console.warn("resolvePath is unable to resolve",t);return}const l=I.getOwner();this.itemOwners.push(l),this.itemPaths.push(I.getPath()),this.itemIndices.push(l.getChildIndex(I))})}destroy(){}}Ge.registerChange("TreeItemsRemoveChange",aB);new Dt(1,1);class FB extends Ng{constructor(e){super("HoldObjectsChange");this.__selection=[],this.__prevXfos=[],this.__newXfos=[],e&&this.update(e)}undo(){for(let e=0;e<this.__selection.length;e++)this.__selection[e]&&this.__prevXfos[e]&&(this.__selection[e].globalXfoParam.value=this.__prevXfos[e])}redo(){for(let e=0;e<this.__selection.length;e++)this.__selection[e]&&this.__newXfos[e]&&(this.__selection[e].globalXfoParam.value=this.__newXfos[e])}update(e){if(e.newItem)this.__selection[e.newItemId]=e.newItem,this.__prevXfos[e.newItemId]=e.newItem.globalXfoParam.value;else if(e.changeXfos)for(let g=0;g<e.changeXfoIds.length;g++){const t=e.changeXfoIds[g];!this.__selection[t]||(this.__selection[t].globalXfoParam.value=e.changeXfos[g],this.__newXfos[t]=e.changeXfos[g])}this.emit("updated",e)}toJSON(e){const g=super.toJSON(e),t=[];for(let I=0;I<this.__selection.length;I++)this.__selection[I]?t[I]=this.__selection[I].getPath():t.push(null);return g.itemPaths=t,g}fromJSON(e,g){super.fromJSON(e,g);const t=g.appData.scene.getRoot();this.__selection=[];for(let I=0;I<e.itemPaths.length;I++){const l=e.itemPaths[I];if(l&&l!=""){const C=t.resolvePath(l,1);C!=t&&(this.__selection[I]=C,this.__prevXfos[I]=C.globalXfoParam.value)}}}updateFromJSON(e){this.update(e)}}Ge.registerChange("HoldObjectsChange",FB);class mt extends Ng{constructor(e,g){super(e);this.parentItem=g||null}setParentAndXfo(e,g){this.parentItem=e;const t=this.parentItem.generateUniqueName(this.geomItem.getName());this.geomItem.setName(t),this.geomItem.globalXfoParam.value=g,this.parentItem.addChild(this.geomItem)}undo(){this.parentItem.removeChild(this.parentItem.getChildIndex(this.geomItem))}redo(){this.parentItem.addChild(this.geomItem,!1,!1)}toJSON(e){const g=super.toJSON(e);g.parentItemPath=this.parentItem.getPath(),g.geomItemName=this.geomItem.getName(),g.geomItemXfo=this.geomItem.localXfoParam.getValue();const t=this.geomItem.getParameter("Material").getValue();return g.color=t.getParameter("BaseColor").getValue(),g}fromJSON(e,g){const t=g.appData.scene.getRoot();this.parentItem=t.resolvePath(e.parentItemPath,1),this.geomItem.setName(this.parentItem.generateUniqueName(e.geomItemName));const I=new v;if(I.fromJSON(e.geomItemXfo),this.geomItem.localXfoParam.value=I,this.childIndex=this.parentItem.getChildIndex(this.parentItem.addChild(this.geomItem,!1)),e.color){const l=new E(.7,.2,.2);l.fromJSON(e.color);const C=this.geomItem.getParameter("Material").getValue();C.getParameter("BaseColor").value=l}}destroy(){}}class UB extends mt{constructor(e,g,t,I=.001){super("Create Line");this.line=new sg,this.line.setNumVertices(2),this.line.setNumSegments(1),this.line.getVertexAttribute("positions").setValue(0,new b),this.line.setSegmentVertexIndices(0,0,1);const C=new wl("Line");t&&(C.baseColorParam.value=t),C.lineThicknessParam&&(C.lineThicknessParam.value=I),this.geomItem=new ge("Line",this.line,C),e&&g&&this.setParentAndXfo(e,g)}update(e){e.p1&&(this.line.positions.getValueRef(1).setFromOther(e.p1),this.line.setBoundingBoxDirty(),this.line.emit("geomDataChanged")),this.emit("updated",e)}fromJSON(e,g){if(super.fromJSON(e,g),e.color){const t=new E;t.fromJSON(e.color);const I=this.geomItem.materialParam.value;I.getParameter("BaseColor").value=t}}}Ge.registerChange("CreateLineChange",UB);class dB extends mt{constructor(e,g,t){super("Create Cone");const I=new li(0,0);I.heightParam.value=0;const l=new Ve("Cone","SimpleSurfaceShader");this.geomItem=new ge("Cone",I,l),e&&g&&(l.getParameter("BaseColor").value=t,this.setParentAndXfo(e,g))}update(e){e.radius&&(this.geomItem.getParameter("Geometry").getValue().radiusParam.value=e.radius),e.height&&(this.geomItem.getParameter("Geometry").getValue().getParameter("Height").value=e.height),this.emit("updated",e)}}Ge.registerChange("CreateConeChange",dB);class sB extends mt{constructor(e,g){super("CreateCircle");this.circle=new Ii(0,64);const t=new Ve("circle","FatLinesShader");t.getParameter("BaseColor").value=new E(.7,.2,.2),this.geomItem=new ge("Circle",this.circle,t),e&&g&&this.setParentAndXfo(e,g)}update(e){this.circle.radiusParam.value=e.radius,this.emit("updated",e)}toJSON(){const e=super.toJSON();return e.radius=this.circle.radiusParam.value,e}updateFromJSON(e){console.log("CreateCircleChange:",e),e.radius&&(this.circle.radiusParam.value=e.radius)}}Ge.registerChange("CreateCircleChange",sB);class oB extends mt{constructor(e,g){super("CreateRect");this.rect=new ti(0,0);const t=new Ve("circle","FatLinesShader");t.getParameter("BaseColor").value=new E(.7,.2,.2),this.geomItem=new ge("Rect",this.rect,t),e&&g&&this.setParentAndXfo(e,g)}update(e){if(e.baseSize&&(this.rect.sizeXParam.value=e.baseSize[0],this.rect.sizeYParam.value=e.baseSize[1]),e.tr){const g=this.geomItem.localXfoParam.getValue();g.tr.fromJSON(e.tr),this.geomItem.localXfoParam.value=g}this.emit("updated",e)}}Ge.registerChange("CreateRectChange",oB);class AB extends mt{constructor(e,g,t,I=.001){super("CreateFreehandLine");this.vertexCount=100,this.used=0,this.line=new sg,this.line.setNumVertices(this.vertexCount),this.line.setNumSegments(this.vertexCount-1),this.line.getVertexAttribute("positions").setValue(0,new b);const C=new wl("freeHandLine");t&&(C.baseColorParam.value=t),C.lineThicknessParam&&(C.lineThicknessParam.value=I),this.geomItem=new ge("freeHandLine",this.line,C),e&&g&&this.setParentAndXfo(e,g)}update(e){this.used++;let g=!1;this.used>=this.line.getNumSegments()&&(this.vertexCount=this.vertexCount+100,this.line.setNumVertices(this.vertexCount),this.line.setNumSegments(this.vertexCount-1),g=!0),this.line.getVertexAttribute("positions").setValue(this.used,e.point),this.line.setSegmentVertexIndices(this.used-1,this.used-1,this.used),this.line.setBoundingBoxDirty(),g?this.line.emit("geomDataTopologyChanged",{topologyChanged:!0}):this.line.emit("geomDataChanged",{topologyChanged:!0}),this.emit("updated",e)}toJSON(e){const g=super.toJSON(e),t=this.geomItem.materialParam.value;return g.lineThickness=t.lineThicknessParam.value,g.color=t.baseColorParam.value,g}fromJSON(e,g){if(e.lineThickness){const t=this.geomItem.materialParam.value;t.lineThicknessParam.value=e.lineThickness}if(e.color){const t=new E(.7,.2,.2);t.fromJSON(e.color);const I=this.geomItem.materialParam.value;I.baseColorParam.value=t}super.fromJSON(e,g)}}Ge.registerChange("CreateFreehandLineChange",AB);class BB extends mt{constructor(e,g,t){super("CreateSphere",e);this.sphere=new Kt(0,24,12);const I=new Ve("Sphere","SimpleSurfaceShader");this.geomItem=new ge("Sphere",this.sphere,I),this.geomItem.setSelectable(!1),e&&g&&t&&(I.getParameter("BaseColor").value=t,this.setParentAndXfo(e,g))}update(e){this.sphere.radiusParam.value=e.radius,this.emit("updated",e)}toJSON(){const e=super.toJSON();return e.radius=this.sphere.radiusParam.getValue(),e}updateFromJSON(e){e.radius&&(this.sphere.radiusParam.value=e.radius)}}Ge.registerChange("CreateSphereChange",BB);class QB extends mt{constructor(e,g,t){super("CreateCuboid");this.cuboid=new Hl(0,0,0,!0);const I=new Ve("Cuboid","SimpleSurfaceShader");this.geomItem=new ge("Cuboid",this.cuboid,I),e&&g&&(I.getParameter("BaseColor").value=t,this.setParentAndXfo(e,g))}update(e){if(e.baseSize&&(this.cuboid.sizeXParam.value=e.baseSize[0],this.cuboid.sizeYParam.value=e.baseSize[1]),e.tr){const g=this.geomItem.localXfoParam.getValue();g.tr.fromJSON(e.tr),this.geomItem.localXfoParam.value=g}e.height&&(this.cuboid.sizeZParam.value=e.height),this.emit("updated",e)}}Ge.registerChange("CreateCuboidChange",QB);class VB extends wa{constructor(e,g=.5,t=.02,I=new E("#F9CE03")){super(e);this.handleXfo=new v,this.baseBarXfo=new v,this.topBarXfo=new v,this.lengthParam=new k("Length",g),this.handleRadiusParam=new k("HandleRadius",t),this.barRadiusParam=new k("BarRadius",t*.25),this.addParameter(this.lengthParam),this.addParameter(this.handleRadiusParam),this.addParameter(this.barRadiusParam),this.colorParam.value=I,this.handleMat=new Ve("handle","FlatSurfaceShader"),this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue();const l=new Ve("topBar","FlatSurfaceShader");l.getParameter("BaseColor").value=new E(.5,.5,.5);const C=new Ci(t*.25,1,64,2,!0,!0),n=new Kt(t,64);this.handle=new ge("handle",n,this.handleMat),this.baseBar=new ge("baseBar",C,this.handleMat),this.topBar=new ge("topBar",C,l),this.barRadiusParam.on("valueChanged",()=>{C.radiusParam.value=this.barRadiusParam.getValue()}),this.handleRadiusParam.on("valueChanged",()=>{n.radiusParam.value=this.handleRadiusParam.getValue()}),this.lengthParam.on("valueChanged",()=>{this.__updateSlider(this.value)}),this.colorParam.on("valueChanged",()=>{this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}),this.addChild(this.handle),this.addChild(this.baseBar),this.addChild(this.topBar),this.__updateSlider(0)}highlight(){super.highlight(),this.handleMat.getParameter("BaseColor").value=this.highlightColorParam.getValue()}unhighlight(){super.unhighlight(),this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}setTargetParam(e){this.param=e;const g=()=>{this.__updateSlider(e.getValue())};g(),e.on("valueChanged",g)}__updateSlider(e){this.value=e;const g=this.param,t=g&&g.getRange()?g.getRange():[0,1],I=q.remap(e,t[0],t[1],0,1),l=this.lengthParam.getValue();this.baseBarXfo.sc.z=I*l,this.handleXfo.tr.z=I*l,this.topBarXfo.tr.z=I*l,this.topBarXfo.sc.z=(1-I)*l,this.handle.localXfoParam.value=this.handleXfo,this.baseBar.localXfoParam.value=this.baseBarXfo,this.topBar.localXfoParam.value=this.topBarXfo}onDragStart(e){this.handleXfo.sc.x=this.handleXfo.sc.y=this.handleXfo.sc.z=1.2,this.handle.localXfoParam.value=this.handleXfo,this.param&&(this.change=new _t(this.param),Ge.getInstance().addChange(this.change))}onDrag(e){const g=this.lengthParam.getValue(),t=this.param,I=t&&t.getRange()?t.getRange():[0,1],l=q.clamp(q.remap(this.value,0,g,I[0],I[1]),I[0],I[1]);if(!this.param){this.__updateSlider(l),this.value=l;return}this.change.update({value:l})}onDragEnd(e){this.change=null,this.handleXfo.sc.x=this.handleXfo.sc.y=this.handleXfo.sc.z=1,this.handle.localXfoParam.value=this.handleXfo}toJSON(e){const g=super.toJSON(e);return this.param&&(g.targetParam=this.param.getPath()),g}fromJSON(e,g){super.fromJSON(e,g),e.targetParam&&g.resolvePath(e.targetParam).then(t=>{this.setTargetParam(t)})}}S.register("SliderHandle",VB);class rB extends Ka{constructor(e,g=1,t=1,I=.02,l=new E(1,1,0)){super(e);this.handleXfo=new v,this.handleGeomOffsetXfo=new v,this.arcRadiusParam=new k("ArcRadius",g),this.arcAngleParam=new k("ArcAngle",t),this.handleRadiusParam=new k("HandleRadius",I),this.addParameter(this.arcRadiusParam),this.addParameter(this.arcAngleParam),this.addParameter(this.handleRadiusParam),this.colorParam.value=l,this.handleMat=new Ve("handleMat","HandleShader"),this.handleMat.getParameter("BaseColor").value=l;const C=new Ii(g,64,t),n=new Kt(I,64);this.handle=new ge("handle",n,this.handleMat),this.arc=new ge("arc",C,this.handleMat),this.handleGeomOffsetXfo.tr.x=g,this.handle.geomOffsetXfoParam.value=this.handleGeomOffsetXfo,this.range=[0,t],this.arcAngleParam.on("valueChanged",()=>{const F=this.arcAngleParam.getValue();C.angleParam.value=F,this.range=[0,F]}),this.arcRadiusParam.on("valueChanged",()=>{const F=this.arcRadiusParam.getValue();C.radiusParam.value=F,this.handleGeomOffsetXfo.tr.x=F,this.handle.geomOffsetXfoParam.value=this.handleGeomOffsetXfo}),this.handleRadiusParam.on("valueChanged",()=>{n.radiusParam.value=this.handleRadiusParam.getValue()}),this.colorParam.on("valueChanged",()=>{this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}),this.addChild(this.handle),this.addChild(this.arc),this.setTargetParam(this.handle.globalXfoParam,!1)}onPointerEnter(e){e.intersectionData&&e.intersectionData.geomItem==this.handle&&this.highlight()}onPointerLeave(e){this.unhighlight()}onPointerDown(e){e.intersectionData&&e.intersectionData.geomItem==this.handle&&super.onPointerDown(e)}highlight(){super.highlight(),this.handleMat.getParameter("BaseColor").value=this.highlightColorParam.getValue()}unhighlight(){super.unhighlight(),this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}setTargetParam(e,g=!0){if(this.param=e,g){if(this.param instanceof cg){const t=()=>{this.globalXfoParam.value=e.value};t(),e.on("valueChanged",t)}else if(this.param instanceof k){const t=()=>{this.handleXfo.ori.setFromAxisAndAngle(new b(0,0,1),e.getValue()),this.handle.globalXfoParam.value=this.handleXfo};t(),e.on("valueChanged",t)}}}getBaseXfo(){return this.handle.globalXfoParam.value}onDragStart(e){this.baseXfo=this.globalXfoParam.value.clone(),this.baseXfo.sc.set(1,1,1),this.deltaXfo=new v,this.vec0=this.globalXfoParam.value.ori.getXaxis(),this.vec0.normalizeInPlace(),this.change=new _t(this.param),Ge.getInstance().addChange(this.change),this.handleGeomOffsetXfo.sc.x=this.handleGeomOffsetXfo.sc.y=this.handleGeomOffsetXfo.sc.z=1.2,this.handle.geomOffsetXfoParam.value=this.handleGeomOffsetXfo,this.emit("dragStart")}onDrag(e){const g=this.holdPos.subtract(this.baseXfo.tr);g.normalizeInPlace();let t=this.vec0.angleTo(g);if(this.vec0.cross(g).dot(this.baseXfo.ori.getZaxis())<0&&(t=-t),this.range&&(t=q.clamp(t,this.range[0],this.range[1])),(e instanceof fg||e instanceof nt)&&e.shiftKey){const F=22.5*(Math.PI/180);t=Math.floor(t/F)*F}this.deltaXfo.ori.setFromAxisAndAngle(new b(0,0,1),t);const l=this.baseXfo.multiply(this.deltaXfo);this.change?this.param instanceof cg?this.change.update({value:l}):this.param instanceof k&&this.change.update({value:t}):this.param instanceof cg?this.param.value=l:this.param instanceof k&&(this.param.value=t)}onDragEnd(e){this.change=null,this.handleGeomOffsetXfo.sc.x=this.handleGeomOffsetXfo.sc.y=this.handleGeomOffsetXfo.sc.z=1,this.handle.geomOffsetXfoParam.value=this.handleGeomOffsetXfo,this.emit("dragEnd")}toJSON(e){const g=super.toJSON(e);return this.param&&(g.targetParam=this.param.getPath()),g}fromJSON(e,g){super.fromJSON(e,g),e.targetParam&&g.resolvePath(e.targetParam).then(t=>{this.setTargetParam(t)})}}S.register("ArcSlider",rB);const Rn=new Kt(.003,24,12,!1);class za extends H{constructor(e="Measure",g=new E("#F9CE03")){super(e);this.colorParam=this.addParameter(new Fg("Color",g)),this.markerMaterial=new ci("Marker"),this.markerMaterial.getParameter("BaseColor").value=new E(0,0,0),this.markerMaterial.getParameter("MaintainScreenSize").value=1,this.markerMaterial.getParameter("Overlay").value=.5,this.lineMaterial=new Lt("Line"),this.lineMaterial.baseColorParam.value=new E(0,0,0),this.lineMaterial.overlayParam.value=.5,this.markerA=new ge("markerA",Rn,this.markerMaterial),this.markerB=new ge("markerB",Rn,this.markerMaterial),this.addChild(this.markerA),this.addChild(this.markerB),this.colorParam.on("valueChanged",()=>{const t=this.colorParam.getValue();this.label.getParameter("BackgroundColor").value=t})}}const Wt=new sg;Wt.setNumVertices(2);Wt.setNumSegments(1);Wt.setSegmentVertexIndices(0,0,1);Wt.getVertexAttribute("positions").setValue(0,new b);Wt.getVertexAttribute("positions").setValue(1,new b(0,0,1));Wt.setBoundingBoxDirty();class RB extends za{constructor(e="MeasureDistance",g=new E("#F9CE03"),t="Meters"){super(e,g);this.lineGeomItem=null,this.sceneUnits=null,this.sceneUnits=t}updateMeasurement(){const e=this.markerA.globalXfoParam.value,t=this.markerB.globalXfoParam.value.tr.subtract(e.tr),I=t.length();if(I==0)return;const l=this.colorParam.getValue();let C=1;switch(this.sceneUnits){case"Millimeters":break;case"Meters":C=1e3;break}const n=I*C,F=`${parseFloat(n.toFixed(3))}mm`;this.label?this.label.getParameter("Text").value=F:(this.label=new Ui("Distance"),this.label.getParameter("FontSize").value=20,this.label.getParameter("BackgroundColor").value=l,this.label.getParameter("Text").value=F,this.billboard=new cI("DistanceBillboard",this.label),this.billboard.localXfoParam.value=new v,this.billboard.getParameter("PixelsPerMeter").value=1500,this.billboard.getParameter("AlignedToCamera").value=!0,this.billboard.getParameter("DrawOnTop").value=!0,this.billboard.getParameter("FixedSizeOnscreen").value=!0,this.billboard.getParameter("Alpha").value=1,this.addChild(this.billboard),this.lineMaterial=new Lt("Line"),this.lineMaterial.getParameter("BaseColor").value=new E(0,0,0),this.lineMaterial.getParameter("Overlay").value=.5,this.lineGeomItem=new ge("Line",Wt,this.lineMaterial),this.lineGeomItem.setSelectable(!1),this.addChild(this.lineGeomItem));const a=e.clone();a.ori.setFromDirectionAndUpvector(t,new b(t.z,t.x,t.y)),a.sc.z=I,this.lineGeomItem.globalXfoParam.value=a,t.normalizeInPlace();const U=e.tr.add(t.scale(I*.5)),d=new v(U);d.ori.setFromDirectionAndUpvector(t,new b(t.z,t.x,t.y)),this.billboard.globalXfoParam.value=d}setStartMarkerPos(e){const g=this.markerA.globalXfoParam.value;g.tr=e,this.markerA.globalXfoParam.value=g,this.label&&this.updateMeasurement()}setEndMarkerPos(e){const g=this.markerB.globalXfoParam.value;g.tr=e,this.markerB.globalXfoParam.value=g,this.updateMeasurement()}setGeomBuffersVisibility(e){this.markerA.setSelectable(!e),this.markerB.setSelectable(!e)}getMeasurementText(){return this.label.getParameter("Text").getValue()}}S.register("MeasureDistance",RB);const Bt=new sg;Bt.setNumVertices(2);Bt.setNumSegments(1);Bt.setSegmentVertexIndices(0,0,1);const _a=Bt.getVertexAttribute("positions");_a.setValue(0,new b);_a.setValue(1,new b(0,0,1));Bt.setBoundingBoxDirty();class hB extends za{constructor(e="MeasureAngle",g=new E("#F9CE03")){super(e,g)}createLinesAndLabel(){const e=this.markerA.globalXfoParam.value,g=this.markerB.globalXfoParam.value,t=e.ori.getZaxis(),I=g.ori.getZaxis(),l=t.cross(I).normalize(),C=l.cross(t).normalize(),n=l.cross(I).normalize(),F=new Ag(e.tr,C),a=new Ag(g.tr,n),U=F.intersectRayVector(a),d=t.angleTo(I),s=new ge("Line",Bt,this.lineMaterial),o=new ge("Line",Bt,this.lineMaterial);this.markerA.addChild(s,!1),this.markerB.addChild(o,!1),this.label=new Ui("Distance"),this.label.fontSizeParam.value=20,this.label.backgroundColorParam.value=this.colorParam.getValue(),this.label.textParam.value=`${(d/(Math.PI/180)).toFixed(3)} \xB0`,this.billboard=new cI("DistanceBillboard",this.label),this.billboard.localXfoParam.value=new v,this.billboard.pixelsPerMeterParam.value=1500,this.billboard.alignedToCameraParam.value=!0,this.billboard.drawOnTopParam.value=!0,this.billboard.fixedSizeOnscreenParam.value=!0,this.billboard.alphaParam.value=1,this.addChild(this.billboard),this.colorParam.on("valueChanged",()=>{const r=this.colorParam.getValue();this.markerMaterial.getParameter("BaseColor").value=r,this.lineMaterial.baseColorParam.value=r,this.label.backgroundColorParam.value=r});const A=new v;A.tr.addInPlace(F.pointAtDist(U[0])),A.tr.addInPlace(a.pointAtDist(U[1])),A.tr.scaleInPlace(.5),e.ori.setFromDirectionAndUpvector(C,t),this.markerA.globalXfoParam.value=e,g.ori.setFromDirectionAndUpvector(n,t),this.markerB.globalXfoParam.value=g;const B=new v;B.sc.z=U[0],s.localXfoParam.value=B;const Q=new v;Q.sc.z=U[1],o.localXfoParam.value=Q,this.billboard.globalXfoParam.value=A}setXfoA(e){this.markerA.globalXfoParam.value=e,this.markerB.globalXfoParam.value=e}getXfoA(){return this.markerA.globalXfoParam.value}setXfoB(e){this.markerB.globalXfoParam.value=e,this.createLinesAndLabel()}}S.register("MeasureAngle",hB);class cB extends Ng{constructor(e){super("MeasurementChange");e&&(this.measurement=e)}update(e){this.measurement.fromJSON(e.measurementData),this.emit("updated",e)}end(){this.measurement.setGeomBuffersVisibility(!0)}undo(){console.log("undo MeasurementChange"),this.parentItem=this.measurement.getOwner(),this.childIndex=this.parentItem.getChildIndex(this.measurement),this.parentItem.removeChild(this.childIndex)}redo(){console.log("redo MeasurementChange"),this.parentItem.insertChild(this.measurement,this.childIndex)}toJSON(e){const g=super.toJSON(e);return g.parentItemPath=this.measurement.getOwner().getPath(),g.measurementType=S.getClassName(Object.getPrototypeOf(this.measurement).constructor),g.measurementData=this.measurement.toJSON(e),g}fromJSON(e,g){const I=g.appData.scene.getRoot().resolvePath(e.parentItemPath,1);I&&(this.measurement=S.constructClass(e.measurementType),this.measurement.fromJSON(e.measurementData),I.addChild(this.measurement))}destroy(){}}Ge.registerChange("MeasurementChange",cB);ml?ml.registerLib($A):console.warn("The version of the Zea Engine that you're using doesn't support the libraries registry. Please upgrade to the latest Zea Engine version.");var Oa={exports:{}};(function(i){function e(t){var I=Math.floor,l=new Array(64),C=new Array(64),n=new Array(64),F=new Array(64),a,U,d,s,o=new Array(65535),A=new Array(65535),B=new Array(64),Q=new Array(64),r=[],R=0,V=7,h=new Array(64),m=new Array(64),Z=new Array(64),c=new Array(256),W=new Array(2048),u,J=[0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63],N=[0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0],X=[0,1,2,3,4,5,6,7,8,9,10,11],y=[0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125],p=[1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250],_=[0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0],ae=[0,1,2,3,4,5,6,7,8,9,10,11],ne=[0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119],K=[0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250];function te(G){for(var z=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],$=0;$<64;$++){var P=I((z[$]*G+50)/100);P<1?P=1:P>255&&(P=255),l[J[$]]=P}for(var Fe=[17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],Re=0;Re<64;Re++){var fe=I((Fe[Re]*G+50)/100);fe<1?fe=1:fe>255&&(fe=255),C[J[Re]]=fe}for(var Ae=[1,1.387039845,1.306562965,1.175875602,1,.785694958,.5411961,.275899379],w=0,D=0;D<8;D++)for(var Y=0;Y<8;Y++)n[w]=1/(l[J[w]]*Ae[D]*Ae[Y]*8),F[w]=1/(C[J[w]]*Ae[D]*Ae[Y]*8),w++}function j(G,z){for(var $=0,P=0,Fe=new Array,Re=1;Re<=16;Re++){for(var fe=1;fe<=G[Re];fe++)Fe[z[P]]=[],Fe[z[P]][0]=$,Fe[z[P]][1]=Re,P++,$++;$*=2}return Fe}function se(){a=j(N,X),U=j(_,ae),d=j(y,p),s=j(ne,K)}function Ce(){for(var G=1,z=2,$=1;$<=15;$++){for(var P=G;P<z;P++)A[32767+P]=$,o[32767+P]=[],o[32767+P][1]=$,o[32767+P][0]=P;for(var Fe=-(z-1);Fe<=-G;Fe++)A[32767+Fe]=$,o[32767+Fe]=[],o[32767+Fe][1]=$,o[32767+Fe][0]=z-1+Fe;G<<=1,z<<=1}}function Qe(){for(var G=0;G<256;G++)W[G]=19595*G,W[G+256>>0]=38470*G,W[G+512>>0]=7471*G+32768,W[G+768>>0]=-11059*G,W[G+1024>>0]=-21709*G,W[G+1280>>0]=32768*G+8421375,W[G+1536>>0]=-27439*G,W[G+1792>>0]=-5329*G}function L(G){for(var z=G[0],$=G[1]-1;$>=0;)z&1<<$&&(R|=1<<V),$--,V--,V<0&&(R==255?(M(255),M(0)):M(R),V=7,R=0)}function M(G){r.push(G)}function Ie(G){M(G>>8&255),M(G&255)}function me(G,z){var $,P,Fe,Re,fe,Ae,w,D,Y=0,ce,he=8,pe=64;for(ce=0;ce<he;++ce){$=G[Y],P=G[Y+1],Fe=G[Y+2],Re=G[Y+3],fe=G[Y+4],Ae=G[Y+5],w=G[Y+6],D=G[Y+7];var O=$+D,Ue=$-D,Me=P+w,He=P-w,xe=Fe+Ae,Vg=Fe-Ae,jt=Re+fe,CC=Re-fe,et=O+jt,Jt=O-jt,gt=Me+xe,Gt=Me-xe;G[Y]=et+gt,G[Y+4]=et-gt;var qt=(Gt+Jt)*.707106781;G[Y+2]=Jt+qt,G[Y+6]=Jt-qt,et=CC+Vg,gt=Vg+He,Gt=He+Ue;var $t=(et-Gt)*.382683433,eI=.5411961*et+$t,gI=1.306562965*Gt+$t,pi=gt*.707106781,yi=Ue+pi,Xi=Ue-pi;G[Y+5]=Xi+eI,G[Y+3]=Xi-eI,G[Y+1]=yi+gI,G[Y+7]=yi-gI,Y+=8}for(Y=0,ce=0;ce<he;++ce){$=G[Y],P=G[Y+8],Fe=G[Y+16],Re=G[Y+24],fe=G[Y+32],Ae=G[Y+40],w=G[Y+48],D=G[Y+56];var ki=$+D,iC=$-D,fi=P+w,Ei=P-w,Ti=Fe+Ae,Yi=Fe-Ae,vi=Re+fe,MF=Re-fe,tI=ki+vi,nC=ki-vi,OI=fi+Ti,PI=fi-Ti;G[Y]=tI+OI,G[Y+32]=tI-OI;var Mi=(PI+nC)*.707106781;G[Y+16]=nC+Mi,G[Y+48]=nC-Mi,tI=MF+Yi,OI=Yi+Ei,PI=Ei+iC;var Hi=(tI-PI)*.382683433,xi=.5411961*tI+Hi,wi=1.306562965*PI+Hi,Di=OI*.707106781,Ki=iC+Di,Li=iC-Di;G[Y+40]=Li+xi,G[Y+24]=Li-xi,G[Y+8]=Ki+wi,G[Y+56]=Ki-wi,Y++}var jI;for(ce=0;ce<pe;++ce)jI=G[ce]*z[ce],B[ce]=jI>0?jI+.5|0:jI-.5|0;return B}function ke(){Ie(65504),Ie(16),M(74),M(70),M(73),M(70),M(0),M(1),M(1),M(0),Ie(1),Ie(1),M(0),M(0)}function oe(G){if(!!G){Ie(65505),G[0]===69&&G[1]===120&&G[2]===105&&G[3]===102?Ie(G.length+2):(Ie(G.length+5+2),M(69),M(120),M(105),M(102),M(0));for(var z=0;z<G.length;z++)M(G[z])}}function Ne(G,z){Ie(65472),Ie(17),M(8),Ie(z),Ie(G),M(3),M(1),M(17),M(0),M(2),M(17),M(1),M(3),M(17),M(1)}function We(){Ie(65499),Ie(132),M(0);for(var G=0;G<64;G++)M(l[G]);M(1);for(var z=0;z<64;z++)M(C[z])}function Ye(){Ie(65476),Ie(418),M(0);for(var G=0;G<16;G++)M(N[G+1]);for(var z=0;z<=11;z++)M(X[z]);M(16);for(var $=0;$<16;$++)M(y[$+1]);for(var P=0;P<=161;P++)M(p[P]);M(1);for(var Fe=0;Fe<16;Fe++)M(_[Fe+1]);for(var Re=0;Re<=11;Re++)M(ae[Re]);M(17);for(var fe=0;fe<16;fe++)M(ne[fe+1]);for(var Ae=0;Ae<=161;Ae++)M(K[Ae])}function re(){Ie(65498),Ie(12),M(3),M(1),M(0),M(2),M(17),M(3),M(17),M(0),M(63),M(0)}function x(G,z,$,P,Fe){for(var Re=Fe[0],fe=Fe[240],Ae,w=16,D=63,Y=64,ce=me(G,z),he=0;he<Y;++he)Q[J[he]]=ce[he];var pe=Q[0]-$;$=Q[0],pe==0?L(P[0]):(Ae=32767+pe,L(P[A[Ae]]),L(o[Ae]));for(var O=63;O>0&&Q[O]==0;O--);if(O==0)return L(Re),$;for(var Ue=1,Me;Ue<=O;){for(var He=Ue;Q[Ue]==0&&Ue<=O;++Ue);var xe=Ue-He;if(xe>=w){Me=xe>>4;for(var Vg=1;Vg<=Me;++Vg)L(fe);xe=xe&15}Ae=32767+Q[Ue],L(Fe[(xe<<4)+A[Ae]]),L(o[Ae]),Ue++}return O!=D&&L(Re),$}function T(){for(var G=String.fromCharCode,z=0;z<256;z++)c[z]=G(z)}this.encode=function(G,z){new Date().getTime(),z&&be(z),r=new Array,R=0,V=7,Ie(65496),ke(),oe(G.exifBuffer),We(),Ne(G.width,G.height),Ye(),re();var $=0,P=0,Fe=0;R=0,V=7,this.encode.displayName="_encode_";for(var Re=G.data,fe=G.width,Ae=G.height,w=fe*4,D,Y=0,ce,he,pe,O,Ue,Me,He,xe;Y<Ae;){for(D=0;D<w;){for(O=w*Y+D,Ue=O,Me=-1,He=0,xe=0;xe<64;xe++)He=xe>>3,Me=(xe&7)*4,Ue=O+He*w+Me,Y+He>=Ae&&(Ue-=w*(Y+1+He-Ae)),D+Me>=w&&(Ue-=D+Me-w+4),ce=Re[Ue++],he=Re[Ue++],pe=Re[Ue++],h[xe]=(W[ce]+W[he+256>>0]+W[pe+512>>0]>>16)-128,m[xe]=(W[ce+768>>0]+W[he+1024>>0]+W[pe+1280>>0]>>16)-128,Z[xe]=(W[ce+1280>>0]+W[he+1536>>0]+W[pe+1792>>0]>>16)-128;$=x(h,n,$,a,d),P=x(m,F,P,U,s),Fe=x(Z,F,Fe,U,s),D+=32}Y+=8}if(V>=0){var Vg=[];Vg[1]=V+1,Vg[0]=(1<<V+1)-1,L(Vg)}return Ie(65497),Buffer.from(r)};function be(G){if(G<=0&&(G=1),G>100&&(G=100),u!=G){var z=0;G<50?z=Math.floor(5e3/G):z=Math.floor(200-G*2),te(z),u=G}}function ie(){var G=new Date().getTime();t||(t=50),T(),se(),Ce(),Qe(),be(t),new Date().getTime()-G}ie()}i.exports=g;function g(t,I){typeof I=="undefined"&&(I=50);var l=new e(I),C=l.encode(t,I);return{data:C,width:t.width,height:t.height}}})(Oa);var Pa={exports:{}};(function(i){var e=function(){var I=new Int32Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]),l=4017,C=799,n=3406,F=2276,a=1567,U=3784,d=5793,s=2896;function o(){}function A(m,Z){for(var c=0,W=[],u,J,N=16;N>0&&!m[N-1];)N--;W.push({children:[],index:0});var X=W[0],y;for(u=0;u<N;u++){for(J=0;J<m[u];J++){for(X=W.pop(),X.children[X.index]=Z[c];X.index>0;){if(W.length===0)throw new Error("Could not recreate Huffman Table");X=W.pop()}for(X.index++,W.push(X);W.length<=u;)W.push(y={children:[],index:0}),X.children[X.index]=y.children,X=y;c++}u+1<N&&(W.push(y={children:[],index:0}),X.children[X.index]=y.children,X=y)}return W[0].children}function B(m,Z,c,W,u,J,N,X,y,p){c.precision,c.samplesPerLine,c.scanLines;var _=c.mcusPerLine,ae=c.progressive;c.maxH,c.maxV;var ne=Z,K=0,te=0;function j(){if(te>0)return te--,K>>te&1;if(K=m[Z++],K==255){var w=m[Z++];if(w)throw new Error("unexpected marker: "+(K<<8|w).toString(16))}return te=7,K>>>7}function se(w){for(var D=w,Y;(Y=j())!==null;){if(D=D[Y],typeof D=="number")return D;if(typeof D!="object")throw new Error("invalid huffman sequence")}return null}function Ce(w){for(var D=0;w>0;){var Y=j();if(Y===null)return;D=D<<1|Y,w--}return D}function Qe(w){var D=Ce(w);return D>=1<<w-1?D:D+(-1<<w)+1}function L(w,D){var Y=se(w.huffmanTableDC),ce=Y===0?0:Qe(Y);D[0]=w.pred+=ce;for(var he=1;he<64;){var pe=se(w.huffmanTableAC),O=pe&15,Ue=pe>>4;if(O===0){if(Ue<15)break;he+=16;continue}he+=Ue;var Me=I[he];D[Me]=Qe(O),he++}}function M(w,D){var Y=se(w.huffmanTableDC),ce=Y===0?0:Qe(Y)<<y;D[0]=w.pred+=ce}function Ie(w,D){D[0]|=j()<<y}var me=0;function ke(w,D){if(me>0){me--;return}for(var Y=J,ce=N;Y<=ce;){var he=se(w.huffmanTableAC),pe=he&15,O=he>>4;if(pe===0){if(O<15){me=Ce(O)+(1<<O)-1;break}Y+=16;continue}Y+=O;var Ue=I[Y];D[Ue]=Qe(pe)*(1<<y),Y++}}var oe=0,Ne;function We(w,D){for(var Y=J,ce=N,he=0;Y<=ce;){var pe=I[Y],O=D[pe]<0?-1:1;switch(oe){case 0:var Ue=se(w.huffmanTableAC),Me=Ue&15,he=Ue>>4;if(Me===0)he<15?(me=Ce(he)+(1<<he),oe=4):(he=16,oe=1);else{if(Me!==1)throw new Error("invalid ACn encoding");Ne=Qe(Me),oe=he?2:3}continue;case 1:case 2:D[pe]?D[pe]+=(j()<<y)*O:(he--,he===0&&(oe=oe==2?3:0));break;case 3:D[pe]?D[pe]+=(j()<<y)*O:(D[pe]=Ne<<y,oe=0);break;case 4:D[pe]&&(D[pe]+=(j()<<y)*O);break}Y++}oe===4&&(me--,me===0&&(oe=0))}function Ye(w,D,Y,ce,he){var pe=Y/_|0,O=Y%_,Ue=pe*w.v+ce,Me=O*w.h+he;w.blocks[Ue]===void 0&&p.tolerantDecoding||D(w,w.blocks[Ue][Me])}function re(w,D,Y){var ce=Y/w.blocksPerLine|0,he=Y%w.blocksPerLine;w.blocks[ce]===void 0&&p.tolerantDecoding||D(w,w.blocks[ce][he])}var x=W.length,T,be,ie,G,z,$;ae?J===0?$=X===0?M:Ie:$=X===0?ke:We:$=L;var P=0,Fe,Re;x==1?Re=W[0].blocksPerLine*W[0].blocksPerColumn:Re=_*c.mcusPerColumn,u||(u=Re);for(var fe,Ae;P<Re;){for(be=0;be<x;be++)W[be].pred=0;if(me=0,x==1)for(T=W[0],z=0;z<u;z++)re(T,$,P),P++;else for(z=0;z<u;z++){for(be=0;be<x;be++)for(T=W[be],fe=T.h,Ae=T.v,ie=0;ie<Ae;ie++)for(G=0;G<fe;G++)Ye(T,$,P,ie,G);if(P++,P===Re)break}if(P===Re)do{if(m[Z]===255&&m[Z+1]!==0)break;Z+=1}while(Z<m.length-2);if(te=0,Fe=m[Z]<<8|m[Z+1],Fe<65280)throw new Error("marker was not found");if(Fe>=65488&&Fe<=65495)Z+=2;else break}return Z-ne}function Q(m,Z){var c=[],W=Z.blocksPerLine,u=Z.blocksPerColumn,J=W<<3,N=new Int32Array(64),X=new Uint8Array(64);function y(Ce,Qe,L){var M=Z.quantizationTable,Ie,me,ke,oe,Ne,We,Ye,re,x,T=L,be;for(be=0;be<64;be++)T[be]=Ce[be]*M[be];for(be=0;be<8;++be){var ie=8*be;if(T[1+ie]==0&&T[2+ie]==0&&T[3+ie]==0&&T[4+ie]==0&&T[5+ie]==0&&T[6+ie]==0&&T[7+ie]==0){x=d*T[0+ie]+512>>10,T[0+ie]=x,T[1+ie]=x,T[2+ie]=x,T[3+ie]=x,T[4+ie]=x,T[5+ie]=x,T[6+ie]=x,T[7+ie]=x;continue}Ie=d*T[0+ie]+128>>8,me=d*T[4+ie]+128>>8,ke=T[2+ie],oe=T[6+ie],Ne=s*(T[1+ie]-T[7+ie])+128>>8,re=s*(T[1+ie]+T[7+ie])+128>>8,We=T[3+ie]<<4,Ye=T[5+ie]<<4,x=Ie-me+1>>1,Ie=Ie+me+1>>1,me=x,x=ke*U+oe*a+128>>8,ke=ke*a-oe*U+128>>8,oe=x,x=Ne-Ye+1>>1,Ne=Ne+Ye+1>>1,Ye=x,x=re+We+1>>1,We=re-We+1>>1,re=x,x=Ie-oe+1>>1,Ie=Ie+oe+1>>1,oe=x,x=me-ke+1>>1,me=me+ke+1>>1,ke=x,x=Ne*F+re*n+2048>>12,Ne=Ne*n-re*F+2048>>12,re=x,x=We*C+Ye*l+2048>>12,We=We*l-Ye*C+2048>>12,Ye=x,T[0+ie]=Ie+re,T[7+ie]=Ie-re,T[1+ie]=me+Ye,T[6+ie]=me-Ye,T[2+ie]=ke+We,T[5+ie]=ke-We,T[3+ie]=oe+Ne,T[4+ie]=oe-Ne}for(be=0;be<8;++be){var G=be;if(T[8+G]==0&&T[16+G]==0&&T[24+G]==0&&T[32+G]==0&&T[40+G]==0&&T[48+G]==0&&T[56+G]==0){x=d*L[be+0]+8192>>14,T[0+G]=x,T[8+G]=x,T[16+G]=x,T[24+G]=x,T[32+G]=x,T[40+G]=x,T[48+G]=x,T[56+G]=x;continue}Ie=d*T[0+G]+2048>>12,me=d*T[32+G]+2048>>12,ke=T[16+G],oe=T[48+G],Ne=s*(T[8+G]-T[56+G])+2048>>12,re=s*(T[8+G]+T[56+G])+2048>>12,We=T[24+G],Ye=T[40+G],x=Ie-me+1>>1,Ie=Ie+me+1>>1,me=x,x=ke*U+oe*a+2048>>12,ke=ke*a-oe*U+2048>>12,oe=x,x=Ne-Ye+1>>1,Ne=Ne+Ye+1>>1,Ye=x,x=re+We+1>>1,We=re-We+1>>1,re=x,x=Ie-oe+1>>1,Ie=Ie+oe+1>>1,oe=x,x=me-ke+1>>1,me=me+ke+1>>1,ke=x,x=Ne*F+re*n+2048>>12,Ne=Ne*n-re*F+2048>>12,re=x,x=We*C+Ye*l+2048>>12,We=We*l-Ye*C+2048>>12,Ye=x,T[0+G]=Ie+re,T[56+G]=Ie-re,T[8+G]=me+Ye,T[48+G]=me-Ye,T[16+G]=ke+We,T[40+G]=ke-We,T[24+G]=oe+Ne,T[32+G]=oe-Ne}for(be=0;be<64;++be){var z=128+(T[be]+8>>4);Qe[be]=z<0?0:z>255?255:z}}h(J*u*8);for(var p,_,ae=0;ae<u;ae++){var ne=ae<<3;for(p=0;p<8;p++)c.push(new Uint8Array(J));for(var K=0;K<W;K++){y(Z.blocks[ae][K],X,N);var te=0,j=K<<3;for(_=0;_<8;_++){var se=c[ne+_];for(p=0;p<8;p++)se[j+p]=X[te++]}}}return c}function r(m){return m<0?0:m>255?255:m}o.prototype={load:function(Z){var c=new XMLHttpRequest;c.open("GET",Z,!0),c.responseType="arraybuffer",c.onload=function(){var W=new Uint8Array(c.response||c.mozResponseArrayBuffer);this.parse(W),this.onload&&this.onload()}.bind(this),c.send(null)},parse:function(Z){var c=this.opts.maxResolutionInMP*1e3*1e3,W=0;Z.length;function u(){var O=Z[W]<<8|Z[W+1];return W+=2,O}function J(){var O=u(),Ue=Z.subarray(W,W+O-2);return W+=Ue.length,Ue}function N(O){var Ue=0,Me=0,He,xe;for(xe in O.components)O.components.hasOwnProperty(xe)&&(He=O.components[xe],Ue<He.h&&(Ue=He.h),Me<He.v&&(Me=He.v));var Vg=Math.ceil(O.samplesPerLine/8/Ue),jt=Math.ceil(O.scanLines/8/Me);for(xe in O.components)if(O.components.hasOwnProperty(xe)){He=O.components[xe];var CC=Math.ceil(Math.ceil(O.samplesPerLine/8)*He.h/Ue),et=Math.ceil(Math.ceil(O.scanLines/8)*He.v/Me),Jt=Vg*He.h,gt=jt*He.v,Gt=gt*Jt,qt=[];h(Gt*256);for(var $t=0;$t<gt;$t++){for(var eI=[],gI=0;gI<Jt;gI++)eI.push(new Int32Array(64));qt.push(eI)}He.blocksPerLine=CC,He.blocksPerColumn=et,He.blocks=qt}O.maxH=Ue,O.maxV=Me,O.mcusPerLine=Vg,O.mcusPerColumn=jt}var X=null,y=null,p,_,ae=[],ne=[],K=[],te=[],j=u(),se=-1;if(this.comments=[],j!=65496)throw new Error("SOI not found");for(j=u();j!=65497;){var Ce,Qe;switch(j){case 65280:break;case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:var L=J();if(j===65534){var M=String.fromCharCode.apply(null,L);this.comments.push(M)}j===65504&&L[0]===74&&L[1]===70&&L[2]===73&&L[3]===70&&L[4]===0&&(X={version:{major:L[5],minor:L[6]},densityUnits:L[7],xDensity:L[8]<<8|L[9],yDensity:L[10]<<8|L[11],thumbWidth:L[12],thumbHeight:L[13],thumbData:L.subarray(14,14+3*L[12]*L[13])}),j===65505&&L[0]===69&&L[1]===120&&L[2]===105&&L[3]===102&&L[4]===0&&(this.exifBuffer=L.subarray(5,L.length)),j===65518&&L[0]===65&&L[1]===100&&L[2]===111&&L[3]===98&&L[4]===101&&L[5]===0&&(y={version:L[6],flags0:L[7]<<8|L[8],flags1:L[9]<<8|L[10],transformCode:L[11]});break;case 65499:for(var Ie=u(),me=Ie+W-2;W<me;){var ke=Z[W++];h(256);var oe=new Int32Array(64);if(ke>>4===0)for(Qe=0;Qe<64;Qe++){var Ne=I[Qe];oe[Ne]=Z[W++]}else if(ke>>4===1)for(Qe=0;Qe<64;Qe++){var Ne=I[Qe];oe[Ne]=u()}else throw new Error("DQT: invalid table spec");ae[ke&15]=oe}break;case 65472:case 65473:case 65474:u(),p={},p.extended=j===65473,p.progressive=j===65474,p.precision=Z[W++],p.scanLines=u(),p.samplesPerLine=u(),p.components={},p.componentsOrder=[];var We=p.scanLines*p.samplesPerLine;if(We>c){var Ye=Math.ceil((We-c)/1e6);throw new Error(`maxResolutionInMP limit exceeded by ${Ye}MP`)}var re=Z[W++],x;for(Ce=0;Ce<re;Ce++){x=Z[W];var T=Z[W+1]>>4,be=Z[W+1]&15,ie=Z[W+2];p.componentsOrder.push(x),p.components[x]={h:T,v:be,quantizationIdx:ie},W+=3}N(p),ne.push(p);break;case 65476:var G=u();for(Ce=2;Ce<G;){var z=Z[W++],$=new Uint8Array(16),P=0;for(Qe=0;Qe<16;Qe++,W++)P+=$[Qe]=Z[W];h(16+P);var Fe=new Uint8Array(P);for(Qe=0;Qe<P;Qe++,W++)Fe[Qe]=Z[W];Ce+=17+P,(z>>4===0?te:K)[z&15]=A($,Fe)}break;case 65501:u(),_=u();break;case 65500:u(),u();break;case 65498:u();var Re=Z[W++],fe=[],Ae;for(Ce=0;Ce<Re;Ce++){Ae=p.components[Z[W++]];var w=Z[W++];Ae.huffmanTableDC=te[w>>4],Ae.huffmanTableAC=K[w&15],fe.push(Ae)}var D=Z[W++],Y=Z[W++],ce=Z[W++],he=B(Z,W,p,fe,_,D,Y,ce>>4,ce&15,this.opts);W+=he;break;case 65535:Z[W]!==255&&W--;break;default:if(Z[W-3]==255&&Z[W-2]>=192&&Z[W-2]<=254){W-=3;break}else if(j===224||j==225){if(se!==-1)throw new Error(`first unknown JPEG marker at offset ${se.toString(16)}, second unknown JPEG marker ${j.toString(16)} at offset ${(W-1).toString(16)}`);se=W-1;const O=u();if(Z[W+O-2]===255){W+=O-2;break}}throw new Error("unknown JPEG marker "+j.toString(16))}j=u()}if(ne.length!=1)throw new Error("only single frame JPEGs supported");for(var Ce=0;Ce<ne.length;Ce++){var pe=ne[Ce].components;for(var Qe in pe)pe[Qe].quantizationTable=ae[pe[Qe].quantizationIdx],delete pe[Qe].quantizationIdx}this.width=p.samplesPerLine,this.height=p.scanLines,this.jfif=X,this.adobe=y,this.components=[];for(var Ce=0;Ce<p.componentsOrder.length;Ce++){var Ae=p.components[p.componentsOrder[Ce]];this.components.push({lines:Q(p,Ae),scaleX:Ae.h/p.maxH,scaleY:Ae.v/p.maxV})}},getData:function(Z,c){var W=this.width/Z,u=this.height/c,J,N,X,y,p,_,ae,ne,K,te,j=0,se,Ce,Qe,L,M,Ie,me,ke,oe,Ne,We,Ye=Z*c*this.components.length;h(Ye);var re=new Uint8Array(Ye);switch(this.components.length){case 1:for(J=this.components[0],te=0;te<c;te++)for(p=J.lines[0|te*J.scaleY*u],K=0;K<Z;K++)se=p[0|K*J.scaleX*W],re[j++]=se;break;case 2:for(J=this.components[0],N=this.components[1],te=0;te<c;te++)for(p=J.lines[0|te*J.scaleY*u],_=N.lines[0|te*N.scaleY*u],K=0;K<Z;K++)se=p[0|K*J.scaleX*W],re[j++]=se,se=_[0|K*N.scaleX*W],re[j++]=se;break;case 3:for(We=!0,this.adobe&&this.adobe.transformCode?We=!0:typeof this.opts.colorTransform!="undefined"&&(We=!!this.opts.colorTransform),J=this.components[0],N=this.components[1],X=this.components[2],te=0;te<c;te++)for(p=J.lines[0|te*J.scaleY*u],_=N.lines[0|te*N.scaleY*u],ae=X.lines[0|te*X.scaleY*u],K=0;K<Z;K++)We?(se=p[0|K*J.scaleX*W],Ce=_[0|K*N.scaleX*W],Qe=ae[0|K*X.scaleX*W],ke=r(se+1.402*(Qe-128)),oe=r(se-.3441363*(Ce-128)-.71413636*(Qe-128)),Ne=r(se+1.772*(Ce-128))):(ke=p[0|K*J.scaleX*W],oe=_[0|K*N.scaleX*W],Ne=ae[0|K*X.scaleX*W]),re[j++]=ke,re[j++]=oe,re[j++]=Ne;break;case 4:if(!this.adobe)throw new Error("Unsupported color mode (4 components)");for(We=!1,this.adobe&&this.adobe.transformCode?We=!0:typeof this.opts.colorTransform!="undefined"&&(We=!!this.opts.colorTransform),J=this.components[0],N=this.components[1],X=this.components[2],y=this.components[3],te=0;te<c;te++)for(p=J.lines[0|te*J.scaleY*u],_=N.lines[0|te*N.scaleY*u],ae=X.lines[0|te*X.scaleY*u],ne=y.lines[0|te*y.scaleY*u],K=0;K<Z;K++)We?(se=p[0|K*J.scaleX*W],Ce=_[0|K*N.scaleX*W],Qe=ae[0|K*X.scaleX*W],L=ne[0|K*y.scaleX*W],M=255-r(se+1.402*(Qe-128)),Ie=255-r(se-.3441363*(Ce-128)-.71413636*(Qe-128)),me=255-r(se+1.772*(Ce-128))):(M=p[0|K*J.scaleX*W],Ie=_[0|K*N.scaleX*W],me=ae[0|K*X.scaleX*W],L=ne[0|K*y.scaleX*W]),re[j++]=255-M,re[j++]=255-Ie,re[j++]=255-me,re[j++]=255-L;break;default:throw new Error("Unsupported color mode")}return re},copyToImageData:function(Z,c){var W=Z.width,u=Z.height,J=Z.data,N=this.getData(W,u),X=0,y=0,p,_,ae,ne,K,te,j,se,Ce;switch(this.components.length){case 1:for(_=0;_<u;_++)for(p=0;p<W;p++)ae=N[X++],J[y++]=ae,J[y++]=ae,J[y++]=ae,c&&(J[y++]=255);break;case 3:for(_=0;_<u;_++)for(p=0;p<W;p++)j=N[X++],se=N[X++],Ce=N[X++],J[y++]=j,J[y++]=se,J[y++]=Ce,c&&(J[y++]=255);break;case 4:for(_=0;_<u;_++)for(p=0;p<W;p++)K=N[X++],te=N[X++],ae=N[X++],ne=N[X++],j=255-r(K*(1-ne/255)+ne),se=255-r(te*(1-ne/255)+ne),Ce=255-r(ae*(1-ne/255)+ne),J[y++]=j,J[y++]=se,J[y++]=Ce,c&&(J[y++]=255);break;default:throw new Error("Unsupported color mode")}}};var R=0,V=0;function h(m=0){var Z=R+m;if(Z>V){var c=Math.ceil((Z-V)/1024/1024);throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${c}MB`)}R=Z}return o.resetMaxMemoryUsage=function(m){R=0,V=m},o.getBytesAllocated=function(){return R},o.requestMemoryAllocation=h,o}();i.exports=g;function g(t,I={}){var l={colorTransform:void 0,useTArray:!1,formatAsRGBA:!0,tolerantDecoding:!0,maxResolutionInMP:100,maxMemoryUsageInMB:512},C=FC(FC({},l),I),n=new Uint8Array(t),F=new e;F.opts=C,e.resetMaxMemoryUsage(C.maxMemoryUsageInMB*1024*1024),F.parse(n);var a=C.formatAsRGBA?4:3,U=F.width*F.height*a;try{e.requestMemoryAllocation(U);var d={width:F.width,height:F.height,exifBuffer:F.exifBuffer,data:C.useTArray?new Uint8Array(U):Buffer.alloc(U)};F.comments.length>0&&(d.comments=F.comments)}catch(s){throw s instanceof RangeError?new Error("Could not allocate enough memory for the image. Required: "+U):s}return F.copyToImageData(d,C.formatAsRGBA),d}})(Pa);var ZB=Oa.exports,mB=Pa.exports,WB={encode:ZB,decode:mB};(function(i){if(i.TextEncoder&&i.TextDecoder)return!1;function e(t="utf-8"){if(t!=="utf-8")throw new RangeError(`Failed to construct 'TextEncoder': The encoding label provided ('${t}') is invalid.`)}Object.defineProperty(e.prototype,"encoding",{value:"utf-8"}),e.prototype.encode=function(t,I={stream:!1}){if(I.stream)throw new Error("Failed to encode: the 'stream' option is unsupported.");let l=0;const C=t.length;let n=0,F=Math.max(32,C+(C>>1)+7),a=new Uint8Array(F>>3<<3);for(;l<C;){let U=t.charCodeAt(l++);if(U>=55296&&U<=56319){if(l<C){const d=t.charCodeAt(l);(d&64512)===56320&&(++l,U=((U&1023)<<10)+(d&1023)+65536)}if(U>=55296&&U<=56319)continue}if(n+4>a.length){F+=8,F*=1+l/t.length*2,F=F>>3<<3;const d=new Uint8Array(F);d.set(a),a=d}if((U&4294967168)===0){a[n++]=U;continue}else if((U&4294965248)===0)a[n++]=U>>6&31|192;else if((U&4294901760)===0)a[n++]=U>>12&15|224,a[n++]=U>>6&63|128;else if((U&4292870144)===0)a[n++]=U>>18&7|240,a[n++]=U>>12&63|128,a[n++]=U>>6&63|128;else continue;a[n++]=U&63|128}return a.slice(0,n)};function g(t="utf-8",I={fatal:!1}){if(t!=="utf-8")throw new RangeError(`Failed to construct 'TextDecoder': The encoding label provided ('${t}') is invalid.`);if(I.fatal)throw new Error("Failed to construct 'TextDecoder': the 'fatal' option is unsupported.")}Object.defineProperty(g.prototype,"encoding",{value:"utf-8"}),Object.defineProperty(g.prototype,"fatal",{value:!1}),Object.defineProperty(g.prototype,"ignoreBOM",{value:!1}),g.prototype.decode=function(t,I={stream:!1}){if(I.stream)throw new Error("Failed to decode: the 'stream' option is unsupported.");const l=new Uint8Array(t);let C=0;const n=l.length,F=[];for(;C<n;){const a=l[C++];if(a===0)break;if((a&128)===0)F.push(a);else if((a&224)===192){const U=l[C++]&63;F.push((a&31)<<6|U)}else if((a&240)===224){const U=l[C++]&63,d=l[C++]&63;F.push((a&31)<<12|U<<6|d)}else if((a&248)===240){const U=l[C++]&63,d=l[C++]&63,s=l[C++]&63;let o=(a&7)<<18|U<<12|d<<6|s;o>65535&&(o-=65536,F.push(o>>>10&1023|55296),o=56320|o&1023),F.push(o)}}return String.fromCharCode.apply(null,F)},i.TextEncoder=e,i.TextDecoder=g})(typeof window!="undefined"?window:typeof self!="undefined"?self:globalThis);const bB=new TextDecoder("utf-8");function JB(i){return bB.decode(i)}const GB=new TextEncoder;function uB(i){return GB.encode(i)}const SB=1024*8;class mi{constructor(e=SB,g={}){let t=!1;typeof e=="number"?e=new ArrayBuffer(e):(t=!0,this.lastWrittenByte=e.byteLength);const I=g.offset?g.offset>>>0:0,l=e.byteLength-I;let C=I;(ArrayBuffer.isView(e)||e instanceof mi)&&(e.byteLength!==e.buffer.byteLength&&(C=e.byteOffset+I),e=e.buffer),t?this.lastWrittenByte=l:this.lastWrittenByte=0,this.buffer=e,this.length=l,this.byteLength=l,this.byteOffset=C,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer,C,l),this._mark=0,this._marks=[]}available(e=1){return this.offset+e<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){return this.littleEndian=!0,this}isBigEndian(){return!this.littleEndian}setBigEndian(){return this.littleEndian=!1,this}skip(e=1){return this.offset+=e,this}seek(e){return this.offset=e,this}mark(){return this._mark=this.offset,this}reset(){return this.offset=this._mark,this}pushMark(){return this._marks.push(this.offset),this}popMark(){const e=this._marks.pop();if(e===void 0)throw new Error("Mark stack empty");return this.seek(e),this}rewind(){return this.offset=0,this}ensureAvailable(e=1){if(!this.available(e)){const t=(this.offset+e)*2,I=new Uint8Array(t);I.set(new Uint8Array(this.buffer)),this.buffer=I.buffer,this.length=this.byteLength=t,this._data=new DataView(this.buffer)}return this}readBoolean(){return this.readUint8()!==0}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(e=1){const g=new Uint8Array(e);for(let t=0;t<e;t++)g[t]=this.readByte();return g}readInt16(){const e=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,e}readUint16(){const e=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,e}readInt32(){const e=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,e}readUint32(){const e=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,e}readFloat32(){const e=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,e}readFloat64(){const e=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,e}readBigInt64(){const e=this._data.getBigInt64(this.offset,this.littleEndian);return this.offset+=8,e}readBigUint64(){const e=this._data.getBigUint64(this.offset,this.littleEndian);return this.offset+=8,e}readChar(){return String.fromCharCode(this.readInt8())}readChars(e=1){let g="";for(let t=0;t<e;t++)g+=this.readChar();return g}readUtf8(e=1){return JB(this.readBytes(e))}writeBoolean(e){return this.writeUint8(e?255:0),this}writeInt8(e){return this.ensureAvailable(1),this._data.setInt8(this.offset++,e),this._updateLastWrittenByte(),this}writeUint8(e){return this.ensureAvailable(1),this._data.setUint8(this.offset++,e),this._updateLastWrittenByte(),this}writeByte(e){return this.writeUint8(e)}writeBytes(e){this.ensureAvailable(e.length);for(let g=0;g<e.length;g++)this._data.setUint8(this.offset++,e[g]);return this._updateLastWrittenByte(),this}writeInt16(e){return this.ensureAvailable(2),this._data.setInt16(this.offset,e,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeUint16(e){return this.ensureAvailable(2),this._data.setUint16(this.offset,e,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeInt32(e){return this.ensureAvailable(4),this._data.setInt32(this.offset,e,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeUint32(e){return this.ensureAvailable(4),this._data.setUint32(this.offset,e,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat32(e){return this.ensureAvailable(4),this._data.setFloat32(this.offset,e,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat64(e){return this.ensureAvailable(8),this._data.setFloat64(this.offset,e,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeBigInt64(e){return this.ensureAvailable(8),this._data.setBigInt64(this.offset,e,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeBigUint64(e){return this.ensureAvailable(8),this._data.setBigUint64(this.offset,e,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeChar(e){return this.writeUint8(e.charCodeAt(0))}writeChars(e){for(let g=0;g<e.length;g++)this.writeUint8(e.charCodeAt(g));return this}writeUtf8(e){return this.writeBytes(uB(e))}toArray(){return new Uint8Array(this.buffer,this.byteOffset,this.lastWrittenByte)}_updateLastWrittenByte(){this.offset>this.lastWrittenByte&&(this.lastWrittenByte=this.offset)}}/*! pako 2.0.4 https://github.com/nodeca/pako @license (MIT AND Zlib) */const NB=4,hn=0,cn=1,pB=2;function Ot(i){let e=i.length;for(;--e>=0;)i[e]=0}const yB=0,ja=1,XB=2,kB=3,fB=258,Wi=29,KI=256,WI=KI+1+Wi,Tt=30,bi=19,qa=2*WI+1,Ft=15,RC=16,EB=7,Ji=256,$a=16,eF=17,gF=18,HC=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),Al=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),TB=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),tF=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),YB=512,Xg=new Array((WI+2)*2);Ot(Xg);const sI=new Array(Tt*2);Ot(sI);const bI=new Array(YB);Ot(bI);const JI=new Array(fB-kB+1);Ot(JI);const Gi=new Array(Wi);Ot(Gi);const Wl=new Array(Tt);Ot(Wl);function hC(i,e,g,t,I){this.static_tree=i,this.extra_bits=e,this.extra_base=g,this.elems=t,this.max_length=I,this.has_stree=i&&i.length}let IF,lF,CF;function cC(i,e){this.dyn_tree=i,this.max_code=0,this.stat_desc=e}const iF=i=>i<256?bI[i]:bI[256+(i>>>7)],GI=(i,e)=>{i.pending_buf[i.pending++]=e&255,i.pending_buf[i.pending++]=e>>>8&255},Ug=(i,e,g)=>{i.bi_valid>RC-g?(i.bi_buf|=e<<i.bi_valid&65535,GI(i,i.bi_buf),i.bi_buf=e>>RC-i.bi_valid,i.bi_valid+=g-RC):(i.bi_buf|=e<<i.bi_valid&65535,i.bi_valid+=g)},bg=(i,e,g)=>{Ug(i,g[e*2],g[e*2+1])},nF=(i,e)=>{let g=0;do g|=i&1,i>>>=1,g<<=1;while(--e>0);return g>>>1},vB=i=>{i.bi_valid===16?(GI(i,i.bi_buf),i.bi_buf=0,i.bi_valid=0):i.bi_valid>=8&&(i.pending_buf[i.pending++]=i.bi_buf&255,i.bi_buf>>=8,i.bi_valid-=8)},MB=(i,e)=>{const g=e.dyn_tree,t=e.max_code,I=e.stat_desc.static_tree,l=e.stat_desc.has_stree,C=e.stat_desc.extra_bits,n=e.stat_desc.extra_base,F=e.stat_desc.max_length;let a,U,d,s,o,A,B=0;for(s=0;s<=Ft;s++)i.bl_count[s]=0;for(g[i.heap[i.heap_max]*2+1]=0,a=i.heap_max+1;a<qa;a++)U=i.heap[a],s=g[g[U*2+1]*2+1]+1,s>F&&(s=F,B++),g[U*2+1]=s,!(U>t)&&(i.bl_count[s]++,o=0,U>=n&&(o=C[U-n]),A=g[U*2],i.opt_len+=A*(s+o),l&&(i.static_len+=A*(I[U*2+1]+o)));if(B!==0){do{for(s=F-1;i.bl_count[s]===0;)s--;i.bl_count[s]--,i.bl_count[s+1]+=2,i.bl_count[F]--,B-=2}while(B>0);for(s=F;s!==0;s--)for(U=i.bl_count[s];U!==0;)d=i.heap[--a],!(d>t)&&(g[d*2+1]!==s&&(i.opt_len+=(s-g[d*2+1])*g[d*2],g[d*2+1]=s),U--)}},aF=(i,e,g)=>{const t=new Array(Ft+1);let I=0,l,C;for(l=1;l<=Ft;l++)t[l]=I=I+g[l-1]<<1;for(C=0;C<=e;C++){let n=i[C*2+1];n!==0&&(i[C*2]=nF(t[n]++,n))}},HB=()=>{let i,e,g,t,I;const l=new Array(Ft+1);for(g=0,t=0;t<Wi-1;t++)for(Gi[t]=g,i=0;i<1<<HC[t];i++)JI[g++]=t;for(JI[g-1]=t,I=0,t=0;t<16;t++)for(Wl[t]=I,i=0;i<1<<Al[t];i++)bI[I++]=t;for(I>>=7;t<Tt;t++)for(Wl[t]=I<<7,i=0;i<1<<Al[t]-7;i++)bI[256+I++]=t;for(e=0;e<=Ft;e++)l[e]=0;for(i=0;i<=143;)Xg[i*2+1]=8,i++,l[8]++;for(;i<=255;)Xg[i*2+1]=9,i++,l[9]++;for(;i<=279;)Xg[i*2+1]=7,i++,l[7]++;for(;i<=287;)Xg[i*2+1]=8,i++,l[8]++;for(aF(Xg,WI+1,l),i=0;i<Tt;i++)sI[i*2+1]=5,sI[i*2]=nF(i,5);IF=new hC(Xg,HC,KI+1,WI,Ft),lF=new hC(sI,Al,0,Tt,Ft),CF=new hC(new Array(0),TB,0,bi,EB)},FF=i=>{let e;for(e=0;e<WI;e++)i.dyn_ltree[e*2]=0;for(e=0;e<Tt;e++)i.dyn_dtree[e*2]=0;for(e=0;e<bi;e++)i.bl_tree[e*2]=0;i.dyn_ltree[Ji*2]=1,i.opt_len=i.static_len=0,i.last_lit=i.matches=0},UF=i=>{i.bi_valid>8?GI(i,i.bi_buf):i.bi_valid>0&&(i.pending_buf[i.pending++]=i.bi_buf),i.bi_buf=0,i.bi_valid=0},xB=(i,e,g,t)=>{UF(i),t&&(GI(i,g),GI(i,~g)),i.pending_buf.set(i.window.subarray(e,e+g),i.pending),i.pending+=g},Zn=(i,e,g,t)=>{const I=e*2,l=g*2;return i[I]<i[l]||i[I]===i[l]&&t[e]<=t[g]},ZC=(i,e,g)=>{const t=i.heap[g];let I=g<<1;for(;I<=i.heap_len&&(I<i.heap_len&&Zn(e,i.heap[I+1],i.heap[I],i.depth)&&I++,!Zn(e,t,i.heap[I],i.depth));)i.heap[g]=i.heap[I],g=I,I<<=1;i.heap[g]=t},mn=(i,e,g)=>{let t,I,l=0,C,n;if(i.last_lit!==0)do t=i.pending_buf[i.d_buf+l*2]<<8|i.pending_buf[i.d_buf+l*2+1],I=i.pending_buf[i.l_buf+l],l++,t===0?bg(i,I,e):(C=JI[I],bg(i,C+KI+1,e),n=HC[C],n!==0&&(I-=Gi[C],Ug(i,I,n)),t--,C=iF(t),bg(i,C,g),n=Al[C],n!==0&&(t-=Wl[C],Ug(i,t,n)));while(l<i.last_lit);bg(i,Ji,e)},xC=(i,e)=>{const g=e.dyn_tree,t=e.stat_desc.static_tree,I=e.stat_desc.has_stree,l=e.stat_desc.elems;let C,n,F=-1,a;for(i.heap_len=0,i.heap_max=qa,C=0;C<l;C++)g[C*2]!==0?(i.heap[++i.heap_len]=F=C,i.depth[C]=0):g[C*2+1]=0;for(;i.heap_len<2;)a=i.heap[++i.heap_len]=F<2?++F:0,g[a*2]=1,i.depth[a]=0,i.opt_len--,I&&(i.static_len-=t[a*2+1]);for(e.max_code=F,C=i.heap_len>>1;C>=1;C--)ZC(i,g,C);a=l;do C=i.heap[1],i.heap[1]=i.heap[i.heap_len--],ZC(i,g,1),n=i.heap[1],i.heap[--i.heap_max]=C,i.heap[--i.heap_max]=n,g[a*2]=g[C*2]+g[n*2],i.depth[a]=(i.depth[C]>=i.depth[n]?i.depth[C]:i.depth[n])+1,g[C*2+1]=g[n*2+1]=a,i.heap[1]=a++,ZC(i,g,1);while(i.heap_len>=2);i.heap[--i.heap_max]=i.heap[1],MB(i,e),aF(g,F,i.bl_count)},Wn=(i,e,g)=>{let t,I=-1,l,C=e[0*2+1],n=0,F=7,a=4;for(C===0&&(F=138,a=3),e[(g+1)*2+1]=65535,t=0;t<=g;t++)l=C,C=e[(t+1)*2+1],!(++n<F&&l===C)&&(n<a?i.bl_tree[l*2]+=n:l!==0?(l!==I&&i.bl_tree[l*2]++,i.bl_tree[$a*2]++):n<=10?i.bl_tree[eF*2]++:i.bl_tree[gF*2]++,n=0,I=l,C===0?(F=138,a=3):l===C?(F=6,a=3):(F=7,a=4))},bn=(i,e,g)=>{let t,I=-1,l,C=e[0*2+1],n=0,F=7,a=4;for(C===0&&(F=138,a=3),t=0;t<=g;t++)if(l=C,C=e[(t+1)*2+1],!(++n<F&&l===C)){if(n<a)do bg(i,l,i.bl_tree);while(--n!==0);else l!==0?(l!==I&&(bg(i,l,i.bl_tree),n--),bg(i,$a,i.bl_tree),Ug(i,n-3,2)):n<=10?(bg(i,eF,i.bl_tree),Ug(i,n-3,3)):(bg(i,gF,i.bl_tree),Ug(i,n-11,7));n=0,I=l,C===0?(F=138,a=3):l===C?(F=6,a=3):(F=7,a=4)}},wB=i=>{let e;for(Wn(i,i.dyn_ltree,i.l_desc.max_code),Wn(i,i.dyn_dtree,i.d_desc.max_code),xC(i,i.bl_desc),e=bi-1;e>=3&&i.bl_tree[tF[e]*2+1]===0;e--);return i.opt_len+=3*(e+1)+5+5+4,e},DB=(i,e,g,t)=>{let I;for(Ug(i,e-257,5),Ug(i,g-1,5),Ug(i,t-4,4),I=0;I<t;I++)Ug(i,i.bl_tree[tF[I]*2+1],3);bn(i,i.dyn_ltree,e-1),bn(i,i.dyn_dtree,g-1)},KB=i=>{let e=4093624447,g;for(g=0;g<=31;g++,e>>>=1)if(e&1&&i.dyn_ltree[g*2]!==0)return hn;if(i.dyn_ltree[9*2]!==0||i.dyn_ltree[10*2]!==0||i.dyn_ltree[13*2]!==0)return cn;for(g=32;g<KI;g++)if(i.dyn_ltree[g*2]!==0)return cn;return hn};let Jn=!1;const LB=i=>{Jn||(HB(),Jn=!0),i.l_desc=new cC(i.dyn_ltree,IF),i.d_desc=new cC(i.dyn_dtree,lF),i.bl_desc=new cC(i.bl_tree,CF),i.bi_buf=0,i.bi_valid=0,FF(i)},dF=(i,e,g,t)=>{Ug(i,(yB<<1)+(t?1:0),3),xB(i,e,g,!0)},zB=i=>{Ug(i,ja<<1,3),bg(i,Ji,Xg),vB(i)},_B=(i,e,g,t)=>{let I,l,C=0;i.level>0?(i.strm.data_type===pB&&(i.strm.data_type=KB(i)),xC(i,i.l_desc),xC(i,i.d_desc),C=wB(i),I=i.opt_len+3+7>>>3,l=i.static_len+3+7>>>3,l<=I&&(I=l)):I=l=g+5,g+4<=I&&e!==-1?dF(i,e,g,t):i.strategy===NB||l===I?(Ug(i,(ja<<1)+(t?1:0),3),mn(i,Xg,sI)):(Ug(i,(XB<<1)+(t?1:0),3),DB(i,i.l_desc.max_code+1,i.d_desc.max_code+1,C+1),mn(i,i.dyn_ltree,i.dyn_dtree)),FF(i),t&&UF(i)},OB=(i,e,g)=>(i.pending_buf[i.d_buf+i.last_lit*2]=e>>>8&255,i.pending_buf[i.d_buf+i.last_lit*2+1]=e&255,i.pending_buf[i.l_buf+i.last_lit]=g&255,i.last_lit++,e===0?i.dyn_ltree[g*2]++:(i.matches++,e--,i.dyn_ltree[(JI[g]+KI+1)*2]++,i.dyn_dtree[iF(e)*2]++),i.last_lit===i.lit_bufsize-1);var PB=LB,jB=dF,qB=_B,$B=OB,eQ=zB,gQ={_tr_init:PB,_tr_stored_block:jB,_tr_flush_block:qB,_tr_tally:$B,_tr_align:eQ};const tQ=(i,e,g,t)=>{let I=i&65535|0,l=i>>>16&65535|0,C=0;for(;g!==0;){C=g>2e3?2e3:g,g-=C;do I=I+e[t++]|0,l=l+I|0;while(--C);I%=65521,l%=65521}return I|l<<16|0};var uI=tQ;const IQ=()=>{let i,e=[];for(var g=0;g<256;g++){i=g;for(var t=0;t<8;t++)i=i&1?3988292384^i>>>1:i>>>1;e[g]=i}return e},lQ=new Uint32Array(IQ()),CQ=(i,e,g,t)=>{const I=lQ,l=t+g;i^=-1;for(let C=t;C<l;C++)i=i>>>8^I[(i^e[C])&255];return i^-1};var eg=CQ,Ht={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},LI={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:iQ,_tr_stored_block:nQ,_tr_flush_block:aQ,_tr_tally:zg,_tr_align:FQ}=gQ,{Z_NO_FLUSH:bt,Z_PARTIAL_FLUSH:UQ,Z_FULL_FLUSH:dQ,Z_FINISH:_g,Z_BLOCK:Gn,Z_OK:Jg,Z_STREAM_END:un,Z_STREAM_ERROR:rg,Z_DATA_ERROR:sQ,Z_BUF_ERROR:mC,Z_DEFAULT_COMPRESSION:oQ,Z_FILTERED:AQ,Z_HUFFMAN_ONLY:al,Z_RLE:BQ,Z_FIXED:QQ,Z_DEFAULT_STRATEGY:VQ,Z_UNKNOWN:rQ,Z_DEFLATED:gC}=LI,RQ=9,hQ=15,cQ=8,ZQ=29,mQ=256,wC=mQ+1+ZQ,WQ=30,bQ=19,JQ=2*wC+1,GQ=15,Ze=3,wg=258,mg=wg+Ze+1,uQ=32,tC=42,DC=69,Bl=73,Ql=91,Vl=103,Ut=113,UI=666,$e=1,zI=2,Qt=3,Pt=4,SQ=3,Dg=(i,e)=>(i.msg=Ht[e],e),Sn=i=>(i<<1)-(i>4?9:0),Mg=i=>{let e=i.length;for(;--e>=0;)i[e]=0};let NQ=(i,e,g)=>(e<<i.hash_shift^g)&i.hash_mask,Og=NQ;const Tg=i=>{const e=i.state;let g=e.pending;g>i.avail_out&&(g=i.avail_out),g!==0&&(i.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+g),i.next_out),i.next_out+=g,e.pending_out+=g,i.total_out+=g,i.avail_out-=g,e.pending-=g,e.pending===0&&(e.pending_out=0))},Ig=(i,e)=>{aQ(i,i.block_start>=0?i.block_start:-1,i.strstart-i.block_start,e),i.block_start=i.strstart,Tg(i.strm)},Se=(i,e)=>{i.pending_buf[i.pending++]=e},aI=(i,e)=>{i.pending_buf[i.pending++]=e>>>8&255,i.pending_buf[i.pending++]=e&255},pQ=(i,e,g,t)=>{let I=i.avail_in;return I>t&&(I=t),I===0?0:(i.avail_in-=I,e.set(i.input.subarray(i.next_in,i.next_in+I),g),i.state.wrap===1?i.adler=uI(i.adler,e,I,g):i.state.wrap===2&&(i.adler=eg(i.adler,e,I,g)),i.next_in+=I,i.total_in+=I,I)},sF=(i,e)=>{let g=i.max_chain_length,t=i.strstart,I,l,C=i.prev_length,n=i.nice_match;const F=i.strstart>i.w_size-mg?i.strstart-(i.w_size-mg):0,a=i.window,U=i.w_mask,d=i.prev,s=i.strstart+wg;let o=a[t+C-1],A=a[t+C];i.prev_length>=i.good_match&&(g>>=2),n>i.lookahead&&(n=i.lookahead);do if(I=e,!(a[I+C]!==A||a[I+C-1]!==o||a[I]!==a[t]||a[++I]!==a[t+1])){t+=2,I++;do;while(a[++t]===a[++I]&&a[++t]===a[++I]&&a[++t]===a[++I]&&a[++t]===a[++I]&&a[++t]===a[++I]&&a[++t]===a[++I]&&a[++t]===a[++I]&&a[++t]===a[++I]&&t<s);if(l=wg-(s-t),t=s-wg,l>C){if(i.match_start=e,C=l,l>=n)break;o=a[t+C-1],A=a[t+C]}}while((e=d[e&U])>F&&--g!==0);return C<=i.lookahead?C:i.lookahead},Vt=i=>{const e=i.w_size;let g,t,I,l,C;do{if(l=i.window_size-i.lookahead-i.strstart,i.strstart>=e+(e-mg)){i.window.set(i.window.subarray(e,e+e),0),i.match_start-=e,i.strstart-=e,i.block_start-=e,t=i.hash_size,g=t;do I=i.head[--g],i.head[g]=I>=e?I-e:0;while(--t);t=e,g=t;do I=i.prev[--g],i.prev[g]=I>=e?I-e:0;while(--t);l+=e}if(i.strm.avail_in===0)break;if(t=pQ(i.strm,i.window,i.strstart+i.lookahead,l),i.lookahead+=t,i.lookahead+i.insert>=Ze)for(C=i.strstart-i.insert,i.ins_h=i.window[C],i.ins_h=Og(i,i.ins_h,i.window[C+1]);i.insert&&(i.ins_h=Og(i,i.ins_h,i.window[C+Ze-1]),i.prev[C&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=C,C++,i.insert--,!(i.lookahead+i.insert<Ze)););}while(i.lookahead<mg&&i.strm.avail_in!==0)},yQ=(i,e)=>{let g=65535;for(g>i.pending_buf_size-5&&(g=i.pending_buf_size-5);;){if(i.lookahead<=1){if(Vt(i),i.lookahead===0&&e===bt)return $e;if(i.lookahead===0)break}i.strstart+=i.lookahead,i.lookahead=0;const t=i.block_start+g;if((i.strstart===0||i.strstart>=t)&&(i.lookahead=i.strstart-t,i.strstart=t,Ig(i,!1),i.strm.avail_out===0)||i.strstart-i.block_start>=i.w_size-mg&&(Ig(i,!1),i.strm.avail_out===0))return $e}return i.insert=0,e===_g?(Ig(i,!0),i.strm.avail_out===0?Qt:Pt):(i.strstart>i.block_start&&(Ig(i,!1),i.strm.avail_out===0),$e)},WC=(i,e)=>{let g,t;for(;;){if(i.lookahead<mg){if(Vt(i),i.lookahead<mg&&e===bt)return $e;if(i.lookahead===0)break}if(g=0,i.lookahead>=Ze&&(i.ins_h=Og(i,i.ins_h,i.window[i.strstart+Ze-1]),g=i.prev[i.strstart&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=i.strstart),g!==0&&i.strstart-g<=i.w_size-mg&&(i.match_length=sF(i,g)),i.match_length>=Ze)if(t=zg(i,i.strstart-i.match_start,i.match_length-Ze),i.lookahead-=i.match_length,i.match_length<=i.max_lazy_match&&i.lookahead>=Ze){i.match_length--;do i.strstart++,i.ins_h=Og(i,i.ins_h,i.window[i.strstart+Ze-1]),g=i.prev[i.strstart&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=i.strstart;while(--i.match_length!==0);i.strstart++}else i.strstart+=i.match_length,i.match_length=0,i.ins_h=i.window[i.strstart],i.ins_h=Og(i,i.ins_h,i.window[i.strstart+1]);else t=zg(i,0,i.window[i.strstart]),i.lookahead--,i.strstart++;if(t&&(Ig(i,!1),i.strm.avail_out===0))return $e}return i.insert=i.strstart<Ze-1?i.strstart:Ze-1,e===_g?(Ig(i,!0),i.strm.avail_out===0?Qt:Pt):i.last_lit&&(Ig(i,!1),i.strm.avail_out===0)?$e:zI},yt=(i,e)=>{let g,t,I;for(;;){if(i.lookahead<mg){if(Vt(i),i.lookahead<mg&&e===bt)return $e;if(i.lookahead===0)break}if(g=0,i.lookahead>=Ze&&(i.ins_h=Og(i,i.ins_h,i.window[i.strstart+Ze-1]),g=i.prev[i.strstart&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=i.strstart),i.prev_length=i.match_length,i.prev_match=i.match_start,i.match_length=Ze-1,g!==0&&i.prev_length<i.max_lazy_match&&i.strstart-g<=i.w_size-mg&&(i.match_length=sF(i,g),i.match_length<=5&&(i.strategy===AQ||i.match_length===Ze&&i.strstart-i.match_start>4096)&&(i.match_length=Ze-1)),i.prev_length>=Ze&&i.match_length<=i.prev_length){I=i.strstart+i.lookahead-Ze,t=zg(i,i.strstart-1-i.prev_match,i.prev_length-Ze),i.lookahead-=i.prev_length-1,i.prev_length-=2;do++i.strstart<=I&&(i.ins_h=Og(i,i.ins_h,i.window[i.strstart+Ze-1]),g=i.prev[i.strstart&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=i.strstart);while(--i.prev_length!==0);if(i.match_available=0,i.match_length=Ze-1,i.strstart++,t&&(Ig(i,!1),i.strm.avail_out===0))return $e}else if(i.match_available){if(t=zg(i,0,i.window[i.strstart-1]),t&&Ig(i,!1),i.strstart++,i.lookahead--,i.strm.avail_out===0)return $e}else i.match_available=1,i.strstart++,i.lookahead--}return i.match_available&&(t=zg(i,0,i.window[i.strstart-1]),i.match_available=0),i.insert=i.strstart<Ze-1?i.strstart:Ze-1,e===_g?(Ig(i,!0),i.strm.avail_out===0?Qt:Pt):i.last_lit&&(Ig(i,!1),i.strm.avail_out===0)?$e:zI},XQ=(i,e)=>{let g,t,I,l;const C=i.window;for(;;){if(i.lookahead<=wg){if(Vt(i),i.lookahead<=wg&&e===bt)return $e;if(i.lookahead===0)break}if(i.match_length=0,i.lookahead>=Ze&&i.strstart>0&&(I=i.strstart-1,t=C[I],t===C[++I]&&t===C[++I]&&t===C[++I])){l=i.strstart+wg;do;while(t===C[++I]&&t===C[++I]&&t===C[++I]&&t===C[++I]&&t===C[++I]&&t===C[++I]&&t===C[++I]&&t===C[++I]&&I<l);i.match_length=wg-(l-I),i.match_length>i.lookahead&&(i.match_length=i.lookahead)}if(i.match_length>=Ze?(g=zg(i,1,i.match_length-Ze),i.lookahead-=i.match_length,i.strstart+=i.match_length,i.match_length=0):(g=zg(i,0,i.window[i.strstart]),i.lookahead--,i.strstart++),g&&(Ig(i,!1),i.strm.avail_out===0))return $e}return i.insert=0,e===_g?(Ig(i,!0),i.strm.avail_out===0?Qt:Pt):i.last_lit&&(Ig(i,!1),i.strm.avail_out===0)?$e:zI},kQ=(i,e)=>{let g;for(;;){if(i.lookahead===0&&(Vt(i),i.lookahead===0)){if(e===bt)return $e;break}if(i.match_length=0,g=zg(i,0,i.window[i.strstart]),i.lookahead--,i.strstart++,g&&(Ig(i,!1),i.strm.avail_out===0))return $e}return i.insert=0,e===_g?(Ig(i,!0),i.strm.avail_out===0?Qt:Pt):i.last_lit&&(Ig(i,!1),i.strm.avail_out===0)?$e:zI};function Wg(i,e,g,t,I){this.good_length=i,this.max_lazy=e,this.nice_length=g,this.max_chain=t,this.func=I}const dI=[new Wg(0,0,0,0,yQ),new Wg(4,4,8,4,WC),new Wg(4,5,16,8,WC),new Wg(4,6,32,32,WC),new Wg(4,4,16,16,yt),new Wg(8,16,32,32,yt),new Wg(8,16,128,128,yt),new Wg(8,32,128,256,yt),new Wg(32,128,258,1024,yt),new Wg(32,258,258,4096,yt)],fQ=i=>{i.window_size=2*i.w_size,Mg(i.head),i.max_lazy_match=dI[i.level].max_lazy,i.good_match=dI[i.level].good_length,i.nice_match=dI[i.level].nice_length,i.max_chain_length=dI[i.level].max_chain,i.strstart=0,i.block_start=0,i.lookahead=0,i.insert=0,i.match_length=i.prev_length=Ze-1,i.match_available=0,i.ins_h=0};function EQ(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=gC,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(JQ*2),this.dyn_dtree=new Uint16Array((2*WQ+1)*2),this.bl_tree=new Uint16Array((2*bQ+1)*2),Mg(this.dyn_ltree),Mg(this.dyn_dtree),Mg(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(GQ+1),this.heap=new Uint16Array(2*wC+1),Mg(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*wC+1),Mg(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const oF=i=>{if(!i||!i.state)return Dg(i,rg);i.total_in=i.total_out=0,i.data_type=rQ;const e=i.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?tC:Ut,i.adler=e.wrap===2?0:1,e.last_flush=bt,iQ(e),Jg},AF=i=>{const e=oF(i);return e===Jg&&fQ(i.state),e},TQ=(i,e)=>!i||!i.state||i.state.wrap!==2?rg:(i.state.gzhead=e,Jg),BF=(i,e,g,t,I,l)=>{if(!i)return rg;let C=1;if(e===oQ&&(e=6),t<0?(C=0,t=-t):t>15&&(C=2,t-=16),I<1||I>RQ||g!==gC||t<8||t>15||e<0||e>9||l<0||l>QQ)return Dg(i,rg);t===8&&(t=9);const n=new EQ;return i.state=n,n.strm=i,n.wrap=C,n.gzhead=null,n.w_bits=t,n.w_size=1<<n.w_bits,n.w_mask=n.w_size-1,n.hash_bits=I+7,n.hash_size=1<<n.hash_bits,n.hash_mask=n.hash_size-1,n.hash_shift=~~((n.hash_bits+Ze-1)/Ze),n.window=new Uint8Array(n.w_size*2),n.head=new Uint16Array(n.hash_size),n.prev=new Uint16Array(n.w_size),n.lit_bufsize=1<<I+6,n.pending_buf_size=n.lit_bufsize*4,n.pending_buf=new Uint8Array(n.pending_buf_size),n.d_buf=1*n.lit_bufsize,n.l_buf=(1+2)*n.lit_bufsize,n.level=e,n.strategy=l,n.method=g,AF(i)},YQ=(i,e)=>BF(i,e,gC,hQ,cQ,VQ),vQ=(i,e)=>{let g,t;if(!i||!i.state||e>Gn||e<0)return i?Dg(i,rg):rg;const I=i.state;if(!i.output||!i.input&&i.avail_in!==0||I.status===UI&&e!==_g)return Dg(i,i.avail_out===0?mC:rg);I.strm=i;const l=I.last_flush;if(I.last_flush=e,I.status===tC)if(I.wrap===2)i.adler=0,Se(I,31),Se(I,139),Se(I,8),I.gzhead?(Se(I,(I.gzhead.text?1:0)+(I.gzhead.hcrc?2:0)+(I.gzhead.extra?4:0)+(I.gzhead.name?8:0)+(I.gzhead.comment?16:0)),Se(I,I.gzhead.time&255),Se(I,I.gzhead.time>>8&255),Se(I,I.gzhead.time>>16&255),Se(I,I.gzhead.time>>24&255),Se(I,I.level===9?2:I.strategy>=al||I.level<2?4:0),Se(I,I.gzhead.os&255),I.gzhead.extra&&I.gzhead.extra.length&&(Se(I,I.gzhead.extra.length&255),Se(I,I.gzhead.extra.length>>8&255)),I.gzhead.hcrc&&(i.adler=eg(i.adler,I.pending_buf,I.pending,0)),I.gzindex=0,I.status=DC):(Se(I,0),Se(I,0),Se(I,0),Se(I,0),Se(I,0),Se(I,I.level===9?2:I.strategy>=al||I.level<2?4:0),Se(I,SQ),I.status=Ut);else{let C=gC+(I.w_bits-8<<4)<<8,n=-1;I.strategy>=al||I.level<2?n=0:I.level<6?n=1:I.level===6?n=2:n=3,C|=n<<6,I.strstart!==0&&(C|=uQ),C+=31-C%31,I.status=Ut,aI(I,C),I.strstart!==0&&(aI(I,i.adler>>>16),aI(I,i.adler&65535)),i.adler=1}if(I.status===DC)if(I.gzhead.extra){for(g=I.pending;I.gzindex<(I.gzhead.extra.length&65535)&&!(I.pending===I.pending_buf_size&&(I.gzhead.hcrc&&I.pending>g&&(i.adler=eg(i.adler,I.pending_buf,I.pending-g,g)),Tg(i),g=I.pending,I.pending===I.pending_buf_size));)Se(I,I.gzhead.extra[I.gzindex]&255),I.gzindex++;I.gzhead.hcrc&&I.pending>g&&(i.adler=eg(i.adler,I.pending_buf,I.pending-g,g)),I.gzindex===I.gzhead.extra.length&&(I.gzindex=0,I.status=Bl)}else I.status=Bl;if(I.status===Bl)if(I.gzhead.name){g=I.pending;do{if(I.pending===I.pending_buf_size&&(I.gzhead.hcrc&&I.pending>g&&(i.adler=eg(i.adler,I.pending_buf,I.pending-g,g)),Tg(i),g=I.pending,I.pending===I.pending_buf_size)){t=1;break}I.gzindex<I.gzhead.name.length?t=I.gzhead.name.charCodeAt(I.gzindex++)&255:t=0,Se(I,t)}while(t!==0);I.gzhead.hcrc&&I.pending>g&&(i.adler=eg(i.adler,I.pending_buf,I.pending-g,g)),t===0&&(I.gzindex=0,I.status=Ql)}else I.status=Ql;if(I.status===Ql)if(I.gzhead.comment){g=I.pending;do{if(I.pending===I.pending_buf_size&&(I.gzhead.hcrc&&I.pending>g&&(i.adler=eg(i.adler,I.pending_buf,I.pending-g,g)),Tg(i),g=I.pending,I.pending===I.pending_buf_size)){t=1;break}I.gzindex<I.gzhead.comment.length?t=I.gzhead.comment.charCodeAt(I.gzindex++)&255:t=0,Se(I,t)}while(t!==0);I.gzhead.hcrc&&I.pending>g&&(i.adler=eg(i.adler,I.pending_buf,I.pending-g,g)),t===0&&(I.status=Vl)}else I.status=Vl;if(I.status===Vl&&(I.gzhead.hcrc?(I.pending+2>I.pending_buf_size&&Tg(i),I.pending+2<=I.pending_buf_size&&(Se(I,i.adler&255),Se(I,i.adler>>8&255),i.adler=0,I.status=Ut)):I.status=Ut),I.pending!==0){if(Tg(i),i.avail_out===0)return I.last_flush=-1,Jg}else if(i.avail_in===0&&Sn(e)<=Sn(l)&&e!==_g)return Dg(i,mC);if(I.status===UI&&i.avail_in!==0)return Dg(i,mC);if(i.avail_in!==0||I.lookahead!==0||e!==bt&&I.status!==UI){let C=I.strategy===al?kQ(I,e):I.strategy===BQ?XQ(I,e):dI[I.level].func(I,e);if((C===Qt||C===Pt)&&(I.status=UI),C===$e||C===Qt)return i.avail_out===0&&(I.last_flush=-1),Jg;if(C===zI&&(e===UQ?FQ(I):e!==Gn&&(nQ(I,0,0,!1),e===dQ&&(Mg(I.head),I.lookahead===0&&(I.strstart=0,I.block_start=0,I.insert=0))),Tg(i),i.avail_out===0))return I.last_flush=-1,Jg}return e!==_g?Jg:I.wrap<=0?un:(I.wrap===2?(Se(I,i.adler&255),Se(I,i.adler>>8&255),Se(I,i.adler>>16&255),Se(I,i.adler>>24&255),Se(I,i.total_in&255),Se(I,i.total_in>>8&255),Se(I,i.total_in>>16&255),Se(I,i.total_in>>24&255)):(aI(I,i.adler>>>16),aI(I,i.adler&65535)),Tg(i),I.wrap>0&&(I.wrap=-I.wrap),I.pending!==0?Jg:un)},MQ=i=>{if(!i||!i.state)return rg;const e=i.state.status;return e!==tC&&e!==DC&&e!==Bl&&e!==Ql&&e!==Vl&&e!==Ut&&e!==UI?Dg(i,rg):(i.state=null,e===Ut?Dg(i,sQ):Jg)},HQ=(i,e)=>{let g=e.length;if(!i||!i.state)return rg;const t=i.state,I=t.wrap;if(I===2||I===1&&t.status!==tC||t.lookahead)return rg;if(I===1&&(i.adler=uI(i.adler,e,g,0)),t.wrap=0,g>=t.w_size){I===0&&(Mg(t.head),t.strstart=0,t.block_start=0,t.insert=0);let F=new Uint8Array(t.w_size);F.set(e.subarray(g-t.w_size,g),0),e=F,g=t.w_size}const l=i.avail_in,C=i.next_in,n=i.input;for(i.avail_in=g,i.next_in=0,i.input=e,Vt(t);t.lookahead>=Ze;){let F=t.strstart,a=t.lookahead-(Ze-1);do t.ins_h=Og(t,t.ins_h,t.window[F+Ze-1]),t.prev[F&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=F,F++;while(--a);t.strstart=F,t.lookahead=Ze-1,Vt(t)}return t.strstart+=t.lookahead,t.block_start=t.strstart,t.insert=t.lookahead,t.lookahead=0,t.match_length=t.prev_length=Ze-1,t.match_available=0,i.next_in=C,i.input=n,i.avail_in=l,t.wrap=I,Jg};var xQ=YQ,wQ=BF,DQ=AF,KQ=oF,LQ=TQ,zQ=vQ,_Q=MQ,OQ=HQ,PQ="pako deflate (from Nodeca project)",oI={deflateInit:xQ,deflateInit2:wQ,deflateReset:DQ,deflateResetKeep:KQ,deflateSetHeader:LQ,deflate:zQ,deflateEnd:_Q,deflateSetDictionary:OQ,deflateInfo:PQ};const jQ=(i,e)=>Object.prototype.hasOwnProperty.call(i,e);var qQ=function(i){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const g=e.shift();if(!!g){if(typeof g!="object")throw new TypeError(g+"must be non-object");for(const t in g)jQ(g,t)&&(i[t]=g[t])}}return i},$Q=i=>{let e=0;for(let t=0,I=i.length;t<I;t++)e+=i[t].length;const g=new Uint8Array(e);for(let t=0,I=0,l=i.length;t<l;t++){let C=i[t];g.set(C,I),I+=C.length}return g},IC={assign:qQ,flattenChunks:$Q};let QF=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{QF=!1}const SI=new Uint8Array(256);for(let i=0;i<256;i++)SI[i]=i>=252?6:i>=248?5:i>=240?4:i>=224?3:i>=192?2:1;SI[254]=SI[254]=1;var e0=i=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(i);let e,g,t,I,l,C=i.length,n=0;for(I=0;I<C;I++)g=i.charCodeAt(I),(g&64512)===55296&&I+1<C&&(t=i.charCodeAt(I+1),(t&64512)===56320&&(g=65536+(g-55296<<10)+(t-56320),I++)),n+=g<128?1:g<2048?2:g<65536?3:4;for(e=new Uint8Array(n),l=0,I=0;l<n;I++)g=i.charCodeAt(I),(g&64512)===55296&&I+1<C&&(t=i.charCodeAt(I+1),(t&64512)===56320&&(g=65536+(g-55296<<10)+(t-56320),I++)),g<128?e[l++]=g:g<2048?(e[l++]=192|g>>>6,e[l++]=128|g&63):g<65536?(e[l++]=224|g>>>12,e[l++]=128|g>>>6&63,e[l++]=128|g&63):(e[l++]=240|g>>>18,e[l++]=128|g>>>12&63,e[l++]=128|g>>>6&63,e[l++]=128|g&63);return e};const g0=(i,e)=>{if(e<65534&&i.subarray&&QF)return String.fromCharCode.apply(null,i.length===e?i:i.subarray(0,e));let g="";for(let t=0;t<e;t++)g+=String.fromCharCode(i[t]);return g};var t0=(i,e)=>{const g=e||i.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(i.subarray(0,e));let t,I;const l=new Array(g*2);for(I=0,t=0;t<g;){let C=i[t++];if(C<128){l[I++]=C;continue}let n=SI[C];if(n>4){l[I++]=65533,t+=n-1;continue}for(C&=n===2?31:n===3?15:7;n>1&&t<g;)C=C<<6|i[t++]&63,n--;if(n>1){l[I++]=65533;continue}C<65536?l[I++]=C:(C-=65536,l[I++]=55296|C>>10&1023,l[I++]=56320|C&1023)}return g0(l,I)},I0=(i,e)=>{e=e||i.length,e>i.length&&(e=i.length);let g=e-1;for(;g>=0&&(i[g]&192)===128;)g--;return g<0||g===0?e:g+SI[i[g]]>e?g:e},NI={string2buf:e0,buf2string:t0,utf8border:I0};function l0(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var VF=l0;const rF=Object.prototype.toString,{Z_NO_FLUSH:C0,Z_SYNC_FLUSH:i0,Z_FULL_FLUSH:n0,Z_FINISH:a0,Z_OK:bl,Z_STREAM_END:F0,Z_DEFAULT_COMPRESSION:U0,Z_DEFAULT_STRATEGY:d0,Z_DEFLATED:s0}=LI;function ui(i){this.options=IC.assign({level:U0,method:s0,chunkSize:16384,windowBits:15,memLevel:8,strategy:d0},i||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new VF,this.strm.avail_out=0;let g=oI.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(g!==bl)throw new Error(Ht[g]);if(e.header&&oI.deflateSetHeader(this.strm,e.header),e.dictionary){let t;if(typeof e.dictionary=="string"?t=NI.string2buf(e.dictionary):rF.call(e.dictionary)==="[object ArrayBuffer]"?t=new Uint8Array(e.dictionary):t=e.dictionary,g=oI.deflateSetDictionary(this.strm,t),g!==bl)throw new Error(Ht[g]);this._dict_set=!0}}ui.prototype.push=function(i,e){const g=this.strm,t=this.options.chunkSize;let I,l;if(this.ended)return!1;for(e===~~e?l=e:l=e===!0?a0:C0,typeof i=="string"?g.input=NI.string2buf(i):rF.call(i)==="[object ArrayBuffer]"?g.input=new Uint8Array(i):g.input=i,g.next_in=0,g.avail_in=g.input.length;;){if(g.avail_out===0&&(g.output=new Uint8Array(t),g.next_out=0,g.avail_out=t),(l===i0||l===n0)&&g.avail_out<=6){this.onData(g.output.subarray(0,g.next_out)),g.avail_out=0;continue}if(I=oI.deflate(g,l),I===F0)return g.next_out>0&&this.onData(g.output.subarray(0,g.next_out)),I=oI.deflateEnd(this.strm),this.onEnd(I),this.ended=!0,I===bl;if(g.avail_out===0){this.onData(g.output);continue}if(l>0&&g.next_out>0){this.onData(g.output.subarray(0,g.next_out)),g.avail_out=0;continue}if(g.avail_in===0)break}return!0};ui.prototype.onData=function(i){this.chunks.push(i)};ui.prototype.onEnd=function(i){i===bl&&(this.result=IC.flattenChunks(this.chunks)),this.chunks=[],this.err=i,this.msg=this.strm.msg};const Fl=30,o0=12;var A0=function(e,g){let t,I,l,C,n,F,a,U,d,s,o,A,B,Q,r,R,V,h,m,Z,c,W,u,J;const N=e.state;t=e.next_in,u=e.input,I=t+(e.avail_in-5),l=e.next_out,J=e.output,C=l-(g-e.avail_out),n=l+(e.avail_out-257),F=N.dmax,a=N.wsize,U=N.whave,d=N.wnext,s=N.window,o=N.hold,A=N.bits,B=N.lencode,Q=N.distcode,r=(1<<N.lenbits)-1,R=(1<<N.distbits)-1;e:do{A<15&&(o+=u[t++]<<A,A+=8,o+=u[t++]<<A,A+=8),V=B[o&r];g:for(;;){if(h=V>>>24,o>>>=h,A-=h,h=V>>>16&255,h===0)J[l++]=V&65535;else if(h&16){m=V&65535,h&=15,h&&(A<h&&(o+=u[t++]<<A,A+=8),m+=o&(1<<h)-1,o>>>=h,A-=h),A<15&&(o+=u[t++]<<A,A+=8,o+=u[t++]<<A,A+=8),V=Q[o&R];t:for(;;){if(h=V>>>24,o>>>=h,A-=h,h=V>>>16&255,h&16){if(Z=V&65535,h&=15,A<h&&(o+=u[t++]<<A,A+=8,A<h&&(o+=u[t++]<<A,A+=8)),Z+=o&(1<<h)-1,Z>F){e.msg="invalid distance too far back",N.mode=Fl;break e}if(o>>>=h,A-=h,h=l-C,Z>h){if(h=Z-h,h>U&&N.sane){e.msg="invalid distance too far back",N.mode=Fl;break e}if(c=0,W=s,d===0){if(c+=a-h,h<m){m-=h;do J[l++]=s[c++];while(--h);c=l-Z,W=J}}else if(d<h){if(c+=a+d-h,h-=d,h<m){m-=h;do J[l++]=s[c++];while(--h);if(c=0,d<m){h=d,m-=h;do J[l++]=s[c++];while(--h);c=l-Z,W=J}}}else if(c+=d-h,h<m){m-=h;do J[l++]=s[c++];while(--h);c=l-Z,W=J}for(;m>2;)J[l++]=W[c++],J[l++]=W[c++],J[l++]=W[c++],m-=3;m&&(J[l++]=W[c++],m>1&&(J[l++]=W[c++]))}else{c=l-Z;do J[l++]=J[c++],J[l++]=J[c++],J[l++]=J[c++],m-=3;while(m>2);m&&(J[l++]=J[c++],m>1&&(J[l++]=J[c++]))}}else if((h&64)===0){V=Q[(V&65535)+(o&(1<<h)-1)];continue t}else{e.msg="invalid distance code",N.mode=Fl;break e}break}}else if((h&64)===0){V=B[(V&65535)+(o&(1<<h)-1)];continue g}else if(h&32){N.mode=o0;break e}else{e.msg="invalid literal/length code",N.mode=Fl;break e}break}}while(t<I&&l<n);m=A>>3,t-=m,A-=m<<3,o&=(1<<A)-1,e.next_in=t,e.next_out=l,e.avail_in=t<I?5+(I-t):5-(t-I),e.avail_out=l<n?257+(n-l):257-(l-n),N.hold=o,N.bits=A};const Xt=15,Nn=852,pn=592,yn=0,bC=1,Xn=2,B0=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),Q0=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),V0=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),r0=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),R0=(i,e,g,t,I,l,C,n)=>{const F=n.bits;let a=0,U=0,d=0,s=0,o=0,A=0,B=0,Q=0,r=0,R=0,V,h,m,Z,c,W=null,u=0,J;const N=new Uint16Array(Xt+1),X=new Uint16Array(Xt+1);let y=null,p=0,_,ae,ne;for(a=0;a<=Xt;a++)N[a]=0;for(U=0;U<t;U++)N[e[g+U]]++;for(o=F,s=Xt;s>=1&&N[s]===0;s--);if(o>s&&(o=s),s===0)return I[l++]=1<<24|64<<16|0,I[l++]=1<<24|64<<16|0,n.bits=1,0;for(d=1;d<s&&N[d]===0;d++);for(o<d&&(o=d),Q=1,a=1;a<=Xt;a++)if(Q<<=1,Q-=N[a],Q<0)return-1;if(Q>0&&(i===yn||s!==1))return-1;for(X[1]=0,a=1;a<Xt;a++)X[a+1]=X[a]+N[a];for(U=0;U<t;U++)e[g+U]!==0&&(C[X[e[g+U]]++]=U);if(i===yn?(W=y=C,J=19):i===bC?(W=B0,u-=257,y=Q0,p-=257,J=256):(W=V0,y=r0,J=-1),R=0,U=0,a=d,c=l,A=o,B=0,m=-1,r=1<<o,Z=r-1,i===bC&&r>Nn||i===Xn&&r>pn)return 1;for(;;){_=a-B,C[U]<J?(ae=0,ne=C[U]):C[U]>J?(ae=y[p+C[U]],ne=W[u+C[U]]):(ae=32+64,ne=0),V=1<<a-B,h=1<<A,d=h;do h-=V,I[c+(R>>B)+h]=_<<24|ae<<16|ne|0;while(h!==0);for(V=1<<a-1;R&V;)V>>=1;if(V!==0?(R&=V-1,R+=V):R=0,U++,--N[a]===0){if(a===s)break;a=e[g+C[U]]}if(a>o&&(R&Z)!==m){for(B===0&&(B=o),c+=d,A=a-B,Q=1<<A;A+B<s&&(Q-=N[A+B],!(Q<=0));)A++,Q<<=1;if(r+=1<<A,i===bC&&r>Nn||i===Xn&&r>pn)return 1;m=R&Z,I[m]=o<<24|A<<16|c-l|0}}return R!==0&&(I[c+R]=a-B<<24|64<<16|0),n.bits=o,0};var AI=R0;const h0=0,RF=1,hF=2,{Z_FINISH:kn,Z_BLOCK:c0,Z_TREES:Ul,Z_OK:rt,Z_STREAM_END:Z0,Z_NEED_DICT:m0,Z_STREAM_ERROR:Rg,Z_DATA_ERROR:cF,Z_MEM_ERROR:ZF,Z_BUF_ERROR:W0,Z_DEFLATED:fn}=LI,mF=1,En=2,Tn=3,Yn=4,vn=5,Mn=6,Hn=7,xn=8,wn=9,Dn=10,Jl=11,yg=12,JC=13,Kn=14,GC=15,Ln=16,zn=17,_n=18,On=19,dl=20,sl=21,Pn=22,jn=23,qn=24,$n=25,ea=26,uC=27,ga=28,ta=29,we=30,WF=31,b0=32,J0=852,G0=592,u0=15,S0=u0,Ia=i=>(i>>>24&255)+(i>>>8&65280)+((i&65280)<<8)+((i&255)<<24);function N0(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const bF=i=>{if(!i||!i.state)return Rg;const e=i.state;return i.total_in=i.total_out=e.total=0,i.msg="",e.wrap&&(i.adler=e.wrap&1),e.mode=mF,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(J0),e.distcode=e.distdyn=new Int32Array(G0),e.sane=1,e.back=-1,rt},JF=i=>{if(!i||!i.state)return Rg;const e=i.state;return e.wsize=0,e.whave=0,e.wnext=0,bF(i)},GF=(i,e)=>{let g;if(!i||!i.state)return Rg;const t=i.state;return e<0?(g=0,e=-e):(g=(e>>4)+1,e<48&&(e&=15)),e&&(e<8||e>15)?Rg:(t.window!==null&&t.wbits!==e&&(t.window=null),t.wrap=g,t.wbits=e,JF(i))},uF=(i,e)=>{if(!i)return Rg;const g=new N0;i.state=g,g.window=null;const t=GF(i,e);return t!==rt&&(i.state=null),t},p0=i=>uF(i,S0);let la=!0,SC,NC;const y0=i=>{if(la){SC=new Int32Array(512),NC=new Int32Array(32);let e=0;for(;e<144;)i.lens[e++]=8;for(;e<256;)i.lens[e++]=9;for(;e<280;)i.lens[e++]=7;for(;e<288;)i.lens[e++]=8;for(AI(RF,i.lens,0,288,SC,0,i.work,{bits:9}),e=0;e<32;)i.lens[e++]=5;AI(hF,i.lens,0,32,NC,0,i.work,{bits:5}),la=!1}i.lencode=SC,i.lenbits=9,i.distcode=NC,i.distbits=5},SF=(i,e,g,t)=>{let I;const l=i.state;return l.window===null&&(l.wsize=1<<l.wbits,l.wnext=0,l.whave=0,l.window=new Uint8Array(l.wsize)),t>=l.wsize?(l.window.set(e.subarray(g-l.wsize,g),0),l.wnext=0,l.whave=l.wsize):(I=l.wsize-l.wnext,I>t&&(I=t),l.window.set(e.subarray(g-t,g-t+I),l.wnext),t-=I,t?(l.window.set(e.subarray(g-t,g),0),l.wnext=t,l.whave=l.wsize):(l.wnext+=I,l.wnext===l.wsize&&(l.wnext=0),l.whave<l.wsize&&(l.whave+=I))),0},X0=(i,e)=>{let g,t,I,l,C,n,F,a,U,d,s,o,A,B,Q=0,r,R,V,h,m,Z,c,W;const u=new Uint8Array(4);let J,N;const X=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(!i||!i.state||!i.output||!i.input&&i.avail_in!==0)return Rg;g=i.state,g.mode===yg&&(g.mode=JC),C=i.next_out,I=i.output,F=i.avail_out,l=i.next_in,t=i.input,n=i.avail_in,a=g.hold,U=g.bits,d=n,s=F,W=rt;e:for(;;)switch(g.mode){case mF:if(g.wrap===0){g.mode=JC;break}for(;U<16;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}if(g.wrap&2&&a===35615){g.check=0,u[0]=a&255,u[1]=a>>>8&255,g.check=eg(g.check,u,2,0),a=0,U=0,g.mode=En;break}if(g.flags=0,g.head&&(g.head.done=!1),!(g.wrap&1)||(((a&255)<<8)+(a>>8))%31){i.msg="incorrect header check",g.mode=we;break}if((a&15)!==fn){i.msg="unknown compression method",g.mode=we;break}if(a>>>=4,U-=4,c=(a&15)+8,g.wbits===0)g.wbits=c;else if(c>g.wbits){i.msg="invalid window size",g.mode=we;break}g.dmax=1<<g.wbits,i.adler=g.check=1,g.mode=a&512?Dn:yg,a=0,U=0;break;case En:for(;U<16;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}if(g.flags=a,(g.flags&255)!==fn){i.msg="unknown compression method",g.mode=we;break}if(g.flags&57344){i.msg="unknown header flags set",g.mode=we;break}g.head&&(g.head.text=a>>8&1),g.flags&512&&(u[0]=a&255,u[1]=a>>>8&255,g.check=eg(g.check,u,2,0)),a=0,U=0,g.mode=Tn;case Tn:for(;U<32;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}g.head&&(g.head.time=a),g.flags&512&&(u[0]=a&255,u[1]=a>>>8&255,u[2]=a>>>16&255,u[3]=a>>>24&255,g.check=eg(g.check,u,4,0)),a=0,U=0,g.mode=Yn;case Yn:for(;U<16;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}g.head&&(g.head.xflags=a&255,g.head.os=a>>8),g.flags&512&&(u[0]=a&255,u[1]=a>>>8&255,g.check=eg(g.check,u,2,0)),a=0,U=0,g.mode=vn;case vn:if(g.flags&1024){for(;U<16;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}g.length=a,g.head&&(g.head.extra_len=a),g.flags&512&&(u[0]=a&255,u[1]=a>>>8&255,g.check=eg(g.check,u,2,0)),a=0,U=0}else g.head&&(g.head.extra=null);g.mode=Mn;case Mn:if(g.flags&1024&&(o=g.length,o>n&&(o=n),o&&(g.head&&(c=g.head.extra_len-g.length,g.head.extra||(g.head.extra=new Uint8Array(g.head.extra_len)),g.head.extra.set(t.subarray(l,l+o),c)),g.flags&512&&(g.check=eg(g.check,t,o,l)),n-=o,l+=o,g.length-=o),g.length))break e;g.length=0,g.mode=Hn;case Hn:if(g.flags&2048){if(n===0)break e;o=0;do c=t[l+o++],g.head&&c&&g.length<65536&&(g.head.name+=String.fromCharCode(c));while(c&&o<n);if(g.flags&512&&(g.check=eg(g.check,t,o,l)),n-=o,l+=o,c)break e}else g.head&&(g.head.name=null);g.length=0,g.mode=xn;case xn:if(g.flags&4096){if(n===0)break e;o=0;do c=t[l+o++],g.head&&c&&g.length<65536&&(g.head.comment+=String.fromCharCode(c));while(c&&o<n);if(g.flags&512&&(g.check=eg(g.check,t,o,l)),n-=o,l+=o,c)break e}else g.head&&(g.head.comment=null);g.mode=wn;case wn:if(g.flags&512){for(;U<16;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}if(a!==(g.check&65535)){i.msg="header crc mismatch",g.mode=we;break}a=0,U=0}g.head&&(g.head.hcrc=g.flags>>9&1,g.head.done=!0),i.adler=g.check=0,g.mode=yg;break;case Dn:for(;U<32;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}i.adler=g.check=Ia(a),a=0,U=0,g.mode=Jl;case Jl:if(g.havedict===0)return i.next_out=C,i.avail_out=F,i.next_in=l,i.avail_in=n,g.hold=a,g.bits=U,m0;i.adler=g.check=1,g.mode=yg;case yg:if(e===c0||e===Ul)break e;case JC:if(g.last){a>>>=U&7,U-=U&7,g.mode=uC;break}for(;U<3;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}switch(g.last=a&1,a>>>=1,U-=1,a&3){case 0:g.mode=Kn;break;case 1:if(y0(g),g.mode=dl,e===Ul){a>>>=2,U-=2;break e}break;case 2:g.mode=zn;break;case 3:i.msg="invalid block type",g.mode=we}a>>>=2,U-=2;break;case Kn:for(a>>>=U&7,U-=U&7;U<32;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}if((a&65535)!==(a>>>16^65535)){i.msg="invalid stored block lengths",g.mode=we;break}if(g.length=a&65535,a=0,U=0,g.mode=GC,e===Ul)break e;case GC:g.mode=Ln;case Ln:if(o=g.length,o){if(o>n&&(o=n),o>F&&(o=F),o===0)break e;I.set(t.subarray(l,l+o),C),n-=o,l+=o,F-=o,C+=o,g.length-=o;break}g.mode=yg;break;case zn:for(;U<14;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}if(g.nlen=(a&31)+257,a>>>=5,U-=5,g.ndist=(a&31)+1,a>>>=5,U-=5,g.ncode=(a&15)+4,a>>>=4,U-=4,g.nlen>286||g.ndist>30){i.msg="too many length or distance symbols",g.mode=we;break}g.have=0,g.mode=_n;case _n:for(;g.have<g.ncode;){for(;U<3;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}g.lens[X[g.have++]]=a&7,a>>>=3,U-=3}for(;g.have<19;)g.lens[X[g.have++]]=0;if(g.lencode=g.lendyn,g.lenbits=7,J={bits:g.lenbits},W=AI(h0,g.lens,0,19,g.lencode,0,g.work,J),g.lenbits=J.bits,W){i.msg="invalid code lengths set",g.mode=we;break}g.have=0,g.mode=On;case On:for(;g.have<g.nlen+g.ndist;){for(;Q=g.lencode[a&(1<<g.lenbits)-1],r=Q>>>24,R=Q>>>16&255,V=Q&65535,!(r<=U);){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}if(V<16)a>>>=r,U-=r,g.lens[g.have++]=V;else{if(V===16){for(N=r+2;U<N;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}if(a>>>=r,U-=r,g.have===0){i.msg="invalid bit length repeat",g.mode=we;break}c=g.lens[g.have-1],o=3+(a&3),a>>>=2,U-=2}else if(V===17){for(N=r+3;U<N;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}a>>>=r,U-=r,c=0,o=3+(a&7),a>>>=3,U-=3}else{for(N=r+7;U<N;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}a>>>=r,U-=r,c=0,o=11+(a&127),a>>>=7,U-=7}if(g.have+o>g.nlen+g.ndist){i.msg="invalid bit length repeat",g.mode=we;break}for(;o--;)g.lens[g.have++]=c}}if(g.mode===we)break;if(g.lens[256]===0){i.msg="invalid code -- missing end-of-block",g.mode=we;break}if(g.lenbits=9,J={bits:g.lenbits},W=AI(RF,g.lens,0,g.nlen,g.lencode,0,g.work,J),g.lenbits=J.bits,W){i.msg="invalid literal/lengths set",g.mode=we;break}if(g.distbits=6,g.distcode=g.distdyn,J={bits:g.distbits},W=AI(hF,g.lens,g.nlen,g.ndist,g.distcode,0,g.work,J),g.distbits=J.bits,W){i.msg="invalid distances set",g.mode=we;break}if(g.mode=dl,e===Ul)break e;case dl:g.mode=sl;case sl:if(n>=6&&F>=258){i.next_out=C,i.avail_out=F,i.next_in=l,i.avail_in=n,g.hold=a,g.bits=U,A0(i,s),C=i.next_out,I=i.output,F=i.avail_out,l=i.next_in,t=i.input,n=i.avail_in,a=g.hold,U=g.bits,g.mode===yg&&(g.back=-1);break}for(g.back=0;Q=g.lencode[a&(1<<g.lenbits)-1],r=Q>>>24,R=Q>>>16&255,V=Q&65535,!(r<=U);){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}if(R&&(R&240)===0){for(h=r,m=R,Z=V;Q=g.lencode[Z+((a&(1<<h+m)-1)>>h)],r=Q>>>24,R=Q>>>16&255,V=Q&65535,!(h+r<=U);){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}a>>>=h,U-=h,g.back+=h}if(a>>>=r,U-=r,g.back+=r,g.length=V,R===0){g.mode=ea;break}if(R&32){g.back=-1,g.mode=yg;break}if(R&64){i.msg="invalid literal/length code",g.mode=we;break}g.extra=R&15,g.mode=Pn;case Pn:if(g.extra){for(N=g.extra;U<N;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}g.length+=a&(1<<g.extra)-1,a>>>=g.extra,U-=g.extra,g.back+=g.extra}g.was=g.length,g.mode=jn;case jn:for(;Q=g.distcode[a&(1<<g.distbits)-1],r=Q>>>24,R=Q>>>16&255,V=Q&65535,!(r<=U);){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}if((R&240)===0){for(h=r,m=R,Z=V;Q=g.distcode[Z+((a&(1<<h+m)-1)>>h)],r=Q>>>24,R=Q>>>16&255,V=Q&65535,!(h+r<=U);){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}a>>>=h,U-=h,g.back+=h}if(a>>>=r,U-=r,g.back+=r,R&64){i.msg="invalid distance code",g.mode=we;break}g.offset=V,g.extra=R&15,g.mode=qn;case qn:if(g.extra){for(N=g.extra;U<N;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}g.offset+=a&(1<<g.extra)-1,a>>>=g.extra,U-=g.extra,g.back+=g.extra}if(g.offset>g.dmax){i.msg="invalid distance too far back",g.mode=we;break}g.mode=$n;case $n:if(F===0)break e;if(o=s-F,g.offset>o){if(o=g.offset-o,o>g.whave&&g.sane){i.msg="invalid distance too far back",g.mode=we;break}o>g.wnext?(o-=g.wnext,A=g.wsize-o):A=g.wnext-o,o>g.length&&(o=g.length),B=g.window}else B=I,A=C-g.offset,o=g.length;o>F&&(o=F),F-=o,g.length-=o;do I[C++]=B[A++];while(--o);g.length===0&&(g.mode=sl);break;case ea:if(F===0)break e;I[C++]=g.length,F--,g.mode=sl;break;case uC:if(g.wrap){for(;U<32;){if(n===0)break e;n--,a|=t[l++]<<U,U+=8}if(s-=F,i.total_out+=s,g.total+=s,s&&(i.adler=g.check=g.flags?eg(g.check,I,s,C-s):uI(g.check,I,s,C-s)),s=F,(g.flags?a:Ia(a))!==g.check){i.msg="incorrect data check",g.mode=we;break}a=0,U=0}g.mode=ga;case ga:if(g.wrap&&g.flags){for(;U<32;){if(n===0)break e;n--,a+=t[l++]<<U,U+=8}if(a!==(g.total&4294967295)){i.msg="incorrect length check",g.mode=we;break}a=0,U=0}g.mode=ta;case ta:W=Z0;break e;case we:W=cF;break e;case WF:return ZF;case b0:default:return Rg}return i.next_out=C,i.avail_out=F,i.next_in=l,i.avail_in=n,g.hold=a,g.bits=U,(g.wsize||s!==i.avail_out&&g.mode<we&&(g.mode<uC||e!==kn))&&SF(i,i.output,i.next_out,s-i.avail_out),d-=i.avail_in,s-=i.avail_out,i.total_in+=d,i.total_out+=s,g.total+=s,g.wrap&&s&&(i.adler=g.check=g.flags?eg(g.check,I,s,i.next_out-s):uI(g.check,I,s,i.next_out-s)),i.data_type=g.bits+(g.last?64:0)+(g.mode===yg?128:0)+(g.mode===dl||g.mode===GC?256:0),(d===0&&s===0||e===kn)&&W===rt&&(W=W0),W},k0=i=>{if(!i||!i.state)return Rg;let e=i.state;return e.window&&(e.window=null),i.state=null,rt},f0=(i,e)=>{if(!i||!i.state)return Rg;const g=i.state;return(g.wrap&2)===0?Rg:(g.head=e,e.done=!1,rt)},E0=(i,e)=>{const g=e.length;let t,I,l;return!i||!i.state||(t=i.state,t.wrap!==0&&t.mode!==Jl)?Rg:t.mode===Jl&&(I=1,I=uI(I,e,g,0),I!==t.check)?cF:(l=SF(i,e,g,g),l?(t.mode=WF,ZF):(t.havedict=1,rt))};var T0=JF,Y0=GF,v0=bF,M0=p0,H0=uF,x0=X0,w0=k0,D0=f0,K0=E0,L0="pako inflate (from Nodeca project)",kg={inflateReset:T0,inflateReset2:Y0,inflateResetKeep:v0,inflateInit:M0,inflateInit2:H0,inflate:x0,inflateEnd:w0,inflateGetHeader:D0,inflateSetDictionary:K0,inflateInfo:L0};function z0(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var _0=z0;const NF=Object.prototype.toString,{Z_NO_FLUSH:O0,Z_FINISH:P0,Z_OK:pI,Z_STREAM_END:pC,Z_NEED_DICT:yC,Z_STREAM_ERROR:j0,Z_DATA_ERROR:Ca,Z_MEM_ERROR:q0}=LI;function _I(i){this.options=IC.assign({chunkSize:1024*64,windowBits:15,to:""},i||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,e.windowBits===0&&(e.windowBits=-15)),e.windowBits>=0&&e.windowBits<16&&!(i&&i.windowBits)&&(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&(e.windowBits&15)===0&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new VF,this.strm.avail_out=0;let g=kg.inflateInit2(this.strm,e.windowBits);if(g!==pI)throw new Error(Ht[g]);if(this.header=new _0,kg.inflateGetHeader(this.strm,this.header),e.dictionary&&(typeof e.dictionary=="string"?e.dictionary=NI.string2buf(e.dictionary):NF.call(e.dictionary)==="[object ArrayBuffer]"&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(g=kg.inflateSetDictionary(this.strm,e.dictionary),g!==pI)))throw new Error(Ht[g])}_I.prototype.push=function(i,e){const g=this.strm,t=this.options.chunkSize,I=this.options.dictionary;let l,C,n;if(this.ended)return!1;for(e===~~e?C=e:C=e===!0?P0:O0,NF.call(i)==="[object ArrayBuffer]"?g.input=new Uint8Array(i):g.input=i,g.next_in=0,g.avail_in=g.input.length;;){for(g.avail_out===0&&(g.output=new Uint8Array(t),g.next_out=0,g.avail_out=t),l=kg.inflate(g,C),l===yC&&I&&(l=kg.inflateSetDictionary(g,I),l===pI?l=kg.inflate(g,C):l===Ca&&(l=yC));g.avail_in>0&&l===pC&&g.state.wrap>0&&i[g.next_in]!==0;)kg.inflateReset(g),l=kg.inflate(g,C);switch(l){case j0:case Ca:case yC:case q0:return this.onEnd(l),this.ended=!0,!1}if(n=g.avail_out,g.next_out&&(g.avail_out===0||l===pC))if(this.options.to==="string"){let F=NI.utf8border(g.output,g.next_out),a=g.next_out-F,U=NI.buf2string(g.output,F);g.next_out=a,g.avail_out=t-a,a&&g.output.set(g.output.subarray(F,F+a),0),this.onData(U)}else this.onData(g.output.length===g.next_out?g.output:g.output.subarray(0,g.next_out));if(!(l===pI&&n===0)){if(l===pC)return l=kg.inflateEnd(this.strm),this.onEnd(l),this.ended=!0,!0;if(g.avail_in===0)break}}return!0};_I.prototype.onData=function(i){this.chunks.push(i)};_I.prototype.onEnd=function(i){i===pI&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=IC.flattenChunks(this.chunks)),this.chunks=[],this.err=i,this.msg=this.strm.msg};function Si(i,e){const g=new _I(e);if(g.push(i),g.err)throw g.msg||Ht[g.err];return g.result}function $0(i,e){return e=e||{},e.raw=!0,Si(i,e)}var eV=_I,gV=Si,tV=$0,IV=Si,lV=LI,CV={Inflate:eV,inflate:gV,inflateRaw:tV,ungzip:IV,constants:lV};const{Inflate:iV,inflate:nV,inflateRaw:Ur,ungzip:dr}=CV;var aV=iV,FV=nV;const XC=[137,80,78,71,13,10,26,10],pF=[];for(let i=0;i<256;i++){let e=i;for(let g=0;g<8;g++)e&1?e=3988292384^e>>>1:e=e>>>1;pF[i]=e}const ia=4294967295;function UV(i,e,g){let t=i;for(let I=0;I<g;I++)t=pF[(t^e[I])&255]^t>>>8;return t}function dV(i,e){return(UV(ia,i,e)^ia)>>>0}var Ct;(function(i){i[i.UNKNOWN=-1]="UNKNOWN",i[i.GREYSCALE=0]="GREYSCALE",i[i.TRUECOLOUR=2]="TRUECOLOUR",i[i.INDEXED_COLOUR=3]="INDEXED_COLOUR",i[i.GREYSCALE_ALPHA=4]="GREYSCALE_ALPHA",i[i.TRUECOLOUR_ALPHA=6]="TRUECOLOUR_ALPHA"})(Ct||(Ct={}));var BI;(function(i){i[i.UNKNOWN=-1]="UNKNOWN",i[i.DEFLATE=0]="DEFLATE"})(BI||(BI={}));var Gl;(function(i){i[i.UNKNOWN=-1]="UNKNOWN",i[i.ADAPTIVE=0]="ADAPTIVE"})(Gl||(Gl={}));var ul;(function(i){i[i.UNKNOWN=-1]="UNKNOWN",i[i.NO_INTERLACE=0]="NO_INTERLACE",i[i.ADAM7=1]="ADAM7"})(ul||(ul={}));const sV=new Uint8Array(0),na="\0",oV=new Uint16Array([255]),AV=new Uint8Array(oV.buffer),BV=AV[0]===255;class QV extends mi{constructor(e,g={}){super(e);const{checkCrc:t=!1}=g;this._checkCrc=t,this._inflator=new aV,this._png={width:-1,height:-1,channels:-1,data:new Uint8Array(0),depth:1,text:{}},this._end=!1,this._hasPalette=!1,this._palette=[],this._compressionMethod=BI.UNKNOWN,this._filterMethod=Gl.UNKNOWN,this._interlaceMethod=ul.UNKNOWN,this._colorType=-1,this.setBigEndian()}decode(){for(this.decodeSignature();!this._end;)this.decodeChunk();return this.decodeImage(),this._png}decodeSignature(){for(let e=0;e<XC.length;e++)if(this.readUint8()!==XC[e])throw new Error(`wrong PNG signature. Byte at ${e} should be ${XC[e]}.`)}decodeChunk(){const e=this.readUint32(),g=this.readChars(4),t=this.offset;switch(g){case"IHDR":this.decodeIHDR();break;case"PLTE":this.decodePLTE(e);break;case"IDAT":this.decodeIDAT(e);break;case"IEND":this._end=!0;break;case"tRNS":this.decodetRNS(e);break;case"iCCP":this.decodeiCCP(e);break;case"tEXt":this.decodetEXt(e);break;case"pHYs":this.decodepHYs();break;default:this.skip(e);break}if(this.offset-t!==e)throw new Error(`Length mismatch while decoding chunk ${g}`);if(this._checkCrc){const I=this.readUint32(),l=e+4,C=dV(new Uint8Array(this.buffer,this.byteOffset+this.offset-l-4,l),l);if(C!==I)throw new Error(`CRC mismatch for chunk ${g}. Expected ${I}, found ${C}`)}else this.skip(4)}decodeIHDR(){const e=this._png;e.width=this.readUint32(),e.height=this.readUint32(),e.depth=WV(this.readUint8());const g=this.readUint8();this._colorType=g;let t;switch(g){case Ct.GREYSCALE:t=1;break;case Ct.TRUECOLOUR:t=3;break;case Ct.INDEXED_COLOUR:t=1;break;case Ct.GREYSCALE_ALPHA:t=2;break;case Ct.TRUECOLOUR_ALPHA:t=4;break;default:throw new Error(`Unknown color type: ${g}`)}if(this._png.channels=t,this._compressionMethod=this.readUint8(),this._compressionMethod!==BI.DEFLATE)throw new Error(`Unsupported compression method: ${this._compressionMethod}`);this._filterMethod=this.readUint8(),this._interlaceMethod=this.readUint8()}decodePLTE(e){if(e%3!==0)throw new RangeError(`PLTE field length must be a multiple of 3. Got ${e}`);const g=e/3;this._hasPalette=!0;const t=[];this._palette=t;for(let I=0;I<g;I++)t.push([this.readUint8(),this.readUint8(),this.readUint8()])}decodeIDAT(e){this._inflator.push(new Uint8Array(this.buffer,this.offset+this.byteOffset,e)),this.skip(e)}decodetRNS(e){if(this._colorType===3){if(e>this._palette.length)throw new Error(`tRNS chunk contains more alpha values than there are palette colors (${e} vs ${this._palette.length})`);let g=0;for(;g<e;g++){const t=this.readByte();this._palette[g].push(t)}for(;g<this._palette.length;g++)this._palette[g].push(255)}}decodeiCCP(e){let g="",t;for(;(t=this.readChar())!==na;)g+=t;const I=this.readUint8();if(I!==BI.DEFLATE)throw new Error(`Unsupported iCCP compression method: ${I}`);const l=this.readBytes(e-g.length-2);this._png.iccEmbeddedProfile={name:g,profile:FV(l)}}decodetEXt(e){let g="",t;for(;(t=this.readChar())!==na;)g+=t;this._png.text[g]=this.readChars(e-g.length-1)}decodepHYs(){const e=this.readUint32(),g=this.readUint32(),t=this.readByte();this._png.resolution={x:e,y:g,unit:t}}decodeImage(){if(this._inflator.err)throw new Error(`Error while decompressing the data: ${this._inflator.err}`);const e=this._inflator.result;if(this._filterMethod!==Gl.ADAPTIVE)throw new Error(`Filter method ${this._filterMethod} not supported`);if(this._interlaceMethod===ul.NO_INTERLACE)this.decodeInterlaceNull(e);else throw new Error(`Interlace method ${this._interlaceMethod} not supported`)}decodeInterlaceNull(e){const g=this._png.height,t=this._png.channels*this._png.depth/8,I=this._png.width*t,l=new Uint8Array(this._png.height*I);let C=sV,n=0,F,a;for(let U=0;U<g;U++){switch(F=e.subarray(n+1,n+1+I),a=l.subarray(U*I,(U+1)*I),e[n]){case 0:VV(F,a,I);break;case 1:rV(F,a,I,t);break;case 2:RV(F,a,C,I);break;case 3:hV(F,a,C,I,t);break;case 4:cV(F,a,C,I,t);break;default:throw new Error(`Unsupported filter: ${e[n]}`)}C=a,n+=I+1}if(this._hasPalette&&(this._png.palette=this._palette),this._png.depth===16){const U=new Uint16Array(l.buffer);if(BV)for(let d=0;d<U.length;d++)U[d]=mV(U[d]);this._png.data=U}else this._png.data=l}}function VV(i,e,g){for(let t=0;t<g;t++)e[t]=i[t]}function rV(i,e,g,t){let I=0;for(;I<t;I++)e[I]=i[I];for(;I<g;I++)e[I]=i[I]+e[I-t]&255}function RV(i,e,g,t){let I=0;if(g.length===0)for(;I<t;I++)e[I]=i[I];else for(;I<t;I++)e[I]=i[I]+g[I]&255}function hV(i,e,g,t,I){let l=0;if(g.length===0){for(;l<I;l++)e[l]=i[l];for(;l<t;l++)e[l]=i[l]+(e[l-I]>>1)&255}else{for(;l<I;l++)e[l]=i[l]+(g[l]>>1)&255;for(;l<t;l++)e[l]=i[l]+(e[l-I]+g[l]>>1)&255}}function cV(i,e,g,t,I){let l=0;if(g.length===0){for(;l<I;l++)e[l]=i[l];for(;l<t;l++)e[l]=i[l]+e[l-I]&255}else{for(;l<I;l++)e[l]=i[l]+g[l]&255;for(;l<t;l++)e[l]=i[l]+ZV(e[l-I],g[l],g[l-I])&255}}function ZV(i,e,g){const t=i+e-g,I=Math.abs(t-i),l=Math.abs(t-e),C=Math.abs(t-g);return I<=l&&I<=C?i:l<=C?e:g}function mV(i){return(i&255)<<8|i>>8&255}function WV(i){if(i!==1&&i!==2&&i!==4&&i!==8&&i!==16)throw new Error(`invalid bit depth: ${i}`);return i}var aa;(function(i){i[i.UNKNOWN=0]="UNKNOWN",i[i.METRE=1]="METRE"})(aa||(aa={}));function bV(i,e){return new QV(i,e).decode()}var JV={name:"@zeainc/gltf-loader",libraryName:"GLTFLoader",author:"Philip Taylor",description:"A plugin to load GLTF files in Zea Engine.",version:"4.0.5",license:"MIT",main:"dist/index.cjs.js",module:"dist/index.esm.js",browser:"dist/index.umd.js",files:["dist/"],keywords:["WebGL","ES6","Zea","GLTF","Draco"],repository:{type:"git",url:"https://github.com/ZeaInc/gltf-loader"},scripts:{build:"rollup -c","build:watch":"rollup -w -c",dev:"npm-run-all --parallel build:watch start:watch",dist:"yarn publish --access=public",generate:"plop",prepare:"yarn run build",release:"standard-version",start:"es-dev-server","start:watch":"es-dev-server --app-index testing-e2e/index.html --open --watch","test:e2e":"percy exec cypress run --browser chrome --headless","test:e2e:watch":"percy exec cypress open"},devDependencies:{"@percy/cypress":"^2.3.2","@rollup/plugin-json":"^4.1.0","@zeainc/zea-engine":"^4",cypress:"^5.4.0","es-dev-server":"^1.57.8",eslint:"^6.5.1","eslint-config-google":"^0.14.0","eslint-config-prettier":"^6.3.0","eslint-plugin-prettier":"^3.1.1","npm-run-all":"^4.1.5",plop:"^2.7.4",prettier:"^2.1.1",rollup:"^2.2.0","rollup-plugin-terser":"^5.3.0","rollup-plugin-web-worker-loader":"^0.9.0","standard-version":"^9.0.0",yargs:"12.0.2"},dependencies:{"fast-png":"^6.1.0","jpeg-js":"^0.4.3"}};const le={BYTE:5120,UNSIGNED_BYTE:5121,SHORT:5122,UNSIGNED_SHORT:5123,INT:5124,UNSIGNED_INT:5125,FLOAT:5126};function yF(i,e,g){let t=new glMatrix.ARRAY_TYPE(g);for(let I=0;I<g;++I)t[I]=i[e+I];return t}function lC(i,e,g){for(const t of Object.keys(i)){const I=i[t];if(I!=null&&typeof a_string!="string"&&(I.initGl!==void 0&&I.initGl(e,g),Array.isArray(I)))for(const l of I)l!=null&&l.initGl!==void 0&&l.initGl(e,g)}}function qe(i,e){if(i===void 0)return[];const g=[];for(const t of i)g.push(XF(t,e));return g}function XF(i,e){const g=new e;return g.fromJson(i),g}function yI(i,e,g=[]){for(let t of Object.keys(i))(!g||g.find(function(I){return I==t})===void 0)&&e[t]!==void 0&&(i[t.replace("^@","")]=e[t])}function kC(i,e,g){return Math.min(Math.max(i,e),g)}function GV(i){return function(e){const g=e.toLowerCase().split(".");if(g.length!=1)return g[g.length-1]}(i)=="glb"}function kF(i){return i.substring(0,i.lastIndexOf("/")+1)}class je{constructor(){this.extensions=void 0,this.extras=void 0}fromJson(e){yI(this,e)}initGl(e,g){lC(this,e,g)}}class Sl extends je{constructor(){super(),this.bufferView=void 0,this.byteOffset=0,this.componentType=void 0,this.normalized=!1,this.count=void 0,this.type=void 0,this.max=void 0,this.min=void 0,this.sparse=void 0,this.name=void 0,this.glBuffer=void 0,this.typedView=void 0,this.filteredView=void 0,this.normalizedFilteredView=void 0,this.normalizedTypedView=void 0}getTypedView(e){if(this.typedView!==void 0)return this.typedView;if(this.bufferView!==void 0){const g=e.bufferViews[this.bufferView],t=e.buffers[g.buffer],I=this.byteOffset+g.byteOffset,l=this.getComponentSize(this.componentType);let C=this.getComponentCount(this.type),n=0;switch(g.byteStride!==0?l!==0?n=g.byteStride/l*(this.count-1)+C:console.warn("Invalid component type in accessor '"+(this.name?this.name:"")+"'"):n=this.count*C,n*l>t.buffer.byteLength-I&&(n=(t.buffer.byteLength-I)/l,console.warn("Count in accessor '"+(this.name?this.name:"")+"' is too large.")),this.componentType){case le.BYTE:this.typedView=new Int8Array(t.buffer,I,n);break;case le.UNSIGNED_BYTE:this.typedView=new Uint8Array(t.buffer,I,n);break;case le.SHORT:this.typedView=new Int16Array(t.buffer,I,n);break;case le.UNSIGNED_SHORT:this.typedView=new Uint16Array(t.buffer,I,n);break;case le.UNSIGNED_INT:this.typedView=new Uint32Array(t.buffer,I,n);break;case le.FLOAT:this.typedView=new Float32Array(t.buffer,I,n)}}return this.typedView===void 0?console.warn("Failed to convert buffer view to typed view!: "+this.bufferView):this.sparse!==void 0&&this.applySparse(e,this.typedView),this.typedView}getNormalizedTypedView(e){if(this.normalizedTypedView!==void 0)return this.normalizedTypedView;const g=this.getTypedView(e);return this.normalizedTypedView=this.normalized?Sl.dequantize(g,this.componentType):g,this.normalizedTypedView}getDeinterlacedView(e){if(this.filteredView!==void 0)return this.filteredView;if(this.bufferView!==void 0){const g=e.bufferViews[this.bufferView],t=e.buffers[g.buffer],I=this.byteOffset+g.byteOffset,l=this.getComponentSize(this.componentType),C=this.getComponentCount(this.type),n=this.count*C;let F=g.byteStride!==0?g.byteStride:C*l;const a=t.buffer.byteLength-I;let U=new DataView(t.buffer,I,Math.min(a,this.count*F)),d=U.getFloat32.bind(U);switch(this.componentType){case le.BYTE:this.filteredView=new Int8Array(n),d=U.getInt8.bind(U);break;case le.UNSIGNED_BYTE:this.filteredView=new Uint8Array(n),d=U.getUint8.bind(U);break;case le.SHORT:this.filteredView=new Int16Array(n),d=U.getInt16.bind(U);break;case le.UNSIGNED_SHORT:this.filteredView=new Uint16Array(n),d=U.getUint16.bind(U);break;case le.UNSIGNED_INT:this.filteredView=new Uint32Array(n),d=U.getUint32.bind(U);break;case le.FLOAT:this.filteredView=new Float32Array(n),d=U.getFloat32.bind(U)}for(let s=0;s<n;++s){let o=Math.floor(s/C)*F+s%C*l;this.filteredView[s]=d(o,!0)}}return this.filteredView===void 0?console.warn("Failed to convert buffer view to filtered view!: "+this.bufferView):this.sparse!==void 0&&this.applySparse(e,this.filteredView),this.filteredView}getNormalizedDeinterlacedView(e){if(this.normalizedFilteredView!==void 0)return this.normalizedFilteredView;const g=this.getDeinterlacedView(e);return this.normalizedFilteredView=this.normalized?Sl.dequantize(g,this.componentType):g,this.normalizedFilteredView}applySparse(e,g){const t=e.bufferViews[this.sparse.indices.bufferView],I=e.buffers[t.buffer],l=this.sparse.indices.byteOffset+t.byteOffset,C=this.getComponentSize(this.sparse.indices.componentType);let n=1;t.byteStride!==0&&(n=t.byteStride/C);const F=this.sparse.count*n;let a;switch(this.sparse.indices.componentType){case le.UNSIGNED_BYTE:a=new Uint8Array(I.buffer,l,F);break;case le.UNSIGNED_SHORT:a=new Uint16Array(I.buffer,l,F);break;case le.UNSIGNED_INT:a=new Uint32Array(I.buffer,l,F)}const U=e.bufferViews[this.sparse.values.bufferView],d=e.buffers[U.buffer],s=this.sparse.values.byteOffset+U.byteOffset,o=this.getComponentSize(this.componentType);let A=this.getComponentCount(this.type);U.byteStride!==0&&(A=U.byteStride/o);const B=this.sparse.count*A;let Q;switch(this.componentType){case le.BYTE:Q=new Int8Array(d.buffer,s,B);break;case le.UNSIGNED_BYTE:Q=new Uint8Array(d.buffer,s,B);break;case le.SHORT:Q=new Int16Array(d.buffer,s,B);break;case le.UNSIGNED_SHORT:Q=new Uint16Array(d.buffer,s,B);break;case le.UNSIGNED_INT:Q=new Uint32Array(d.buffer,s,B);break;case le.FLOAT:Q=new Float32Array(d.buffer,s,B)}for(let r=0;r<this.sparse.count;++r)for(let R=0;R<A;++R)g[a[r]*A+R]=Q[r*A+R]}static dequantize(e,g){switch(g){case le.BYTE:return new Float32Array(e).map(t=>Math.max(t/127,-1));case le.UNSIGNED_BYTE:return new Float32Array(e).map(t=>t/255);case le.SHORT:return new Float32Array(e).map(t=>Math.max(t/32767,-1));case le.UNSIGNED_SHORT:return new Float32Array(e).map(t=>t/65535);default:return e}}getComponentCount(e){return uV.get(e)}getComponentSize(e){switch(e){case le.BYTE:case le.UNSIGNED_BYTE:return 1;case le.SHORT:case le.UNSIGNED_SHORT:return 2;case le.UNSIGNED_INT:case le.FLOAT:return 4;default:return 0}}destroy(){this.glBuffer!==void 0&&WebGl.context.deleteBuffer(this.glBuffer),this.glBuffer=void 0}}const uV=new Map([["SCALAR",1],["VEC2",2],["VEC3",3],["VEC4",4],["MAT2",4],["MAT3",9],["MAT4",16]]);class fF extends je{constructor(){super(),this.uri=void 0,this.byteLength=void 0,this.name=void 0,this.buffer=void 0}load(e,g){if(this.buffer!==void 0)return void console.error("buffer has already been loaded");const t=this;return new Promise(function(I){t.setBufferFromFiles(g,I)||t.setBufferFromUri(e,I)||(console.error("Was not able to resolve buffer with uri '%s'",t.uri),I())})}setBufferFromUri(e,g){if(this.uri===void 0)return!1;const t=this;return this.uri.startsWith("data:application")?ee.loadFile("binary",this.uri).then(function(I){t.buffer=I,g()}):ee.loadFile("binary",kF(e.path)+this.uri).then(function(I){t.buffer=I,g()}),!0}setBufferFromFiles(e,g){if(this.uri===void 0||e===void 0)return!1;const t=e.find(function(C){if(C.name===this.uri||C.fullPath===this.uri)return!0},this);if(t===void 0)return!1;const I=this,l=new FileReader;return l.onloadend=function(C){I.buffer=C.target.result,g()},l.readAsArrayBuffer(t),!0}}class EF extends je{constructor(){super(),this.buffer=void 0,this.byteOffset=0,this.byteLength=void 0,this.byteStride=0,this.target=void 0,this.name=void 0}}class Ni extends je{constructor(e="perspective",g=.01,t=1/0,I=45*Math.PI/180,l,C=1,n=1,F,a){super(),this.type=e,this.znear=g,this.zfar=t,this.yfov=I,this.xmag=C,this.ymag=n,this.aspectRatio=l,this.name=F,this.node=a}initGl(e,g){super.initGl(e,g);let t;for(let I=0;I<e.nodes.length;I++)if(t=e.nodes[I].camera,t!==void 0&&e.cameras[t]===this){this.node=I;break}this.node===void 0&&t!==void 0&&console.error("Invalid node for camera "+t)}fromJson(e){this.name=name,e.perspective!==void 0?(this.type="perspective",yI(this,e.perspective)):e.orthographic!==void 0&&(this.type="orthographic",yI(this,e.orthographic))}sortPrimitivesByDepth(e,g){for(const t of g){const I=mat4.create();mat4.multiply(I,this.getViewMatrix(e),t.node.worldTransform);const l=vec3.transformMat4(vec3.create(),vec3.clone(t.primitive.centroid),I);t.depth=l[2]}return g.filter(t=>t.depth<=0).sort((t,I)=>t.depth-I.depth)}getProjectionMatrix(){const e=mat4.create();return this.type==="perspective"?mat4.perspective(e,this.yfov,this.aspectRatio,this.znear,this.zfar):this.type==="orthographic"&&(e[0]=1/this.xmag,e[5]=1/this.ymag,e[10]=2/(this.znear-this.zfar),e[14]=(this.zfar+this.znear)/(this.znear-this.zfar)),e}getViewMatrix(e){const g=mat4.create(),t=this.getPosition(e),I=this.getTarget(e);return mat4.lookAt(g,t,I,vec3.fromValues(0,1,0)),g}getTarget(e){const g=vec3.create(),t=this.getPosition(e),I=this.getLookDirection(e);return vec3.add(g,I,t),g}getPosition(e){const g=vec3.create(),t=this.getNode(e);return mat4.getTranslation(g,t.worldTransform),g}getLookDirection(e){const g=vec3.create(),t=this.getRotation(e);return vec3.transformQuat(g,vec3.fromValues(0,0,-1),t),g}getRotation(e){const g=quat.create(),t=this.getNode(e);return mat4.getRotation(g,t.worldTransform),g}clone(){return new Ni(this.type,this.znear,this.zfar,this.yfov,this.aspectRatio,this.xmag,this.ymag,this.name,this.node)}getNode(e){return e.nodes[this.node]}getTransformMatrix(e){const g=this.getNode(e);return g!==void 0&&g.worldTransform!==void 0?g.worldTransform:mat4.create()}getDescription(e){const g={type:this.type};this.name!==void 0&&(g.name=this.name),this.type==="perspective"?(g.perspective={},this.aspectRatio!==void 0&&(g.perspective.aspectRatio=this.aspectRatio),g.perspective.yfov=this.yfov,this.zfar!=1/0&&(g.perspective.zfar=this.zfar),g.perspective.znear=this.znear):this.type==="orthographic"&&(g.orthographic={},g.orthographic.xmag=this.xmag,g.orthographic.ymag=this.ymag,g.orthographic.zfar=this.zfar,g.orthographic.znear=this.znear);const t=this.getTransformMatrix(e),I={camera:0,matrix:[t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15]]};return this.nodeIndex!==void 0&&e.nodes[this.nodeIndex].name!==void 0&&(I.name=e.nodes[this.nodeIndex].name),{asset:{generator:"gltf-sample-viewer",version:"2.0"},cameras:[g],nodes:[I]}}}class TF{static async readAsArrayBuffer(e){return new Promise((g,t)=>{const I=new FileReader;I.onload=()=>g(I.result),I.onerror=t,I.readAsArrayBuffer(e)})}static async readAsText(e){return new Promise((g,t)=>{const I=new FileReader;I.onload=()=>g(I.result),I.onerror=t,I.readAsText(e)})}static async readAsDataURL(e){return new Promise((g,t)=>{const I=new FileReader;I.onload=()=>g(I.result),I.onerror=t,I.readAsDataURL(e)})}}const FI="image/jpeg",ol="image/png",Fa="image/ktx2",SV="image/texture";class QI extends je{constructor(e,g=le.TEXTURE_2D,t=0,I,l,C=FI,n){super(),this.uri=e,this.bufferView=I,this.mimeType=C,this.image=n,this.name=l,this.type=g,this.miplevel=t}fromJson(e){super.fromJson(e)}resolveRelativePath(e){(typeof this.uri=="string"||this.uri instanceof String)&&(this.uri.startsWith("./")&&(this.uri=this.uri.substr(2)),this.uri=e+this.uri)}async load(e,g){this.image===void 0?await this.setImageFromBufferView(e)||await this.setImageFromFiles(g,e)||await this.setImageFromUri(e)||console.error("Was not able to resolve image with uri '%s'",this.uri):this.mimeType!==SV&&console.error("image has already been loaded")}static loadHTMLImage(e){return new Promise((g,t)=>{const I=new qg(this.name);I.load(e).then(()=>{g(I)},()=>{t()})})}async setImageFromUri(e){return this.uri!==void 0&&(typeof Image=="undefined"||this.mimeType!==FI&&this.mimeType!==ol?(console.error("Unsupported image type "+this.mimeType),!1):(this.zeaImage=await QI.loadHTMLImage(this.uri).catch(g=>{console.error(g)}),!0))}async setImageFromBufferView(e){const g=e.bufferViews[this.bufferView];if(g===void 0)return!1;const t=e.buffers[g.buffer].buffer,I=new Uint8Array(t,g.byteOffset,g.byteLength);if(this.mimeType===Fa)e.ktxDecoder!==void 0?this.image=await e.ktxDecoder.loadKtxFromBuffer(I):console.warn("Loading of ktx images failed: KtxDecoder not initalized");else if(typeof Image=="undefined"||this.mimeType!==FI&&this.mimeType!==ol)if(this.mimeType===FI)this.image=WB.decode(I,{useTArray:!0});else{if(this.mimeType!==ol)return console.error("Unsupported image type "+this.mimeType),!1;this.image=bV(I)}else{const l=new Blob([I],{type:this.mimeType}),C=URL.createObjectURL(l);this.image=await QI.loadHTMLImage(C).catch(()=>{console.error("Could not load image from buffer view")})}return!0}async setImageFromFiles(e,g){if(this.uri===void 0||e===void 0)return!1;let t=e.find(function(I){const l=this.uri.split("\\").pop().split("/").pop();if(I.name===l)return!0},this);if(t===void 0)return!1;if(this.mimeType===Fa)if(g.ktxDecoder!==void 0){const I=new Uint8Array(await t.arrayBuffer());this.image=await g.ktxDecoder.loadKtxFromBuffer(I)}else console.warn("Loading of ktx images failed: KtxDecoder not initalized");else{if(typeof Image=="undefined"||this.mimeType!==FI&&this.mimeType!==ol)return console.error("Unsupported image type "+this.mimeType),!1;{const I=await TF.readAsDataURL(t).catch(()=>{console.error("Could not load image with FileReader")});this.image=await QI.loadHTMLImage(I).catch(()=>{console.error("Could not create image from FileReader image data")})}}return!0}}class NV extends je{constructor(e="directional",g=[1,1,1],t=1,I=0,l=Math.PI/4,C=-1,n,F){super(),this.type=e,this.color=g,this.intensity=t,this.innerConeAngle=I,this.outerConeAngle=l,this.range=C,this.name=n,this.node=F,this.direction=void 0}initGl(e,g){super.initGl(e,g);for(let t=0;t<e.nodes.length;t++){const I=e.nodes[t].extensions;if(I===void 0)continue;const l=I.KHR_lights_punctual;if(l===void 0)continue;const C=l.light;if(e.lights[C]===this){this.node=t;break}}}fromJson(e){super.fromJson(e),e.spot!==void 0&&yI(this,e.spot)}toUniform(e){const g=new XV;if(this.node!==void 0){const C=e.nodes[this.node].worldTransform;var t=vec3.fromValues(1,1,1);mat4.getScaling(t,C);const n=mat4.create();for(const a of[0,1,2])n[a]=C[a]/t[0],n[a+4]=C[a+4]/t[1],n[a+8]=C[a+8]/t[2];var I=quat.create();mat4.getRotation(I,n),quat.normalize(I,I);const F=vec3.fromValues(0,0,-1);vec3.transformQuat(g.direction,F,I);var l=vec3.fromValues(0,0,0);mat4.getTranslation(l,C),g.position=l}switch(this.direction!==void 0&&(g.direction=this.direction),g.range=this.range,g.color=this.color,g.intensity=this.intensity,g.innerConeCos=Math.cos(this.innerConeAngle),g.outerConeCos=Math.cos(this.outerConeAngle),this.type){case"spot":g.type=yV;break;case"point":g.type=pV;break;case"directional":default:g.type=YF}return g}}const YF=0,pV=1,yV=2;class XV extends class{}{constructor(){super();const e=vec3.fromValues(-.7399,-.6428,-.1983);this.direction=e,this.range=-1,this.color=[1,1,1],this.intensity=1,this.position=[0,0,0],this.innerConeCos=0,this.outerConeCos=Math.PI/4,this.type=YF,this.padding1=0,this.padding2=0}}class kV extends je{constructor(){super(),this.rotation=[0,0,0,1],this.brightnessFactor=1,this.brightnessOffset=0,this.specularEnvironmentTexture=void 0,this.diffuseEnvironmentTexture=void 0,this.sheenEnvironmentTexture=void 0,this.levelCount=1}fromJson(e){super.fromJson(e),e.extensions!==void 0&&this.fromJsonExtensions(e.extensions)}fromJsonExtensions(e){e.KHR_materials_sheen!==void 0&&(this.sheenEnvironmentTexture=e.KHR_materials_sheen.sheenEnvironmentTexture)}initGl(e,g){if(this.diffuseEnvironmentTexture!==void 0&&(e.textures[this.diffuseEnvironmentTexture].type=le.TEXTURE_CUBE_MAP),this.specularEnvironmentTexture!==void 0){const t=e.textures[this.specularEnvironmentTexture];t.type=le.TEXTURE_CUBE_MAP;const I=e.images[t.source];this.levelCount=I.image.levelCount}if(this.sheenEnvironmentTexture!==void 0){const t=e.textures[this.sheenEnvironmentTexture];t.type=le.TEXTURE_CUBE_MAP;const I=e.images[t.source];this.levelCount!==I.image.levelCount&&console.error("Specular and sheen do not have same level count")}}}class fV extends je{constructor(e,g,t=le.TEXTURE_2D){super(),this.sampler=e,this.source=g,this.glTexture=void 0,this.type=t,this.initialized=!1,this.mipLevelCount=0}initGl(e,g){this.sampler===void 0&&(this.sampler=e.samplers.length-1),lC(this,e,g)}fromJson(e){super.fromJson(e),e.extensions!==void 0&&e.extensions.KHR_texture_basisu!==void 0&&e.extensions.KHR_texture_basisu.source!==void 0&&(this.source=e.extensions.KHR_texture_basisu.source)}destroy(){}}class ig{constructor(e,g=0,t=!0,I="",l=!0){this.index=e,this.texCoord=g,this.linear=t,this.samplerName=I,this.strength=1,this.scale=1,this.generateMips=l,this.extensions=void 0}initGl(e,g){lC(this,e,g)}fromJson(e){yI(this,e)}}class Nl extends je{constructor(){super(),this.name=void 0,this.pbrMetallicRoughness=void 0,this.normalTexture=void 0,this.occlusionTexture=void 0,this.emissiveTexture=void 0,this.emissiveFactor=[0,0,0],this.alphaMode="OPAQUE",this.alphaCutoff=.5,this.doubleSided=!1,this.hasClearcoat=!1,this.hasSheen=!1,this.hasTransmission=!1,this.hasIOR=!1,this.hasVolume=!1,this.type="unlit",this.textures=[],this.properties=new Map,this.defines=[]}static createDefault(){const e=new Nl;e.type="MR",e.name="Default Material",e.defines.push("MATERIAL_METALLICROUGHNESS 1");const g=new Be(1,1,1,1);return e.properties.set("u_BaseColorFactor",g),e.properties.set("u_MetallicFactor",1),e.properties.set("u_RoughnessFactor",1),e}getShaderIdentifier(){switch(this.type){default:case"SG":case"MR":return"pbr.frag"}}getDefines(e){const g=Array.from(this.defines);return this.hasClearcoat&&e.enabledExtensions.KHR_materials_clearcoat&&g.push("MATERIAL_CLEARCOAT 1"),this.hasSheen&&e.enabledExtensions.KHR_materials_sheen&&g.push("MATERIAL_SHEEN 1"),this.hasTransmission&&e.enabledExtensions.KHR_materials_transmission&&g.push("MATERIAL_TRANSMISSION 1"),this.hasVolume&&e.enabledExtensions.KHR_materials_volume&&g.push("MATERIAL_VOLUME 1"),this.hasIOR&&e.enabledExtensions.KHR_materials_ior&&g.push("MATERIAL_IOR 1"),this.hasSpecular&&e.enabledExtensions.KHR_materials_specular&&g.push("MATERIAL_SPECULAR 1"),g}getProperties(){return this.properties}getTextures(){return this.textures}parseTextureInfoExtensions(e,g){if(e.extensions!==void 0&&e.extensions.KHR_texture_transform!==void 0){const t=e.extensions.KHR_texture_transform;t.texCoord!==void 0&&(e.texCoord=t.texCoord);let I=new ng,l=new ng,C=new ng;if(t.rotation!==void 0){const F=Math.sin(t.rotation),a=Math.cos(t.rotation);I=new ng([a,F,0,-F,a,0,0,0,1])}t.scale!==void 0&&(l=new ng([t.scale[0],0,0,0,t.scale[1],0,0,0,1])),t.offset!==void 0&&(C=new ng([1,0,t.offset[0],0,1,t.offset[1],0,0,1]));const n=I.multiply(l);n.multiplyInPlace(C),this.defines.push("HAS_"+g.toUpperCase()+"_UV_TRANSFORM 1"),this.properties.set("u_"+g+"UVTransform",n)}}initGl(e,g){this.zeaMaterial=new Ve(this.name,"StandardSurfaceShader");const t=(I,l)=>{const C=e.textures[I.index],n=e.samplers[C.sampler],F=e.images[C.source];F.zeaImage.wrapS=n.wrapS,F.zeaImage.wrapT=n.wrapT,l.setImage(F.zeaImage)};if(this.normalTexture!==void 0&&t(this.normalTexture,this.zeaMaterial.getParameter("Normal")),this.occlusionTexture!==void 0&&t(this.occlusionTexture,this.zeaMaterial.getParameter("AmbientOcclusion")),this.properties.set("u_EmissiveFactor",this.emissiveFactor),this.emissiveTexture!==void 0&&t(this.emissiveTexture,this.zeaMaterial.getParameter("EmissiveStrength")),this.baseColorTexture!==void 0&&t(this.baseColorTexture,this.zeaMaterial.getParameter("BaseColor")),this.metallicRoughnessTexture!==void 0&&t(this.metallicRoughnessTexture,this.zeaMaterial.getParameter("Metallic")),this.diffuseTexture!==void 0&&t(this.diffuseTexture,this.zeaMaterial.getParameter("BaseColor")),this.specularGlossinessTexture!==void 0&&t(this.specularGlossinessTexture,this.zeaMaterial.getParameter("Reflectance")),this.alphaMode==="MASK"?(this.defines.push("ALPHAMODE_MASK 1"),this.properties.set("u_AlphaCutoff",this.alphaCutoff)):this.alphaMode==="OPAQUE"&&this.defines.push("ALPHAMODE_OPAQUE 1"),this.pbrMetallicRoughness!==void 0&&this.type!=="SG"){this.defines.push("MATERIAL_METALLICROUGHNESS 1");let I=new E(1,1,1,1),l=1,C=1;this.pbrMetallicRoughness.baseColorFactor!==void 0&&I.set(...this.pbrMetallicRoughness.baseColorFactor),this.pbrMetallicRoughness.metallicFactor!==void 0&&(l=this.pbrMetallicRoughness.metallicFactor),this.pbrMetallicRoughness.roughnessFactor!==void 0&&(C=this.pbrMetallicRoughness.roughnessFactor),this.properties.set("u_BaseColorFactor",I),this.properties.set("u_MetallicFactor",l),this.properties.set("u_RoughnessFactor",C),this.zeaMaterial.getParameter("BaseColor").setValue(I),this.zeaMaterial.getParameter("Metallic").setValue(l),this.zeaMaterial.getParameter("Roughness").setValue(C)}if(this.extensions!==void 0&&(this.extensions.KHR_materials_unlit!==void 0&&this.defines.push("MATERIAL_UNLIT 1"),this.extensions.KHR_materials_pbrSpecularGlossiness!==void 0)){this.defines.push("MATERIAL_SPECULARGLOSSINESS 1");let I=new E(1,1,1,1),l=new b(1,1,1),C=1;this.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor!==void 0&&(I=this.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor),this.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor!==void 0&&(l=this.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor),this.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor!==void 0&&(C=this.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor),this.properties.set("u_DiffuseFactor",I),this.properties.set("u_SpecularFactor",l),this.properties.set("u_GlossinessFactor",C)}lC(this,e,g)}fromJson(e){if(super.fromJson(e),e.emissiveFactor!==void 0&&(this.emissiveFactor=e.emissiveFactor),e.normalTexture!==void 0){const g=new ig;g.fromJson(e.normalTexture),this.normalTexture=g}if(e.occlusionTexture!==void 0){const g=new ig;g.fromJson(e.occlusionTexture),this.occlusionTexture=g}if(e.emissiveTexture!==void 0){const g=new ig(void 0,0,!1);g.fromJson(e.emissiveTexture),this.emissiveTexture=g}e.extensions!==void 0&&this.fromJsonMaterialExtensions(e.extensions),e.pbrMetallicRoughness!==void 0&&this.type!=="SG"&&(this.type="MR",this.fromJsonMetallicRoughness(e.pbrMetallicRoughness))}fromJsonMaterialExtensions(e){e.KHR_materials_pbrSpecularGlossiness!==void 0&&(this.type="SG",this.fromJsonSpecularGlossiness(e.KHR_materials_pbrSpecularGlossiness)),e.KHR_materials_unlit!==void 0&&(this.type="unlit"),e.KHR_materials_clearcoat!==void 0&&this.fromJsonClearcoat(e.KHR_materials_clearcoat),e.KHR_materials_sheen!==void 0&&this.fromJsonSheen(e.KHR_materials_sheen),e.KHR_materials_transmission!==void 0&&this.fromJsonTransmission(e.KHR_materials_transmission),e.KHR_materials_specular!==void 0&&this.fromJsonSpecular(e.KHR_materials_specular),e.KHR_materials_volume!==void 0&&this.fromJsonVolume(e.KHR_materials_volume)}fromJsonMetallicRoughness(e){if(e.baseColorTexture!==void 0){const g=new ig(void 0,0,!1);g.fromJson(e.baseColorTexture),this.baseColorTexture=g}if(e.metallicRoughnessTexture!==void 0){const g=new ig;g.fromJson(e.metallicRoughnessTexture),this.metallicRoughnessTexture=g}}fromJsonSpecularGlossiness(e){if(e.diffuseTexture!==void 0){const g=new ig(void 0,0,!1);g.fromJson(e.diffuseTexture),this.diffuseTexture=g}if(e.specularGlossinessTexture!==void 0){const g=new ig(void 0,0,!1);g.fromJson(e.specularGlossinessTexture),this.specularGlossinessTexture=g}}fromJsonClearcoat(e){if(e.clearcoatTexture!==void 0){const g=new ig;g.fromJson(e.clearcoatTexture),this.clearcoatTexture=g}if(e.clearcoatRoughnessTexture!==void 0){const g=new ig;g.fromJson(e.clearcoatRoughnessTexture),this.clearcoatRoughnessTexture=g}if(e.clearcoatNormalTexture!==void 0){const g=new ig;g.fromJson(e.clearcoatNormalTexture),this.clearcoatNormalTexture=g}}fromJsonSheen(e){if(e.sheenColorTexture!==void 0){const g=new ig(void 0,0,!1);g.fromJson(e.sheenColorTexture),this.sheenColorTexture=g}if(e.sheenRoughnessTexture!==void 0){const g=new ig;g.fromJson(e.sheenRoughnessTexture),this.sheenRoughnessTexture=g}}fromJsonTransmission(e){if(e.transmissionTexture!==void 0){const g=new ig;g.fromJson(e.transmissionTexture),this.transmissionTexture=g}}fromJsonSpecular(e){if(e.specularTexture!==void 0){const g=new ig;g.fromJson(e.specularTexture),this.specularTexture=g}if(e.specularTexture!==void 0){const g=new ig;g.fromJson(e.specularTexture),this.specularTexture=g}}fromJsonVolume(e){if(e.thicknessTexture!==void 0){const g=new ig;g.fromJson(e.thicknessTexture),this.thicknessTexture=g}}}class Eg{constructor(e){if(!Eg.instance&&e===void 0){if(DracoDecoderModule===void 0)return void console.error("Failed to initalize DracoDecoder: draco library undefined");e=DracoDecoderModule}return Eg.instance||(Eg.instance=this,this.module=null,this.initializingPromise=new Promise(g=>{let t={};t.onModuleLoaded=I=>{this.module=I,g()},e(t)})),Eg.instance}async ready(){await this.initializingPromise,Object.freeze(Eg.instance)}}class EV extends je{constructor(){super(),this.attributes=[],this.targets=[],this.indices=void 0,this.material=void 0,this.mode="TRIANGLES",this.glAttributes=[],this.defines=[],this.skip=!0,this.hasWeights=!1,this.hasJoints=!1,this.hasNormals=!1,this.hasTangents=!1,this.hasTexcoord=!1,this.hasColor=!1,this.centroid=void 0}initGl(e,g){if(this.material===void 0&&(this.material=e.materials.length-1),this.extensions!==void 0&&this.extensions.KHR_draco_mesh_compression!==void 0){const F=new Eg;if(F!==void 0&&Object.isFrozen(F)){let a=this.decodeDracoBufferToIntermediate(this.extensions.KHR_draco_mesh_compression,e);this.copyDataFromDecodedGeometry(e,a,this.attributes)}else console.warn("Failed to load draco compressed mesh: DracoDecoder not initialized")}for(const F of Object.keys(this.attributes)){const a=this.attributes[F];switch(F){case"POSITION":this.skip=!1,this.glAttributes.push({attribute:F,name:"a_Position",accessor:a});break;case"NORMAL":this.hasNormals=!0,this.defines.push("HAS_NORMALS 1"),this.glAttributes.push({attribute:F,name:"a_Normal",accessor:a});break;case"TANGENT":this.hasTangents=!0,this.defines.push("HAS_TANGENTS 1"),this.glAttributes.push({attribute:F,name:"a_Tangent",accessor:a});break;case"TEXCOORD_0":this.hasTexcoord=!0,this.defines.push("HAS_UV_SET1 1"),this.glAttributes.push({attribute:F,name:"a_UV1",accessor:a});break;case"TEXCOORD_1":this.hasTexcoord=!0,this.defines.push("HAS_UV_SET2 1"),this.glAttributes.push({attribute:F,name:"a_UV2",accessor:a});break;case"COLOR_0":this.hasColor=!0;const U=e.accessors[a];this.defines.push("HAS_VERTEX_COLOR_"+U.type+" 1"),this.glAttributes.push({attribute:F,name:"a_Color",accessor:a});break;case"JOINTS_0":this.hasJoints=!0,this.defines.push("HAS_JOINT_SET1 1"),this.glAttributes.push({attribute:F,name:"a_Joint1",accessor:a});break;case"WEIGHTS_0":this.hasWeights=!0,this.defines.push("HAS_WEIGHT_SET1 1"),this.glAttributes.push({attribute:F,name:"a_Weight1",accessor:a});break;case"JOINTS_1":this.hasJoints=!0,this.defines.push("HAS_JOINT_SET2 1"),this.glAttributes.push({attribute:F,name:"a_Joint2",accessor:a});break;case"WEIGHTS_1":this.hasWeights=!0,this.defines.push("HAS_WEIGHT_SET2 1"),this.glAttributes.push({attribute:F,name:"a_Weight2",accessor:a});break;default:console.log("Unknown attribute: "+F)}}const t=e.materials[this.material];let I=t.zeaMaterial;const l=e.accessors[this.attributes.POSITION],C={geomBuffers:{numVertices:l.count,attrBuffers:{}},bbox:new gg(new b(...l.min),new b(...l.max))};if(this.indices!==void 0){const F=e.accessors[this.indices].getTypedView(e);C.geomBuffers.indices=F}for(const F of Object.keys(this.attributes)){const a=this.attributes[F],U=e.accessors[a],d=e.bufferViews[U.bufferView],s=U.getComponentSize(U.componentType),o=U.getComponentCount(U.type);let A;switch(A=d.byteStride==0||d.byteStride==s*o?U.getTypedView(e):U.getDeinterlacedView(e),F){case"POSITION":C.geomBuffers.attrBuffers.positions={dataType:"Vec3",normalized:!1,values:A};break;case"NORMAL":C.geomBuffers.attrBuffers.normals={dataType:"Vec3",normalized:!0,values:A};break;case"TEXCOORD_0":C.geomBuffers.attrBuffers.texCoords={dataType:"Vec2",normalized:!1,values:A};break;case"COLOR_0":let B=!0;for(let Q=1;Q<A.length/o;Q++)for(let r=0;r<o;r++)A[r]!=A[Q*o+r]&&(B=!1);if(B){const Q=`Material [R=${A[0]}, G=${A[1]}, B=${A[2]}]`;if(e.materialsMap[Q])I=e.materialsMap[Q];else{const r=new E;s==1?r.set(A[0]/256,A[1]/256,A[2]/256,o==4?A[3]/256:1):s==4&&r.set(A[0],A[1],A[2],o==4?A[3]:1),I=I.clone(),I.getParameter("BaseColor").setValue(r),e.materialsMap[Q]=I}}else C.geomBuffers.attrBuffers.vertexColors={dataType:"Color",normalized:!1,values:A}}}let n;switch(this.mode){case"POINTS":case 0:{C.name="GLTFPoints",n=new ct(C);const F=I.getParameter("BaseColor").getValue(),a=`PointsMaterial [${F.r.toFixed(2)}, ${F.g.toFixed(2)}, ${F.b.toFixed(2)}]`;e.materialsMap[a]?I=e.materialsMap[a]:(I=I.clone(),I.setShaderName("PointsShader"),e.materialsMap[a]=I);break}case"LINES":case 1:{C.name="GLTFLines",n=new Gg(C);const F=I.getParameter("BaseColor").getValue(),a=`LinesMaterial [R=${F.r.toFixed(2)}, G=${F.g.toFixed(2)}, B=${F.b.toFixed(2)}]`;e.materialsMap[a]?I=e.materialsMap[a]:(I=I.clone(),I.setShaderName("LinesShader"),e.materialsMap[a]=I);break}case"LINE_LOOP":case 2:{if(C.name="GLTFLineLoop",C.geomBuffers.indices==null){const U=new Uint32Array(2*C.geomBuffers.numVertices);for(let d=0;d<C.geomBuffers.numVertices;d++)U[2*d]=d,U[2*d+1]=(d+1)%U.length;C.geomBuffers.indices=U}else{const U=C.geomBuffers.indices,d=new Uint32Array(2*U.length);d[0]=U[0],d[1]=U[1];let s=1;for(let o=2;o<=U.length;o++)d[2*s]=U[o-1],d[2*s+1]=U[o%U.length],s++;d[0]==1209&&console.log(C.name,C.geomBuffers.indices.toString()),C.geomBuffers.indices=d}n=new Gg(C);const F=I.getParameter("BaseColor").getValue(),a=`LinesMaterial [R=${F.r.toFixed(2)}, G=${F.g.toFixed(2)}, B=${F.b.toFixed(2)}]`;e.materialsMap[a]?I=e.materialsMap[a]:(I=I.clone(),I.setShaderName("LinesShader"),e.materialsMap[a]=I);break}case"LINE_STRIP":case 3:{if(C.name="GLTFLineStrip",C.geomBuffers.indices==null){const U=new Uint32Array(2*(C.geomBuffers.numVertices-1));for(let d=0;d<C.geomBuffers.numVertices-1;d++)U[2*d]=d,U[2*d+1]=d+1;C.geomBuffers.indices=U}else{const U=C.geomBuffers.indices,d=new Uint32Array(2*(U.length-1));d[0]=U[0],d[1]=U[1];let s=1;for(let o=2;o<U.length;o++)d[2*s]=U[o-1],d[2*s+1]=U[o],s++;d[0]==1209&&console.log(C.name,C.geomBuffers.indices.toString()),C.geomBuffers.indices=d}n=new Gg(C);const F=I.getParameter("BaseColor").getValue(),a=`LinesMaterial [R=${F.r.toFixed(2)}, G=${F.g.toFixed(2)}, B=${F.b.toFixed(2)}]`;e.materialsMap[a]?I=e.materialsMap[a]:(I=I.clone(),I.setShaderName("LinesShader"),e.materialsMap[a]=I);break}case"TRIANGLES":case 4:if(C.name="GLTFMesh",C.geomBuffers.indices==null){const F=new Uint32Array(C.geomBuffers.numVertices);for(let a=0;a<C.geomBuffers.numVertices;a++)F[a]=a;C.geomBuffers.indices=F}n=new Kg(C);break;case"TRIANGLE_STRIP":case 5:if(C.name="GLTFMesh",C.geomBuffers.indices==null){const F=new Uint32Array(3*C.geomBuffers.numVertices-2);F[0]=0,F[1]=1,F[2]=2;for(let a=3;a<F.length;a+=3)F[a-2]=F[a-1],F[a-1]=F[a-2],F[a]=a;C.geomBuffers.indices=F}else{const F=C.geomBuffers.indices,a=F.length-2,U=new Uint32Array(3*a);U[0]=F[0],U[1]=F[1],U[2]=F[2];let d=1;for(let s=3;s<F.length;s++)U[3*d]=F[s-2],U[3*d+1]=F[s-1],U[3*d+2]=F[s],d++;C.geomBuffers.indices=U}n=new Kg(C);break;case"TRIANGLE_FAN":case 6:if(C.name="GLTFMesh",C.geomBuffers.indices==null){const F=new Uint32Array(3*C.geomBuffers.numVertices-2);F[0]=0,F[1]=1,F[2]=2;for(let a=3;a<F.length;a+=3)F[a-2]=F[0],F[a-1]=F[a-1],F[a]=a;C.geomBuffers.indices=F}else{const F=C.geomBuffers.indices,a=F.length-2,U=new Uint32Array(3*a);U[0]=F[0],U[1]=F[1],U[2]=F[2];let d=1;for(let s=3;s<F.length;s++)U[3*d]=F[0],U[3*d+1]=F[s-1],U[3*d+2]=F[s],d++;C.geomBuffers.indices=U}n=new Kg(C)}if(n){if(t.alphaMode=="OPAQUE"){const a=I.getParameter("BaseColor").getValue();a.a=1,I.getParameter("BaseColor").setValue(a)}const F=new ge(C.name,n,I);g.addChild(F,!1)}}computeCentroid(e,g){const t=e.accessors[this.attributes.POSITION].getTypedView(e);if(this.indices!==void 0){const I=e.accessors[this.indices].getTypedView(e),l=new Float32Array(3);for(let n=0;n<I.length;n++){const F=3*I[n];l[0]+=t[F],l[1]+=t[F+1],l[2]+=t[F+2]}const C=new Float32Array([l[0]/I.length,l[1]/I.length,l[2]/I.length]);this.centroid=C}else{const I=new Float32Array(3);for(let n=0;n<t.length;n+=3)I[0]+=t[n],I[1]+=t[n+1],I[2]+=t[n+2];const l=t.length/3,C=new Float32Array([I[0]/l,I[1]/l,I[2]/l]);this.centroid=C}}getShaderIdentifier(){return"primitive.vert"}getDefines(){return this.defines}fromJson(e){super.fromJson(e),e.extensions!==void 0&&this.fromJsonPrimitiveExtensions(e.extensions)}fromJsonPrimitiveExtensions(e){e.KHR_materials_variants!==void 0&&this.fromJsonVariants(e.KHR_materials_variants)}fromJsonVariants(e){e.mappings!==void 0&&(this.mappings=e.mappings)}copyDataFromDecodedGeometry(e,g,t){let I=g.index.array;if(this.loadBufferIntoGltf(I,e,this.indices,34963,"index buffer view"),g.attributes.POSITION!==void 0){let l=this.loadArrayIntoArrayBuffer(g.attributes.POSITION.array,g.attributes.POSITION.componentType);this.loadBufferIntoGltf(l,e,t.POSITION,34962,"position buffer view")}if(g.attributes.NORMAL!==void 0){let l=this.loadArrayIntoArrayBuffer(g.attributes.NORMAL.array,g.attributes.NORMAL.componentType);this.loadBufferIntoGltf(l,e,t.NORMAL,34962,"normal buffer view")}if(g.attributes.TEXCOORD_0!==void 0){let l=this.loadArrayIntoArrayBuffer(g.attributes.TEXCOORD_0.array,g.attributes.TEXCOORD_0.componentType);this.loadBufferIntoGltf(l,e,t.TEXCOORD_0,34962,"TEXCOORD_0 buffer view")}if(g.attributes.TEXCOORD_1!==void 0){let l=this.loadArrayIntoArrayBuffer(g.attributes.TEXCOORD_1.array,g.attributes.TEXCOORD_1.componentType);this.loadBufferIntoGltf(l,e,t.TEXCOORD_1,34962,"TEXCOORD_1 buffer view")}if(g.attributes.TANGENT!==void 0){let l=this.loadArrayIntoArrayBuffer(g.attributes.TANGENT.array,g.attributes.TANGENT.componentType);this.loadBufferIntoGltf(l,e,t.TANGENT,34962,"Tangent buffer view")}if(g.attributes.COLOR_0!==void 0){let l=this.loadArrayIntoArrayBuffer(g.attributes.COLOR_0.array,g.attributes.COLOR_0.componentType);this.loadBufferIntoGltf(l,e,t.COLOR_0,34962,"color buffer view")}if(g.attributes.JOINTS_0!==void 0){let l=this.loadArrayIntoArrayBuffer(g.attributes.JOINTS_0.array,g.attributes.JOINTS_0.componentType);this.loadBufferIntoGltf(l,e,t.JOINTS_0,34963,"JOINTS_0 buffer view")}if(g.attributes.WEIGHTS_0!==void 0){let l=this.loadArrayIntoArrayBuffer(g.attributes.WEIGHTS_0.array,g.attributes.WEIGHTS_0.componentType);this.loadBufferIntoGltf(l,e,t.WEIGHTS_0,34963,"WEIGHTS_0 buffer view")}if(g.attributes.JOINTS_1!==void 0){let l=this.loadArrayIntoArrayBuffer(g.attributes.JOINTS_1.array,g.attributes.JOINTS_1.componentType);this.loadBufferIntoGltf(l,e,t.JOINTS_1,34963,"JOINTS_1 buffer view")}if(g.attributes.WEIGHTS_1!==void 0){let l=this.loadArrayIntoArrayBuffer(g.attributes.WEIGHTS_1.array,g.attributes.WEIGHTS_1.componentType);this.loadBufferIntoGltf(l,e,t.WEIGHTS_1,34963,"WEIGHTS_1 buffer view")}}loadBufferIntoGltf(e,g,t,I,l){const C=new fF;C.byteLength=e.byteLength,C.buffer=e,g.buffers.push(C);const n=new EF;n.buffer=g.buffers.length-1,n.byteLength=e.byteLength,l!==void 0&&(n.name=l),n.target=I,g.bufferViews.push(n),g.accessors[t].byteOffset=0,g.accessors[t].bufferView=g.bufferViews.length-1}loadArrayIntoArrayBuffer(e,g){let t;switch(g){case"Int8Array":t=new ArrayBuffer(e.length),new Int8Array(t).set(e);break;case"Uint8Array":t=new ArrayBuffer(e.length),new Uint8Array(t).set(e);break;case"Int16Array":t=new ArrayBuffer(2*e.length),new Int16Array(t).set(e);break;case"Uint16Array":t=new ArrayBuffer(2*e.length),new Uint16Array(t).set(e);break;case"Int32Array":t=new ArrayBuffer(4*e.length),new Int32Array(t).set(e);break;case"Uint32Array":t=new ArrayBuffer(4*e.length),new Uint32Array(t).set(e);break;default:case"Float32Array":t=new ArrayBuffer(4*e.length),new Float32Array(t).set(e)}return t}decodeDracoBufferToIntermediate(e,g){let t=e.bufferView;const I=g.bufferViews[t],l=g.buffers[I.buffer],C=new Int8Array(l.buffer).slice(I.byteOffset,I.byteOffset+I.byteLength);let n=new Eg().module,F=new n.Decoder,a=new n.DecoderBuffer;a.Init(C,I.byteLength);let U=this.decodeGeometry(n,F,a,e.attributes,g);return n.destroy(a),U}getDracoArrayTypeFromComponentType(e){switch(e){case le.BYTE:return"Int8Array";case le.UNSIGNED_BYTE:return"Uint8Array";case le.SHORT:return"Int16Array";case le.UNSIGNED_SHORT:return"Uint16Array";case le.INT:return"Int32Array";case le.UNSIGNED_INT:return"Uint32Array";case le.FLOAT:default:return"Float32Array"}}decodeGeometry(e,g,t,I,l){let C,n,F=g.GetEncodedGeometryType(t);if(F!==e.TRIANGULAR_MESH)throw new Error("DRACOLoader: Unexpected geometry type.");if(C=new e.Mesh,n=g.DecodeBufferToMesh(t,C),!n.ok()||C.ptr===0)throw new Error("DRACOLoader: Decoding failed: "+n.error_msg());let a={index:null,attributes:{}},U=C.num_points();for(let s in I){let o,A=le.BYTE;for(const[Q,r]of Object.entries(this.attributes))if(Q===s){A=l.accessors[r].componentType,o=l.accessors[r].count;break}if(U!==o)throw new Error(`DRACOLoader: Accessor vertex count ${o} does not match draco decoder vertex count  ${U}`);A=this.getDracoArrayTypeFromComponentType(A);let B=g.GetAttributeByUniqueId(C,I[s]);var d=this.decodeAttribute(e,g,C,s,B,A);a.attributes[d.name]=d}if(F===e.TRIANGULAR_MESH){let s=3*C.num_faces(),o=4*s,A=e._malloc(o);g.GetTrianglesUInt32Array(C,o,A);let B=new Uint32Array(e.HEAPU32.buffer,A,s).slice();e._free(A),a.index={array:B,itemSize:1}}return e.destroy(C),a}decodeAttribute(e,g,t,I,l,C){let n,F,a,U=l.num_components(),d=t.num_points()*U;switch(C){case"Float32Array":a=4*d,n=e._malloc(a),g.GetAttributeDataArrayForAllPoints(t,l,e.DT_FLOAT32,a,n),F=new Float32Array(e.HEAPF32.buffer,n,d).slice(),e._free(n);break;case"Int8Array":n=e._malloc(d),g.GetAttributeDataArrayForAllPoints(t,l,e.DT_INT8,d,n),F=new Int8Array(e.HEAP8.buffer,n,d).slice(),e._free(n);break;case"Int16Array":a=2*d,n=e._malloc(a),g.GetAttributeDataArrayForAllPoints(t,l,e.DT_INT16,a,n),F=new Int16Array(e.HEAP16.buffer,n,d).slice(),e._free(n);break;case"Int32Array":a=4*d,n=e._malloc(a),g.GetAttributeDataArrayForAllPoints(t,l,e.DT_INT32,a,n),F=new Int32Array(e.HEAP32.buffer,n,d).slice(),e._free(n);break;case"Uint8Array":n=e._malloc(d),g.GetAttributeDataArrayForAllPoints(t,l,e.DT_UINT8,d,n),F=new Uint8Array(e.HEAPU8.buffer,n,d).slice(),e._free(n);break;case"Uint16Array":a=2*d,n=e._malloc(a),g.GetAttributeDataArrayForAllPoints(t,l,e.DT_UINT16,a,n),F=new Uint16Array(e.HEAPU16.buffer,n,d).slice(),e._free(n);break;case"Uint32Array":a=4*d,n=e._malloc(a),g.GetAttributeDataArrayForAllPoints(t,l,e.DT_UINT32,a,n),F=new Uint32Array(e.HEAPU32.buffer,n,d).slice(),e._free(n);break;default:throw new Error("DRACOLoader: Unexpected attribute type.")}return{name:I,array:F,itemSize:U,componentType:C}}}class TV extends je{constructor(){super(),this.primitives=[],this.name=void 0,this.weights=[],this.weightsAnimated=void 0}fromJson(e){super.fromJson(e),e.name!==void 0&&(this.name=e.name),this.primitives=qe(e.primitives,EV),e.weights!==void 0&&(this.weights=e.weights)}getWeightsAnimated(){return this.weightsAnimated!==void 0?this.weightsAnimated:this.weights}initGl(e,g){this.primitives.forEach(t=>{t.initGl(e,g)})}}class YV extends je{constructor(){super(),this.camera=void 0,this.children=[],this.matrix=void 0,this.rotation=[0,0,0,1],this.scale=[1,1,1],this.translation=[0,0,0],this.name=void 0,this.mesh=void 0,this.skin=void 0,this.light=void 0,this.changed=!0,this.animationRotation=void 0,this.animationTranslation=void 0,this.animationScale=void 0}fromJson(e){super.fromJson(e)}initGl(e,g){let t;if(this.extras){if(window.zeaCad){const{CADBody:l}=zeaCad;t=new l(this.name)}else t=new H(this.name);for(let l in this.extras){const C=this.extras[l];typeof C=="string"?t.addParameter(new Zg(l,C)):typeof C=="boolean"?t.addParameter(new Je(l,C)):typeof C=="number"?t.addParameter(new k(l,C)):typeof C=="object"&&t.addParameter(new Le(l,C,"json"))}t.extras=this.extras}else t=new H(this.name);const I=new v;if(this.matrix!==void 0){const l=new Ee(Float32Array.from(this.matrix));I.setFromMat4(l)}else this.scale!==void 0&&I.sc.set(...this.scale),this.rotation!==void 0&&I.ori.set(...this.rotation),this.translation!==void 0&&I.tr.set(...this.translation);t.getParameter("LocalXfo").setValue(I),this.children.forEach(l=>{e.nodes[l].initGl(e,t)}),this.mesh!=null&&e.meshes[this.mesh].initGl(e,t),g.addChild(t,!1),ee.incrementWorkDone(1)}applyMatrix(e){this.matrix=e,mat4.getScaling(this.scale,this.matrix);const g=mat4.create();for(const t of[0,1,2])g[t]=this.matrix[t]/this.scale[0],g[t+4]=this.matrix[t+4]/this.scale[1],g[t+8]=this.matrix[t+8]/this.scale[2];mat4.getRotation(this.rotation,g),quat.normalize(this.rotation,this.rotation),mat4.getTranslation(this.translation,this.matrix),this.changed=!0}applyTranslationAnimation(e){this.animationTranslation=e,this.changed=!0}applyRotationAnimation(e){this.animationRotation=e,this.changed=!0}applyScaleAnimation(e){this.animationScale=e,this.changed=!0}resetTransform(){this.rotation=[0,0,0,1],this.scale=[1,1,1],this.translation=[0,0,0],this.changed=!0}getLocalTransform(){if(this.transform===void 0||this.changed){this.transform=mat4.create();const e=this.animationTranslation!==void 0?this.animationTranslation:this.translation,g=this.animationRotation!==void 0?this.animationRotation:this.rotation,t=this.animationScale!==void 0?this.animationScale:this.scale;mat4.fromRotationTranslationScale(this.transform,g,e,t),this.changed=!1}return mat4.clone(this.transform)}}class pl extends je{constructor(e="LINEAR",g="LINEAR_MIPMAP_LINEAR",t="REPEAT",I="REPEAT"){super(),this.magFilter=e,this.minFilter=g,this.wrapS=t,this.wrapT=I,this.name=void 0}static createDefault(){return new pl}}class vV extends je{constructor(e=[],g){super(),this.nodes=e,this.name=g,this.imageBasedLight=void 0}initGl(e,g){if(this.extensions!==void 0&&this.extensions.KHR_lights_image_based!==void 0){const t=this.extensions.KHR_lights_image_based.imageBasedLight;this.imageBasedLight=e.imageBasedLights[t]}this.nodes.forEach(t=>{e.nodes[t].initGl(e,g)})}gatherNodes(e){const g=[];function t(I){const l=e.nodes[I];g.push(l);for(const C of l.children)t(C)}for(const I of this.nodes)t(I);return g}includesNode(e,g){let t=[...this.nodes];for(;t.length>0;){const I=t.pop();if(I===g)return!0;t=t.concat(e.nodes[I].children)}return!1}}class MV extends je{constructor(){super(),this.copyright=void 0,this.generator=void 0,this.version=void 0,this.minVersion=void 0}}class HV extends je{constructor(){super(),this.target={node:void 0,path:void 0},this.sampler=void 0}}const xV="translation",vF="rotation",wV="scale",DV="weights";class KV extends je{constructor(){super(),this.input=void 0,this.interpolation=void 0,this.output=void 0}}const LV="LINEAR",Ua="STEP",da="CUBICSPLINE";class zV{constructor(){this.prevKey=0,this.prevT=0}slerpQuat(e,g,t){const I=quat.create(),l=quat.create();quat.normalize(I,e),quat.normalize(l,g);const C=quat.create();return quat.slerp(C,I,l,t),quat.normalize(C,C),C}step(e,g,t){const I=new glMatrix.ARRAY_TYPE(t);for(let l=0;l<t;++l)I[l]=g[e*t+l];return I}linear(e,g,t,I,l){const C=new glMatrix.ARRAY_TYPE(l);for(let n=0;n<l;++n)C[n]=t[e*l+n]*(1-I)+t[g*l+n]*I;return C}cubicSpline(e,g,t,I,l,C){const n=e*C*3,F=g*C*3,a=1*C,U=2*C,d=new glMatrix.ARRAY_TYPE(C),s=l**2,o=l**3;for(let A=0;A<C;++A){const B=t[n+A+a],Q=I*t[F+A+0],r=I*t[n+A+U],R=t[F+A+a];d[A]=(2*o-3*s+1)*B+(o-2*s+l)*r+(-2*o+3*s)*R+(o-s)*Q}return d}resetKey(){this.prevKey=0}interpolate(e,g,t,I,l,C){if(I===void 0)return;const n=e.accessors[t.input].getNormalizedDeinterlacedView(e),F=e.accessors[t.output].getNormalizedDeinterlacedView(e);if(F.length===l)return yF(F,0,l);I=kC(I%=C,n[0],n[n.length-1]),this.prevT>I&&(this.prevKey=0),this.prevT=I;let a=null;for(let s=this.prevKey;s<n.length;++s)if(I<=n[s]){a=kC(s,1,n.length-1);break}this.prevKey=kC(a-1,0,a);const U=n[a]-n[this.prevKey],d=(I-n[this.prevKey])/U;if(g.target.path===vF){if(da===t.interpolation){const s=this.cubicSpline(this.prevKey,a,F,U,d,4);return quat.normalize(s,s),s}if(t.interpolation===LV){const s=this.getQuat(F,this.prevKey),o=this.getQuat(F,a);return this.slerpQuat(s,o,d)}if(t.interpolation===Ua)return this.getQuat(F,this.prevKey)}switch(t.interpolation){case Ua:return this.step(this.prevKey,F,l);case da:return this.cubicSpline(this.prevKey,a,F,U,d,l);default:return this.linear(this.prevKey,a,F,d,l)}}getQuat(e,g){const t=e[4*g],I=e[4*g+1],l=e[4*g+2],C=e[4*g+3];return quat.fromValues(t,I,l,C)}}class _V extends je{constructor(){super(),this.channels=[],this.samplers=[],this.name="",this.interpolators=[],this.maxTime=0,this.disjointAnimations=[]}fromJson(e){if(super.fromJson(e),this.channels=qe(e.channels,HV),this.samplers=qe(e.samplers,KV),this.name=e.name,this.channels!==void 0)for(let g=0;g<this.channels.length;++g)this.interpolators.push(new zV);else console.error("No channel data found for skin")}advance(e,g){if(this.channels!==void 0){if(this.maxTime==0)for(let t=0;t<this.channels.length;++t){const I=this.channels[t],l=this.samplers[I.sampler],C=e.accessors[l.input].getDeinterlacedView(e),n=C[C.length-1];n>this.maxTime&&(this.maxTime=n)}for(let t=0;t<this.interpolators.length;++t){const I=this.channels[t],l=this.samplers[I.sampler],C=this.interpolators[t],n=e.nodes[I.target.node];switch(I.target.path){case xV:n.applyTranslationAnimation(C.interpolate(e,I,l,g,3,this.maxTime));break;case vF:n.applyRotationAnimation(C.interpolate(e,I,l,g,4,this.maxTime));break;case wV:n.applyScaleAnimation(C.interpolate(e,I,l,g,3,this.maxTime));break;case DV:{const F=e.meshes[n.mesh];F.weightsAnimated=C.interpolate(e,I,l,g,F.weights.length,this.maxTime);break}}}}}}class OV extends je{constructor(){super(),this.name="",this.inverseBindMatrices=void 0,this.joints=[],this.skeleton=void 0,this.jointMatrices=[],this.jointNormalMatrices=[]}computeJoints(e,g){const t=e.accessors[this.inverseBindMatrices].getDeinterlacedView(e);this.jointMatrices=[],this.jointNormalMatrices=[];let I=0;for(const l of this.joints){const C=e.nodes[l];let n=mat4.create(),F=yF(t,16*I++,16);mat4.mul(n,C.worldTransform,F),mat4.mul(n,g.inverseWorldTransform,n),this.jointMatrices.push(n);let a=mat4.create();mat4.invert(a,n),mat4.transpose(a,a),this.jointNormalMatrices.push(a)}}}class PV extends je{constructor(){super(),this.name=void 0}fromJson(e){e.name!==void 0&&(this.name=e.name)}}class jV extends je{constructor(e){super(),this.asset=void 0,this.accessors=[],this.nodes=[],this.scene=void 0,this.scenes=[],this.cameras=[],this.lights=[],this.imageBasedLights=[],this.textures=[],this.images=[],this.samplers=[],this.meshes=[],this.buffers=[],this.bufferViews=[],this.materials=[],this.materialsMap={},this.animations=[],this.skins=[],this.path=e}initGl(e){const g=this;for(const t of this.images)t!=null&&t.initGl!==void 0&&t.initGl(g,e);for(const t of this.samplers)t!=null&&t.initGl!==void 0&&t.initGl(g,e);for(const t of this.textures)t!=null&&t.initGl!==void 0&&t.initGl(g,e);for(const t of this.materials)t!=null&&t.initGl!==void 0&&t.initGl(g,e);this.scenes[this.scene].initGl(this,e)}fromJson(e){super.fromJson(e),this.asset=XF(e.asset,MV),this.cameras=qe(e.cameras,Ni),this.accessors=qe(e.accessors,Sl),this.meshes=qe(e.meshes,TV),this.samplers=qe(e.samplers,pl),this.materials=qe(e.materials,Nl),this.buffers=qe(e.buffers,fF),this.bufferViews=qe(e.bufferViews,EF),this.scenes=qe(e.scenes,vV),this.textures=qe(e.textures,fV),this.nodes=qe(e.nodes,YV),this.lights=qe(function(g){return g===void 0?[]:g.KHR_lights_punctual===void 0?[]:g.KHR_lights_punctual.lights}(e.extensions),NV),this.imageBasedLights=qe(function(g){return g===void 0?[]:g.KHR_lights_image_based===void 0?[]:g.KHR_lights_image_based.imageBasedLights}(e.extensions),kV),this.images=qe(e.images,QI),this.animations=qe(e.animations,_V),this.skins=qe(e.skins,OV),this.variants=qe(function(g){return g===void 0?[]:g.KHR_materials_variants===void 0?[]:g.KHR_materials_variants.variants}(e.extensions),PV),this.variants=function(g){for(let t=0;t<g.length;t++){const I=g[t].name;for(let l=t+1;l<g.length;l++)g[l].name==I&&(g[l].name+="0")}return g}(this.variants),this.materials.push(Nl.createDefault()),this.samplers.push(pl.createDefault()),e.scenes!==void 0&&(e.scene===void 0&&e.scenes.length>0?this.scene=0:this.scene=e.scene),this.computeDisjointAnimations()}computeDisjointAnimations(){for(let e=0;e<this.animations.length;e++){this.animations[e].disjointAnimations=[];for(let g=0;g<this.animations.length;g++){if(e==g)continue;let t=!0;for(const I of this.animations[e].channels)for(const l of this.animations[g].channels)if(I.target.node===l.target.node&&I.target.path===l.target.path){t=!1;break}t&&this.animations[e].disjointAnimations.push(g)}}}nonDisjointAnimations(e){const g=this.animations,t=[];for(let I=0;I<g.length;I++){let l=!0;for(const C of e)I!=C&&(g[C].disjointAnimations.includes(I)||(l=!1));l||t.push(I)}return t}}class qV{constructor(e){this.data=e,this.glbHeaderInts=3,this.glbChunkHeaderInts=2,this.glbMagic=1179937895,this.glbVersion=2,this.jsonChunkType=1313821514,this.binaryChunkType=5130562}extractGlbData(){if(this.getCheckedGlbInfo()===void 0)return;let e,g=[];const t=this.getAllChunkInfos();for(let I of t)I.type!=this.jsonChunkType||e?I.type==this.binaryChunkType&&g.push(this.getBufferFromChunk(I)):e=this.getJsonFromChunk(I);return{json:e,buffers:g}}getCheckedGlbInfo(){const e=new Uint32Array(this.data,0,this.glbHeaderInts),g=e[0],t=e[1],I=e[2];if(this.checkEquality(g,this.glbMagic,"glb magic")&&this.checkEquality(t,this.glbVersion,"glb header version")&&this.checkEquality(I,this.data.byteLength,"glb byte length"))return{magic:g,version:t,length:I}}getAllChunkInfos(){let e=[],g=4*this.glbHeaderInts;for(;g<this.data.byteLength;){const t=this.getChunkInfo(g);e.push(t),g+=t.length+4*this.glbChunkHeaderInts}return e}getChunkInfo(e){const g=new Uint32Array(this.data,e,this.glbChunkHeaderInts);return{start:e+4*this.glbChunkHeaderInts,length:g[0],type:g[1]}}getJsonFromChunk(e){const g=e.length,t=4*(this.glbHeaderInts+this.glbChunkHeaderInts),I=new Uint8Array(this.data,t,g),l=new TextDecoder("utf-8").decode(I);return JSON.parse(l)}getBufferFromChunk(e){return this.data.slice(e.start,e.start+e.length)}checkEquality(e,g,t){return e==g||(console.error("Found invalid/unsupported "+t+", expected: "+g+", but was: "+e),!1)}}class vg{static async load(e,g,t){const I=vg.getBuffers(t),l=vg.getAdditionalFiles(t),C=vg.loadBuffers(e,I,l);await C;const n=vg.loadImages(e,l);return await Promise.all([C,n]).then(()=>{e.initGl(g)})}static unload(e){for(let g of e.images)g.image=void 0;e.images=[];for(let g of e.textures)g.destroy();e.textures=[];for(let g of e.accessors)g.destroy();e.accessors=[]}static getBuffers(e){return vg.getTypedAppendix(e,ArrayBuffer)}static getAdditionalFiles(e){return typeof File!="undefined"?vg.getTypedAppendix(e,File):void 0}static getTypedAppendix(e,g){if(e&&e.length>0&&e[0]instanceof g)return e}static loadBuffers(e,g,t){const I=[];if(g!==void 0&&g[0]!==void 0){g.length>1&&console.warn("Too many buffer chunks in GLB file. Only one or zero allowed"),e.buffers[0].buffer=g[0];for(let l=1;l<e.buffers.length;++l)I.push(e.buffers[l].load(e,t))}else for(const l of e.buffers)I.push(l.load(e,t));return Promise.all(I)}static loadImages(e,g){const t=[];for(let I of e.images)t.push(I.load(e,g));return Promise.all(t)}}async function fC(i){let e="",g=0;const t=i;let I;for(;!e.match(/\n\n[^\n]+\n/g);)e+=String.fromCharCode(t[g++]);if(I=e.match(/FORMAT=(.*)$/m),I.length<2)return;if(I=I[1],I!="32-bit_rle_rgbe")return console.warn("unknown format : "+I),this.onerror();let l=e.split(/\n/).reverse();if(l.length<2||(l=l[1].split(" "),l.length<4))return;const C=1*l[3],n=1*l[1],F=new Uint8Array(C*n*4);let a=0;for(let U=0;U<n;U++){const d=[];let s=t.slice(g,g+=4);if(s[0]==2&&s[1]==2&&s[2]==(C>>8&255)&&s[3]==(255&C)&&C>=8&&C<32768){for(let o=0;o<4;o++){let A=o*C;const B=(o+1)*C;let Q,r;for(;A<B;)if(Q=t.slice(g,g+=2),Q[0]>128)for(r=Q[0]-128;r-- >0;)d[A++]=Q[1];else for(r=Q[0]-1,d[A++]=Q[1];r-- >0;)d[A++]=t[g++]}for(let o=0;o<C;o++)F[a++]=d[o+0*C],F[a++]=d[o+1*C],F[a++]=d[o+2*C],F[a++]=d[o+3*C]}else{g-=4;for(let o=0;o<C;o++)s=t.slice(g,g+=4),F[a++]=s[0],F[a++]=s[1],F[a++]=s[2],F[a++]=s[3]}}return{dataFloat:function(U){const d=U.byteLength>>2,s=new Float32Array(3*d);for(let o=0;o<d;o++){const A=Math.pow(2,U[4*o+3]-136);s[3*o]=U[4*o]*A,s[3*o+1]=U[4*o+1]*A,s[3*o+2]=U[4*o+2]*A}return s}(F),width:C,height:n}}class $V extends H{constructor(e){super(e),this.init()}init(e,g){this.initKtxLib(g),this.initDracoLib(e)}async load(e,g){await this.init();let t,I,l,C;if(g||(g=e),ee.incrementWorkload(1),typeof e=="string"){t=GV(g);let F=await ee.loadFile(t?"binary":"json",e);l=F,C=F}else console.error("Passed invalid type to loadGltf "+typeof gltfFile);if(t){const F=new qV(C).extractGlbData();l=F.json,I=F.buffers}const n=new jV(g);n.fromJson(l);for(const F of n.images)F.resolveRelativePath(kF(n.path));return ee.incrementWorkload(n.nodes.length),await vg.load(n,this,I),ee.incrementWorkDone(1),n}async loadEnvironment(e,g){let t;if(typeof e=="string"){let I=await ee.loadFile(e?"binary":"json",url);t=await fC(new Uint8Array(I.data))}else if(e instanceof ArrayBuffer)t=await fC(new Uint8Array(e));else if(typeof File!="undefined"&&e instanceof File){const I=await TF.readAsArrayBuffer(e).catch(()=>{console.error("Could not load image with FileReader")});t=await fC(new Uint8Array(I))}else console.error("Passed invalid type to loadEnvironment "+typeof gltfFile);if(t!==void 0)return _loadEnvironmentFromPanorama(t,this.view,g)}initKtxLib(e){}async initDracoLib(e){const g=new Eg(e);g!==void 0&&await g.ready()}}ml?ml.registerLib(JV):console.warn("The version of the Zea Engine that you're using doesn't support the libraries registry. Please upgrade to the latest Zea Engine version.");let sa=!1;class er extends HTMLElement{constructor(){super();tt(this,"modal");tt(this,"content");tt(this,"loadFileCallback");const e=this.attachShadow({mode:"open"});this.modal=document.createElement("div"),this.modal.classList.add("modal"),e.appendChild(this.modal),this.content=document.createElement("div"),this.content.classList.add("modal-content"),this.modal.appendChild(this.content),this.content.innerHTML=`<div id="fileDropZone" class="fixed w-full flex h-screen">
    <input
      accept=".zcad, .gltf, .glb, gltf, .obj"
      multiple
      type="file"
      class="absolute inset-0 z-50 m-0 p-0 w-full h-full outline-none opacity-0"
      id="dropHotSpot"
    />
      <div
        class="border-2 border-gray-400 py-12 justify-center items-center p-4 m-auto rounded-lg w-3/12 h-1/3 bg-gray-200 bg-opacity-25 hover:bg-blue-200 hover:bg-opacity-25 text-black grid justify-items-center"
      >
        <div class="m-auto">
          <div class="flex flex-col space-y-2 items-center justify-center">
            <i class="fas fa-cloud-upload-alt fa-3x text-currentColor" />
            <p class="text-gray-700 text-center">Drag your gltf, obj or zcad files here or click in this area.</p>
          </div>
        </div>
      </div>
  </div>`;const g=a=>{sa&&this.shadowRoot.getElementById("fileDropZone").classList.remove("pointer-events-none"),a.preventDefault()},t=a=>{a.preventDefault()},I=a=>{if(a.dataTransfer){for(var U=0;U<a.dataTransfer.items.length;U++)if(a.dataTransfer.items[U].kind==="file"){const d=a.dataTransfer.items[U].getAsFile();d&&C(d)}}a.preventDefault()},l=a=>{for(var U=0;U<a.target.files.length;U++){let d=a.target.files[U];C(d)}a.preventDefault()},C=a=>{const U=new FileReader;U.addEventListener("load",()=>{const d=U.result,s=a.name;this.loadFile(d,s)},!1),U.readAsDataURL(a)},n=this.shadowRoot.getElementById("dropHotSpot");n.addEventListener("change",l),n.addEventListener("drop",I),document.body.addEventListener("dragover",t),document.body.addEventListener("dragenter",g),document.body.addEventListener("drop",I);const F=document.createElement("style");F.appendChild(document.createTextNode(`
/* The Modal (background) */
.modal {
  display: block; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

/* Modal Content/Box */
.modal-content {
  background-color: #eeeeee88;
  margin: 15% auto; /* 15% from the top and centered */
  padding: 20px;
  border: 1px solid #888;
  width: 80%; /* Could be more or less, depending on screen size */
  max-width: 600px;
}

`)),e.appendChild(F),this.hide()}display(e){this.loadFileCallback=e,this.modal.style.setProperty("pointer-events","auto"),this.modal.style.setProperty("display","block")}hide(){this.modal.style.setProperty("pointer-events","none"),this.modal.style.setProperty("display","none")}loadFile(e,g){this.hide(),sa=!0,this.loadFileCallback&&this.loadFileCallback(e,g)}}customElements.define("drop-zone",er);const EC="2d37e395cc590b4e127317494566f1aaf881f0ac1b5ff7d4180506fd682d68ea",gr=!0;async function tr(i){const e=new TextEncoder().encode(i),g=await crypto.subtle.digest("SHA-256",e);return Array.from(new Uint8Array(g)).map(l=>l.toString(16).padStart(2,"0")).join("")}class Ir{async isAuthenticated(){const e=await this.getUserData();return e&&(e.hashedPassword===EC||!gr)}async getUserData(){const{zeaUserData:e}=window.localStorage;return e&&JSON.parse(e)}async setUserData(e){{if(!e.password)throw new Error("Password not provided.");if(e.hashedPassword!==EC&&(e.hashedPassword=await tr(e.password),e.password="".padEnd(6,"*")),e.hashedPassword!==EC)throw new Error("Wrong password.")}window.localStorage.zeaUserData=JSON.stringify(e)}async signOut(){localStorage.removeItem("zeaUserData")}}const TC=new Ir,rl=(i=3)=>Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,i),lr=()=>`${rl(3)}-${rl(3)}-${rl(3)}`,Cr=(i,e)=>{var g=new URL(window.location.href);g.searchParams.set(i,e),window.history.pushState({},"",g.href)};class ir extends HTMLElement{constructor(){super();tt(this,"modal");tt(this,"content");tt(this,"onCloseCallback");const e=this.attachShadow({mode:"open"});this.modal=document.createElement("div"),this.modal.classList.add("modal"),e.appendChild(this.modal),this.content=document.createElement("div"),this.content.classList.add("modal-content"),this.modal.appendChild(this.content),this.content.innerHTML=`
        <div class="imgcontainer">
          <img src="./data/logo-zea.svg" alt="Avatar" class="avatar">
        </div>

        <div class="container">
          <label for="uname"><b>Username</b></label>
          <input id="uname" type="text" placeholder="Enter Username" name="uname" required>

          <label for="psw"><b>Password</b></label>
          <input id="psw" type="password" placeholder="Enter Password" name="psw" required>

          <label for="room"><b>Room ID</b></label>
          <input id="room" type="text" placeholder="Enter Room ID" name="room" required>


          <button type="submit" id="login">Login</button>
        </div>`;const g=this.shadowRoot.getElementById("uname");let t;t=this.shadowRoot.getElementById("psw"),t.addEventListener("input",()=>{t.style.border=""});let I;{I=this.shadowRoot.getElementById("room");const a=new URLSearchParams(window.location.search).get("roomId")||lr();I.value=a}let l;TC.getUserData().then(F=>{l=F||{},F&&(t.value=F.password,g.value=F.firstName)});const C=this.shadowRoot.getElementById("login");C.onclick=async()=>{const F=rl();l.color=E.random().toHex(),l.firstName=g.value,l.id=F,l.lastName="",l.password=t.value,l.username=g.value,I.value&&Cr("roomId",I.value);try{await TC.setUserData(l)}catch{t.style.border="2px solid #f00";return}this.close()};const n=document.createElement("style");n.appendChild(document.createTextNode(`
/* The Modal (background) */
.modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

/* Modal Content/Box */
.modal-content {
  background-color: #eeeeee;
  margin: 15% auto; /* 15% from the top and centered */
  padding: 20px;
  border: 1px solid #888;
  width: 80%; /* Could be more or less, depending on screen size */
  max-width: 600px;
}


/* The Close Button */
.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}

/* Full-width inputs */
input[type=text], input[type=password] {
  width: 100%;
  padding: 12px 20px;
  margin: 8px 0;
  display: inline-block;
  border: 1px solid #ccc;
  box-sizing: border-box;
}

/* Set a style for all buttons */
button {
  background-color: #f9ce03;
  color: black;
  padding: 14px 20px;
  margin: 8px 0;
  border: none;
  cursor: pointer;
  width: 100%;
}

/* Add a hover effect for buttons */
button:hover {
  opacity: 0.8;
}

/* Extra style for the cancel button (red) */
.cancelbtn {
  width: auto;
  padding: 10px 18px;
  background-color: #f44336;
}

/* Center the avatar image inside this container */
.imgcontainer {
  text-align: center;
  margin: 24px 0 12px 0;
}

/* Avatar image */
img.avatar {
  height: 40px;
}

/* Add padding to containers */
.container {
  padding: 16px;
}

/* The "Forgot password" text */
span.psw {
  float: right;
  padding-top: 16px;
}

/* Change styles for span and cancel button on extra small screens */
@media screen and (max-width: 300px) {
  span.psw {
    display: block;
    float: none;
  }
  .cancelbtn {
    width: 100%;
  }
}

`)),e.appendChild(n)}show(e){this.onCloseCallback=e,new URLSearchParams(window.location.search).has("roomId")&&TC.isAuthenticated().then(t=>{t&&this.close()}),this.modal.style.display="block"}close(){this.modal.style.display="none",this.onCloseCallback&&this.onCloseCallback()}}customElements.define("login-dialog",ir);function nr(){const i=new URLSearchParams(window.location.search),e=new Wd;e.setupGrid(10,10);const g=new zt(document.getElementById("canvas"),{debugGeomIds:!1,enableFrustumCulling:!0});g.setScene(e),g.getViewport().getCamera().setPositionAndTarget(new b(2,2,2),new b(0,0,.5));const t=new Fi;t.load("/data/StudioG.zenv"),e.setEnvMap(t);const I={scene:e,renderer:g},l=new E("#F9CE03");l.a=.1;const C=new CB(I,{selectionOutlineColor:l,branchSelectionOutlineColor:l});I.selectionManager=C;const n=document.getElementById("progress");let F=0;ee.on("progressIncremented",R=>{n.value=R.percent,R.percent>=100?F=setTimeout(()=>n.classList.add("hidden"),1e3):R.percent<100&&(F&&(clearTimeout(F),F=0),n.classList.remove("hidden"))});const a=document.getElementById("fps");if(a){let R=0;g.on("redrawOccurred",()=>{R++}),setInterval(()=>{a.textContent=`Fps: ${R*2}`,R=0},500)}const U=document.querySelector("#tree");U.setSelectionManager(C),U.setTreeItem(e.getRoot());const d=new E("#F9CE03");d.a=.1;const s=R=>{let V=R;for(;V&&!(V instanceof At)&&!(V instanceof xg);)V=V.getOwner();return V.getOwner()instanceof Ol&&(V=V.getOwner()),V};g.getViewport().on("pointerDown",R=>{if(R.intersectionData){const V=s(R.intersectionData.geomItem);V&&console.log(V.getPath())}}),g.getViewport().on("pointerUp",R=>{if(R.button==0&&R.intersectionData){const V=s(R.intersectionData.geomItem);if(V)if(!R.shiftKey)C.toggleItemSelection(V,!R.ctrlKey);else{const h=new Set;h.add(V),C.deselectItems(h)}}}),document.addEventListener("keydown",R=>{R.key=="f"&&(g.frameAll(),R.stopPropagation())}),g.getXRViewport().then(R=>{a&&(a.style.bottom="70px");const V=document.getElementById("xr-button");V&&(V.textContent="Launch VR",V.classList.remove("hidden"),R.on("presentingChanged",h=>{const{state:m}=h;m?V.textContent="Exit VR":V.textContent="Launch VR"}),V.addEventListener("click",()=>{R.togglePresenting()})),document.addEventListener("keydown",h=>{h.key==" "&&R.togglePresenting()})}),i.has("profile")&&g.startContinuousDrawing();const o=()=>{let R=0,V=0,h=0,m=0;e.getRoot().traverse(Z=>{if(Z instanceof jl)R++;else if(Z instanceof ge){V++;const c=Z.geomParam.value;c instanceof sg?m+=c.getNumSegments():c instanceof Gg?m+=c.getNumLineSegments():c instanceof ht?h+=c.computeNumTriangles():c instanceof Kg?h+=c.getNumTriangles():c instanceof hI&&(m+=c.getNumLineSegments(),h+=c.getNumTriangles())}}),console.log(`parts:${R} geomItems:${V} lines:${m} triangles:${h}`)},A=R=>{const V=new ot,h=new st;if(h.camera=g.getViewport().getCamera(),V.load(R,h).then(()=>{g.frameAll()}),V.getGeometryLibrary().on("loaded",()=>{o()}),i.has("ytoz")){const m=new v;m.ori.setFromAxisAndAngle(new b(1,0,0),Math.PI*.5),V.globalXfoParam.value=m}e.getRoot().addChild(V)},B=(R,V="")=>{const h=new $V(V);return h.load(R,V).then(()=>{o(),g.frameAll()}),e.getRoot().addChild(h),h},Q=(R,V="")=>{const h=new bd(V);return h.load(R).then(()=>{o(),g.frameAll()}),e.getRoot().addChild(h),h},r=(R,V="")=>{if(V.endsWith("zcad"))return A(R);if(V.endsWith("gltf")||V.endsWith("glb"))return B(R,V);if(V.endsWith("obj"))return Q(R,V);throw new Error("Unsupported file type:"+V)};i.has("zcad")?A(i.get("zcad")):i.has("gltf")?B(i.get("gltf")):i.has("obj")?Q(i.get("obj")):document.getElementById("dropZone").display((V,h)=>{r(V,h)})}nr()});export default ar();
